[jQuery]
자바스크립트의 가장 대표적인 라이브러리 언어(오픈소스)
거의 모든 브라우저에서의 호환성
네트워크나 애니메이션 등 다양한 기능을 제공
메서드 체이닝기법 등 짧고 유지관리가 용이한 코드작성을 지원
끝 문장에 반드시 ; 입력

jQuery 사용방법
- 다운로드(로컬)
1. https://jquery.com/download/ 이동
2. compressed, uncompressed 선택 후 해당 문서를 다른이름으로 저장(내용은 동일)
* uncompressed는 jQuery를 재가공할때 사용할 수도 있다.
3. 복사 후 새 폴더에 붙여넣기
적용 : <script type="text/javascript" src="../js/jquery-3.6.0.min.js"></script>입력 후 스크립트를 새로 만들어서 그 안에 내용 입력
4. 제이쿼리에서 body에 있는 모든 element를 메모리 로딩 후 스크립트 실행
$(document).ready(function(){ 내용 });
$(function( ){ 내용 });
$(()=>{ 내용 });
* $는 jQuery로 대체해서 작성해도 된다.

- CDN호스트링크 방식(해당 사이트를 링크)
적용 : <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script> 입력 후 스크립트를 새로 만들어서 그 안에 내용 입력
$(function( ){ 내용 });
( = $(document).ready(function(){ 내용 }); )
( = $(()=>{ 내용 }); )

* jQuery 라이브러리가 익스터널방식보다 아래에 있을 경우 실행이 불가하다.
* 실행이 안된다면 브라우저의 콘솔창에서 확인이 가능하다.(not defined는 라이브러리가 없을 때 발생)

[선택자 선택]
$("*") : 전체요소 선택
$("tag1, tag2 , , ") : tag1, tag2 등 요소 선택
$("#id") : id 요소 선택
$(".class") : class 요소 선택
$("tag1 tag2") : tag1의 하위 요소 tag2 선택
$("tag1 > tag2") : tag1의 자식 요소 tag2 선택
$("x").parent( ) : x 부모요소
$("x").children("tag") : x를 기준으로 자식 tag 요소
$("x").prev( ) : x를 기준으로 형제 중 이전 요소
$("x").next( ) : x를 기준으로 형제 중 다음 요소
$("x").siblings("tag") : x를 기준으로 해당 tag를 가진 형제요소를 모두 선택
$("x : 타입종류") : x 중 type이 일치하는 것 (input 요소 중 text type 등)
* 해당 선택자는 생략하고 타입종류로만 작성해도 무관

[탐색 선택자 : $("css선택방식 : 탐색선택|함수()")]
- 좀 더 세밀하고 정확한 선택을 가능하게 해준다.

- 탐색선택자의 종류
$("x y : odd") : x의 y요소 중 홀수 요소
$("x y : even") : x의 y요소 중 짝수 요소
$("x y : first") : x의 y요소 중 첫번째 요소
$("x y : last") : x의 y요소 중 마지막 요소
$("x y : eq(index)") : x의 y요소 중 index번째 요소( =$("x y").eq(1) )
$("x y : lt(index)") : x의 y요소 중 index번째 이전의 모든 요소(<)
$("x y : gt(index)") : x의 y요소 중 index번째 이후의 모든 요소(>)
$("x y : nth-child(zn)") : x의 y요소 중 z의 n배수번째 요소만 선택
$("x y : contains("str")") : x의 y요소 중 문자타입 str값이 포함된 요소만 선택
$("x y : has("span")") : x의 y요소 중 요소 span tag가 포함된 요소만 선택
$("x y : visible") : x의 y요소 중 visible인 요소
$("x y : hidden") : x의 y요소 중 hidden인 요소
* index는 0부터 시작한다.	
* 함수타입의 선택자는 아래와 같이 쓰일 수 있다.

$("x y").is(":visible") : x의 y요소 중 visible인 요소
$("x y").filter(".theObj") : class="theObj"를 가지고 있는 y요소만 선택
$("x y").find("a") : a tag를 포함하고 있는 y요소를 선택
$("x y").not(:empty) : x의 y요소 중 내용을 가진 요소만 선택

[CSS 적용방법]
- 방법1
$("x").css( '속성', '값' ).css( '속성', '값' ) . . . ;
- 방법2 체이닝기법(html속성 변경시에도 사용 가능)
$("x").css({ '속성' : '값', '속성' : '값', . . . });

[문서객체 조작 메서드]
: 문서 객체의 생성, 추가, 복제, 삭제, 변경할 때 사용

- 사용방법
> 변경
$("x").html("y") : x요소의 하위 요소들을 y요소로 변경(태그 추가 및 내용 변경 가능)
$("x").text("text") : x의 텍스트를 text로 변경

> 추가(추가하는 요소는 html형식으로 작성)
$("x").append("y") : x요소 마지막에 y요소 추가 (=아래와 같다.)
$("y").appendTo("x") : x요소 마지막에 y요소 추가(=위와 같다.)
$("x").prepend("y") : x요소의 첫번째 자식으로 y를 추가
$("y").insertBefore("x") : y요소를 x요소의 앞에 추가
$("y").insertAfter("x") : y요소를 x요소의 뒤에 추가
$("x").remove() : x요소를 제거
$("x").clone() : 복사된 x요소

> 속성 관련
$("x").attr("속성") : x의 속성값을 반환
$("x").attr("속성","값") : x의 속성을 해당 값으로 정의
$("x").val() : x의 value값
$("x").text() : tag와 tag사이에 text 입력
$("x").addClass("클래스명") : x의 클래스명을 추가(Class는 다중부여 가능)
$("x").removeClass("클래스명") : x의 클래스명을 제거
$("x").toggleClass("클래스명") : x의 클래스명이 있으면 정의, 없으면 제거
$("x").hasClass("클래스명") : x의 클래스명이 존재하면 true, 없으면 false
$("x").wrap("<div></div>") : x요소를 해당 태그로 감싼다.
$("x").wrapAll("<div></div>") : x요소 전체를  div로 한번에 감싼다.

[Event : 이벤트]
웹 브라우저 내에서 벌어지는 모든 행위들
이벤트 발생 시 함수의 실행문이 수행되도록 이벤트를 지정하는 것을 이벤트 핸들러라 한다.
* 앞에 on을 붙이지 않는다.

- 종류
> click( ) : 클릭 시
> dblclick( ) : 더블클릭 시
> mouseover( ) : 마우스가 박스 내에 올라갔을 때 (내부 컨텐츠 제외)
> mouseenter( ) : 마우스가 박스 내에 올라갔을 때
*over와 enter의 차이점
over는 박스 내 컨텐츠에 올라갈 경우 over상태가 해제됨 enter는 박스 내 컨텐츠에 올라갈 경우에도 enter상태가 유지됨
> mouseleave( ) : 마우스가 떠났을 때
> mouseout( ) : 마우스가 떠났을 때
> focus( ) : 포커스를 얻었을 때
> blur( ) : 포커스를 잃을 때
> focusin( ) : input요소에 포커스가 발생
> focusout( ) : input요소에 포커스를 잃을 때
> keydown( ) : 키를 눌렀을 때
> keypress( ) : 키를 눌렀을 때
> resize( ) : 사이즈를 조절할 때
> submit( ) : 제출할 때
> reset( ) : 취소버튼을 눌렀을 때
> hover( ) : 마우스를 위에 올렸을 때
> toggle( ) : on/off 스위치의 개념으로 만들 때(값에 fast, slow, nomal 상수값이 들어가거나 1/1000초가 들어갈 수 있다).
> unload( ) : 문서를 종료할 때
> change( ) : input요소 내의 값이 변했을 때
> bind( ) : 여러 이벤트 적용할 때
* bind("event1 event2", function(){실행부});

* 참고1 : 메서드를 2개 적용시킬 경우 첫번째는 이벤트 실행시, 두번째는 else의 개념으로 적용된다.
$(".hover").hover(function (){
   $(this).css("color","red");
},function(){
   $(this).css("color","blue");
});
문법설명 : 글자에 마우스를 올리면 글자색이 빨강, 그렇지 않으면 파랑

* 참고2 : 이벤트 발생한 객체를 가져올때 this를 사용하고 그 객체를 저장할 수 있다.
var submenu = $(this).next("ul");
문법설명 : 이벤트 발생 객체의 다음 ul tag를 변수에 저장

[Event 적용방법]
$("x").click(function () {			      $('y').css('속성','값');
   });
});

[jQuery Effect]
show(시간,콜백함수) : 선택요소 보임
hide(시간, 콜백함수) : 선택요소 숨김
toggle(시간,콜백함수) : show와 hide를 합친 것
slideDown(시간, 콜백함수) : 선택요소를 미끄러지듯 내려서 보여준다.
slideUp(시간, 콜백함수) : 선택요소를 미끄러지듯 올려서 숨긴다.
slideToggle(시간, 콜백함수) : slideUP과 slideDown 효과를 합쳐놓은 것
fadeIn(시간, 콜백함수) : 선택요소를 천천히 나타나게 한다.
fadeOut(시간, 콜백함수) : 선택요소를 천천히 사라지게 한다.
fadeToggle(시간, 콜백함수) : fadeIn과 fadeOut효과를 합쳐 놓은 것
fadeTo(시간,투명도,콜백함수) : 완전히 사라지거나 나타나지 않고 설정한 투명도만큼 변화한다.

* 시간 : 'fast', 'slow', 'nomal'의 상수값이 들어가거나 1/1000초가 들어갈 수 있다(생략 가능)
* 콜백함수 : 메서드 실행 완료 후 추가적으로 실행 할 메서드(function(){실행부}/생략 가능)

[Animation : 애니메이션]
사용 방법
$(x).animate({애니메이션 속성}, 시간, 콜백함수);

* 시간 : 'fast', 'slow', 'nomal'의 상수값이 들어가거나 1/1000초가 들어갈 수 있다(생략 가능)
* 콜백함수 : 메서드 실행 완료 후 추가적으로 실행 할 메서드(function(){실행부}/생략 가능)

- 속성의 종류
> 방향 : left, right, top, bottom
> 크기 : width, height
> 위치 : position

[Ajax (Asynchronous javascript and XML)]
비동기통신으로 데이터를 주고 받기 위한 기술
현재 페이지를 유지하면서 일부 기능으로 서버에 갔다올 때 사용
결과 전송시 URL에 있는 페이지의 모든 HTML코드가 같이 전송되므로 하단의 HTML코드는 지워준다.
* jsp에서는 out.write()로 전송한다.

(사용자) 이벤트데이터 전송/요청응답 (서버)
XMLHttpRequest 텍스트데이터 : XML, HTML, JSON 등등

- 사용방법 : url의 queryString을 통해 필요한 데이터를 보낸 후 success의 result에 해당하는 값이 맵핑된다.

$("button").click(function(){

$.ajax({
url: "demo_test.txt",
success: function(result){
$("#div1").html(result);}
});

});

* 아이디 중복체크 로직( Spring의 경우 컨트롤러에서 DAO실행 및 @ResponseBody로 응답받는다.)
$(document).ready(function(){
$("#idCheck").click(function(){
var id = $("#id").val();
if(id == ""){
alert("아이디를 입력해주세요.");
$("#id").focus();
}else{
//id값을 서버로 전송하여 중복체크 처리한 후 결과를 반환
$.ajax({
url : "idcheck.do?id="+id,
success : function(result){
//결과값을 처리하는 로직
if(result == 1){
$("#idcheck_msg").text("중복된 아이디가 존재합니다. 다시 입력해주세요.");
$("#idcheck_msg").css("font-size","9px").css("color","red");
$("#id").val("").focus();
}else{
$("#idcheck_msg").text("사용이 가능한 아이디입니다.");
$("#idcheck_msg").css("font-size","9px").css("color","green");
$("#pass").focus();}};});}});

[JSON : JavaScript Object Notation]
문자 기반 표준 포맷
여러가지 종류가 다양한 데이터들을 한꺼번에 많이 담을 수 있다.
속성과 값(키와 value)로 구성된 데이터이며 객체를 전달하기 위해 사람이 읽을 수 있는 텍스트를 사용하는 개발형 표준포맷
중괄호로 시작되며 이름, 값 쌍을 콜론으로 맵핑하며 한 쌍은 콤마(,)로 구분하여 구성된다. (이름쪽에는 쌍따옴표를 생략해도 된다.)
* {"키":"값", ...}

멤버접근연산자(.)를 사용하여 내부 데이터에 접근할 수 있다.
내부에 JSON객체 또는 배열이 있는 경우 멤버접근연산자와 인덱스[ ]를 추가적으로 사용하여 더 깊숙히 접근할 수 있다.

- 사용 예시
{"name":"John", "age":30, "car":null}

- 입력 가능한 데이터 타입
문자열 : { "name" : "홍길동" }
숫자 : { "age" : 20 }
JSON객체 : { "obj" : { "name" : "hong" } }
배열 : { "array" : "[1,2,3,4,5]" }
Boolean : { "boolean" : true }
null : { "str" : null }

- 입력 불가능한 데이터 타입
날짜, undefined, 메서드

- jQuery에서 JSON데이터를 URL을 통해 가져오는 방법
url로 가져온 데이터를 json_data로 변환한다.

$.getJSON("url",function(json_data){ json_data를 출력하는 형식 })

* jQuery에서 JSON을 활용하여 테이블과 반복문을 만드는 팁(반복문은 배열을 통해 만든다)
$(document).ready(function(){
var employees = {"list" : [ {"empno":7536, "name":"hong", "job":"manager", "deptno":20},{"empno":1234, "name":"john", "job":"sales", "deptno":30}]};
var out = "<h1>사원정보</h1>";
out += "<table border=1>";
out += "<tr>";
out += "<td>사원번호</td><td>사원명</td><td>직무</td><td>부서번호</td>";
out += "</tr>";
for(var i in employees.list){
out += "<tr>";
out += "<td>"+employees.list[i].empno+"</td>";
out += "<td>"+employees.list[i].name+"</td>";
out += "<td>"+employees.list[i].job+"</td>";
out += "<td>"+employees.list[i].deptno+"</td>";
out += "</tr>";}
out += "</table>";
$("body").append(out);

* Ajax를 통해 가져온 DB를 JSON형식으로 변경하기
1. Ajax가 실행될 페이지에 Ajax를 양식에 맞춰 작성한다.
$(()=>{
$.ajax({
url: "데이터를 처리(서버와 연동)할 페이지",
success: function(result){
결과값 result의 구현부
});
});

2. 데이터를 처리(서버와 연동)할 페이지에서 DB와 연동 진행 후 필요 메서드 실행
DAO클래스명 dao = new DAO클래스명;
ArrayList<EmpVO> list = dao.getList();

3. DB를 통해 받아온 데이터를 For문과 GSON을 이용하여 구성에 맞게 데이터를 담아준다. 
for(EmpVO vo : list){
JsonObject obj = new JsonObject();
obj.addProperty("empno", vo.getEmpno());
obj.addProperty("ename", vo.getEname());
obj.addProperty("job", vo.getJob());
jlist.add(obj);}
jdata.add("jlist", jlist);
* JsonObject jdata = new JsonObject(); // jdata = {}
* JsonObject obj = new JsonObject(); // obj = {}
* JsonArray jlist = new JsonArray(); // jlist : []

4. Gson 객체 생성 후 jQuery에서 읽을 수 있는 형태(String)로 변환 후 넘겨준다.
Gson gson = new Gson();
out.write(gson.toJson(jdata));

5. 결과값을 JSON객체로 변환 후 구현부에서 작업
var jdata = JSON.parse(result)

[Plug-in]
- 개발자들이 미리 만들어 놓은 다양한 기능들의 작은 프로그램을 말한다.

<GSON>
JSP쪽에서 DB와 연동하여 전달받은 ArrayList객체를 JS쪽에서 사용할 수 있도록 JSON형식으로 변경해주는 라이브러리
* import = com.google.gson.*

- 설치방법
MavenRepository 검색 > gson검색 > 가장 안정적인 선택 > jar file 혹은 텍스트 복사 > 모델1 기준 : 프로젝트 > WebContent > WEB-INF > lib 내부 > import하기 com.google.gson.*

- 사용방법(생성자)
Gson z = new Gson( ) : JSON 형식으로 변환할 수 있는 객체
JsonObject x = new JsonObject( ) : x = { } JSON형태의 객체를 선언
JsonArray y = new JsonArray : y = [ ] Array형태의 객체를 선언

- 주요메서드
> void 객체명.addProperty("이름", "값") : JSON형태의 객체에 키, 값 쌍의 데이터를 입력한다. addProperty가 진행될 때 마다 해당 객체 내부에 한 쌍의 데이터들이 늘어난다.
> void 객체명.add(저장할 데이터) : 생성한 객체의 형태로 데이터를 담기위한 메서드
> Gson객체명.toJson(JsonObject obj) : JSON형태의 객체를 JS에서 읽을 수 있도록 변환해준다. String타입으로 변환되며 JS에서 JSON타입으로 변환( 변수명 = JSON.parse(result) )해서 사용할 수 있다.

<wowslider>
> 갤러리를 쉽게 만들 수 있다.

- 적용방법
1. wowslider 설치
2. Add images and vidoes 버튼을 클릭하여 컨텐츠를 추가
3. 우측상단 Publish클릭 후
General 및 Design 설정 후
좌측 상단 Publish > insert to page로 적용할 파일을 선택 > 우측 하단 Publish선택
4. 해당 폴더에서 Refresh를 한다.

<zlayer>
> 여러장의 이미지를 겹쳐서 3D효과를 줄 수 있다.

- 적용방법
1. jqtransform plug-in 다운로드
2. 파일을 복사 붙여넣기 후 스크립트로 링크를 설정
<script type="text/javascript" src="../js/jquery.zlayer.min.js"></script>
3. 해당 이미지에 적용한다.
$("x").zlayer({속성값});

> jqtransform의 속성
mass:정수 : 
confine:'y'/'n' : 
canvas:'태그' : 
force:'push'/or'' :

<jqtransform>
> form tag를 꾸밀 수 있다.

- 적용방법
1. jqtransform plug-in 다운로드
2. 파일을 복사 붙여넣기 후 스크립트로 링크를 설정
<link rel="stylesheet" href="jqtransformplugin/jqtransform.css">
<script type="text/javascript" src="jqtransformplugin/requiered/jquery.js"></script>
<script type="text/javascript" src="jqtransformplugin/jquery.jqtransform.js"></script>
3. form 태그에 액션속성 적용<form action="">
4. form태그에 적용
$('form').jqTransform({imgPath:'jqtransform/jqtransformplugin/img/'});

<cycle>
> 애니메이션 슬라이드효과를 구현한다.

> 적용방법
https//malsup.com/jquery/cycle
1. cycle plug-in 다운로드
2. 파일을 복사 붙여넣기 후 스크립트로 링크를 설정
<script type="text/javascript" src="../cycle-master/jquery.cycle.all.js"></script>
3.
- 이미지 슬라이드 설정
const $books = $('#books').cycle({
fx : 'scrollDown',
delay : -300,
timeout : 2000,
speed: 200,
pause:false});
* 변수에 담아서 추후 활용한다.

- 컨트롤러 생성
1. $books다음에 div를 추가하고 id부여
const $controls = $('<div>')
.attr('id','books-controls')
.insertAfter($books);

2. 버튼을 추가해서 이벤트를 넣고, controls에 부착한다.
$('<button>')
.text('Pause')
.click(()=>{
$books.cycle('pause');})
.appendTo($controls);

* 이벤트부착 중 cycle 속성 상수값
pasue : 멈춤 버튼
resume : 재생 버튼

> cycle의 속성
$.fn.cycle.defaults.속성=값 :  cycle속성의 기본값을 설정한다. 이후 개별설정할 수도 있다.

- delay : 1000 : 처음 이미지가 변경될 시간(음수 부여 가능)
- timeout : 1000 : 이미지를 보여주는 시간
- speed : 1000 : 이미지가 변경되는 시간
- pause : true/false : 마우스가 이미지 위로 올라갈 경우 멈춤 여부
- random : true/false : 이미지의 순서 랜덤여부
- fx : '효과' : 이미지 변경 시 효과 부여
* 효과의 종류
curtainX / shuffle / fade / trunDown / zoom / scrollDown / scrollRight 등등

<jQuery UI>
UI 플러그인은 광범위한 임무를 수행할 수 있다.
http://jqueryui.com

- core : 컬러애니메이션, 클래스애니메이션, 고급완급조절기능
개별적인 시각효과, 인터렉션컴포턴트, 테마룰러

>적용방법
1. jqueryui plug-in 다운로드
2. 파일을 복사 붙여넣기 후 스크립트로 링크를 설정
* jqueryui는 종류가 다양하기에 잘 선택한다.
<link rel="stylesheet" type="text/css" href="../jquery-ui-1.13.1/jquery-ui.css">
<link rel="stylesheet" type="text/css" href="../jquery-ui-1.13.1/jquery-ui.css">

3. cycle의 버튼에 아이콘 부착방법
$('<button>')
.text('Pause')
.button({
icons:{primary:'ui-icon-pause'}})
.click(()=>{
$books.cycle('pause');})
.appendTo($controls);

4. 애니메이트 설정방법
$books.hover(function(e){
$(e.target).find('.title').animate({backgroundColor:'#008299',color:'#000'},1000)},
function(e){$(e.taget).find('.title')
.animate({backgroundColor:'#99004c',color:'#e4f7ba'},1000)});

5. 클래스 애니메이션 설정+시각적 효과(강도5) 설정 방법
$('h1').click(function(e){
$(e.target).toggleClass('highlighted','slow','swing');
$(e.target).effect('shake',{distance:5}); });
* 클래스 애니메이션 속성 종류
swing, easeOutCubic, easeInExpo
* 시각적 효과 속성 종류
shake, explode, puff, pulsate

6. 인터렉션
$books.find('.title').resizable({handles:'s'}).draggable();
*인터렉션 속성 종류
handles : '값' : e, w, s, n (동서남북)
draggable( ) : 드래깅

*플러그인은 그 외에도 쿠키플러그인 등 다양하게 있고, 각자 특색이 있음.(ui는 광범위)