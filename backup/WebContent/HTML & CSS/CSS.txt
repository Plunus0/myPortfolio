CSS(Style Sheet)
- HTML으로 이용한 문서표현의 한계점을 보완하기 위해 도입
- HTML에서 자주 사용되는 글꼴, 색상, 정렬 등 디자인적인 스타일을 매번 반복해서 적용할 필요 없이 미리 정해놓고 필요할 때 가져다 사용
- CSS를 이용하면 한번 정의한 내용으로 여러문서에 사용할 수 있고, 이로인해 전체적인 통일성을 가질 수 있다.
- 선택자{ }와 효과(속성:값)를 반드시 포함해야함
- 선택자의 경우 효과가 같다면 ' , '를 활용하여 다중 적용 가능
- 문장이 끝날때마다 ' ; ' 반드시 입력
- 웹브라우저에서 우클릭-검사 항목을 통해 박스모델 확인 가능
- 웹브라우저에서 F12 왼쪽상단에서 다른 기기들의 스크린화면도 볼 수 있음
- 작성 시 공백이 있으면 따옴표로 묶어준다.
CSS
벤더 프릭픽스 : 브라우저 특성에 맞는 코드 기술
.sample{
- webkit-transform : rotate(45deg) : 크롬, safari, opera용
- ms-transform : rotate(45deg) :  IE9
transform : rotate(45deg); : 표준안은 마지막에 기술
}

CSS적용 문법
선택자 { 속성 : 속성값 ; }
h1 { color : red ; }

선택자의 종류
- 태그(타입 선택자)
- 그룹선택자
- 자식선택자
- 인접선택자
- 속성선택자
- 가상선택자

HTML과 CSS문법 차이
- 속성값 지정 시 CSS에서는 따옴표를 사용하지 않는다.
- HTML에서는 = 을 사용, CSS에서는 : 을 사용한다.
- HTML에서는 공백으로 속성을 구분하지만 CSS에서는 ; 으로 구분한다.
- CSS에서는 숫자의 단위를 명시하여야 한다.

CSS를 구현하는 방법
- 인라인방식 : HTML 각 태그 안에서 style속성으로 지정(style="")
- 임베디드방식 : HEAD쪽에서 style태그를 활용하여 지정(<style type="text/css">)
- import방식 : @import url("")
- 링크(Link) : 외부에 CSS파일을 작성해두고 불러와서 적용
*<link rel="stylesheet" type="text/css" href="">
*코드 내부가 보여지지 않는 Link방식이 보안이 좋다.
*중복 적용시 가장 가까운 스타일이 적용된다.
*공통 적용 예시
*{margin: 0; padding: 0;}
li{list-style: none;}
body{font: 12px "굴림",Gulim;}

스타일 적용 요소, 상속 및 우선순위
- 각 프로퍼티가가 모든 요소에 적용되는 것은 아니고 개별적인 속성들이 존재한다.
- 스타일 상속
> 부모요소에 적용한 스타일이 자식요소에 상속되는 것
> 상속되는 것과 되지 않는 것이 있다.
> 상속되는 것은 'inherit' 키워드를 설정하여 적용할 수 있다.

CSS에서의 단위(크기)지정
- 숫자
> 상대단위
> em : 부모의 크기를 1로 기준하는 단위
> px : 1픽셀을 1로 하는 단위, 실제 표시되는 크기는 해상도에 상대적이 된다.
> ch : 글자의 폭
> ex
> rem : *뷰포인트(브라우저에 컨텐츠가 표시되는 영역)의 크기를 기준으로 지정

> 절대단위 : cm, mm, in, pt(1포인트는 0.72인치), pc(1pc=12pt)

- 퍼센티지(%) : 지정되거나 상속받은 값에 대한 백분율 상대크기

- 색상
> RGB : #rrggbb (#aaffbb = #afb) / rgb(255,255,255), rgb(%,%,%)
> RGBA : 0과 1사이의 불투명도(opacity)를 추가 / rgb(255,255,255,0.5), rgb(%,%,%,0.1)
> HSL(색상,채도,밝기)

- 각도
> deg : 0~360의 수(360deg = 1회전)
> grad, rad, trun

- URL
> url(" ") : 절대경로, 상대경로 사용

[선택자]
id 선택자
- HTML(id=" ") / CSS(#a{ })

class 선택자
- HTML(class="a") / CSS(.a{ })
- HTML(class="a b") / CSS(.a.b{ } .a{ } .b{ })
*스페이스바는 소,중,대분류로 구분

*선택자 : 모두 ( *{ })

태그(타입) 선택자 : 태그{ } / 태그,태그,태그 { }

자식 선택자 : 태그 > 자식 { }

인접 선택자 : 태그+태그{ }

문맥(자손) 선택자 : 태그  sub태그{ }

*td div:hover .insta_table2 도중에 hover효과를 줄 수 있다.

속성 선택자 : 태그[속성]
- 태그[속성^="단어"]{ } : 시작단어들 그룹
- 태그[속성$="단어"]{ } : 끝 단어들 그룹
- 태그[속성*="단어"]{ } : 단어 포함시 그룹

가상 선택자
- a:hover : 링크된 글자에 마우스가 닿았을 때
- a:link : 클릭하지 않은 링크의 속성 설정
- a:visited : 해당 페이지에 방문했을 때 (색상만 변경 가능)
- a:active : 링크를 하는 순간의 속성 설정
- a:focus : 링크걸린 글자에 포커스가 생성되었을 때
- p:first-letter : 첫번째 글자를 선택 (span에서는 적용 불가)
- p:first-line : 첫번째 줄을 선택
- p:nth-child(n) : 지정한 수(n)의 p의 자식
> 1 : 첫번째
> even : 짝수
> 2n+3
- p:last-child : 마지막 자식
- p:before : 맨 앞에 배치하는 태그없는 가상요소
- p:after : 맨 뒤에 배치하는 태그없는 가상요소
clearfix : 가상의 요소가 필요한 곳에 공통적인 class이름으로 사용한다.
*p:after의 예시
.clearfix : after{
content:"";
display:block;
clear:both;}

[특수문자]
/*, */ : 내부 태그 주석처리

[background 속성]
- background : 이미지url, 이미지위치, 반복여부를 모아서 지정할 수 있다.(띄어쓰기로 구분/순서상관 없음)
- background-color : 배경색
> 색상, 이미지, 위치, 반복여부
> background #fff url("") left top repeat-x;
- background-image : 이미지 붙이기(2개 이상 삽입시  url=("")을 , 로 구분)
- background-repeat : 이미지 반복시키기(2개 이상 지정시  , 로 구분)
> repeat : 기본
> repeat-x : x축만 반복
> repeat-y : y축만 반복
> no-repeat : 반복 없음
- background-attachment : 배경이미지를 고정 또는 스크롤로 결정
> fixed : 삽입한 그림이 현재의 위치에 고정
> scroll : 삽입한 그림이 스크롤에 따라 함께 움직임
- background-position : x좌표, y좌표 (2개 이상 지정시 x와 y좌표는 띄어쓰기 이미지 구분은 , 로 구분)
> top, center, bottom, left, right
> fixed로 설정되어 있을 때 만 0~100% 상하좌우 적용된다.
- background-size : 이미지의 크기
> contain : 기본값, 이미지의 크기대로 삽입
> cover : 이미지의 비율은 유지한채 전체를 덮는다. 
> auto *px : 한쪽 픽셀의 기준에 따라 이미지의 비율을 유지한다.
> *% *% : 컨텐츠박스의 비율에 맞게 설정 
- background-clip : 이미지의 표시범위(border 또는 padding의 위치에 따른 컨텐츠 표시범위 적용)
> border-box : 기본값 border 포함 표시
> padding-box : padding 포함 표시
> content-box :  content까지만 표시

[선형 그라데이션]
- linear-gradient(방향, 색상1, 색상2, ...)
> to top(0deg) : 북쪽에서 시작
> to bottom(180deg) : 남쪽에서 시작
> to right(90deg) : 동쪽에서 시작
> to left(270deg) : 서쪽에서 시작
*앞에 repeating-을 붙여주면 반복 가능

[원형 그라데이션]
- radial-gradient(모양 at 시작점, 색상, 색상 ...)
> circle : 원(반지름을 추가해줄 수 있음)
> ellipse : 타원
> closest-side : 가까운 변에 내접
> farthest-side : 먼 변에 내접
> closest-corner : 가까운 모서리에 내접
> farthest-corner : 먼 모서리에 내접

[tabel 속성]
table-layout : 내부 칸 크기 설정
> auto : 컨텐츠에 따라 크기가 변경
> fixed  : 컨텐츠에 관계없이 크기 고정
border-collapse : 표의 내부 선 설정
> seperate : 기본
> collapse : 선을 하나로 합친다.

[font 속성]
- font-style : 스타일
- font-variant : 소/대문자로 변환
- font-weight : 두께
- font-size : 크기
- font-family : 글꼴 (없는 글꼴을 방지해 ,(콤마)를 구분하여 여러 글꼴을 지정)

[text 속성]
- letter-spacing : 글자간격
- word-spacing : 단어간격
- word-wrap : 문장을 나눌 때 단어별 구분이 아닌 문자별 구분으로 적용
- line-height : 줄 간격 (속성값으로는 normal, 길이단위, 퍼센트)
- text-align : 수평정렬
- vertical-align : 수직정렬
- text-indent : 들여쓰기
- text-decoration : 텍스트 장식(취소선, 밑줄 등)
- text-transform : 문자열의 대소문자 변환지정
- text-shadow : 문자의 그림자 설정(x축, y축, 문자의 퍼짐도, 색상)

[박스모델]
박스모델 : 각 요소가 '박스'라고 불리는 사각영역을 생성한다.
이 영역 안에 테두리선, 크기, 색, 위치 등을 지정할 수 있다.
- div
- 목록(ul, ol 등)
- table

박스유형
- content-box : 텍스트나 이미지 등의 내용이 표시되는 영역

- box-sizing : 박스의 영역을 설정(기본은 border를 제외한 것이 박스의 사이즈이다.)
> border-box : 지정한 width, height은 border까지가 크기가 된다.

박스의 구성

- border : 테두리(색상, 너비 타입 을 순서 상관없이 한번에 지정 가능 / 배경색과 이미지는 여기까지 표시된다.)
- border-style : 테두리의 모양
> hidden : 기본값, 표시하지않음
> dotted : 점선
> dashed : 실선
> solid : 선
> double : 이중 선
> groove : 오른쪽 아래에서 빛을 받은 모양으로 표시
> ridge : 왼쪽 위에서 빛을 받은 모양으로 표시
> outset : 테두리가 밖으로 나온 스타일로 지정
> inset : 테두리가 안으로 들어간 스타일로 지정

- border-radius : 둥근 테두리 지정(좌상 방향부터 시계방향으로 지정 가능 / (왼쪽 위가 상으로 취급)

- border-image : 이미지를 테두리로 만든다. (url("")로 이미지 삽입, 수치, 효과)
> round : 이미지의 겉부분으로 테두리를 채운다.
> repeat : 이미지를 반복시켜서 채운다.
> stretch : 이미지를 늘려서 채운다.

- box-shadow : 박스 전체에 그림자 효과를 적용한다.
> x축  y축  퍼짐 (퍼짐) 색상 : 테두리 외부 효과
> inset x축 y축 퍼짐 (퍼짐) 색상 : 테두리 내부 효과

- margin : 내용의 상하좌우 테두리 바깥여백 (항상 투명함)
*배경 이미지는 배경색 위에 표시된다.

padding : 컨텐츠와 border 사이 여백

margin : border 외부 여백
- margin or padding or border-width : 10px ;(상하좌우)
- margin or padding or border-width : 10px 20px; (상하, 좌우)
- margin or padding or border-width : 10px 20px 30px; (상, 좌우, 하)
- margin or padding or border-width : 10px 20px 30px 40px; (상, 우, 하, 좌)

*박스간의 margin 적용
- 상하
> 둘다 플러스일 경우 : 큰쪽의 값을 적용
> 플러스 마이너스일 경우 : 둘다 더한 결과값을 적용
> 둘다 마이너스 : 작은쪽의 값을 적용한다.
- 좌우 : 여백은 상쇄되지 않는다.

- color : 글자 색상
- display : 표현범위
- width : 가로 사이즈(px, 퍼센트)
- height : 세로 사이즈(px, 퍼센트)
- grid-template : (display를 grid로 선행 설정) 1줄 내에서 각 글자의 영역 분할 
- visibility : 표시여부 적용
- list-style : 리스트 스타일 적용
- float : 정렬방식

[반응형 웹 : media query]
멀티미디어의 등장
- 기기의 크기가 다양해짐에 따른 대응차원의 디자인 구현 기술 >> 반응형 웹
- 구글이 '스마트 폰 대응' 레이블을 붙여주기 시작

디자인 고려사항
- 손가락으로 조작하는 것을 의식하여 디자인해야 한다.
> 세세한 문자링크를 만들지 않는다.
> 작은 링크 영역을 만들지 마라
- 누를 수 있다는 것을 알도록 디자인 해라
> 터치스크린에서는 '롤오버 개념이 없다'
- (모바일)디자인의 기본은 가로폭 가변
> 유동형 레이아웃 : 화면은 고정인데, 컨텐츠는 가변
> 반응형 레이아웃 : 화면 크기나 컨텐츠나 모두 가변
> 디바이스의 화면크기와 맞춘 레이아웃
> 링크영역 : 최소 44*44px이상
> 글자크기 : 11point 이상

- 화면 크기와 레이아웃
최적화된 레이아웃을 위해 viewport 값을 설정한다.
- veiwport
> 모바일 단말기에서 디바이스의 스크린 크기를 n픽셀*n픽셀로 할것인지를 설정하는 것.
> '가상윈도우' 라고 할 수 있다.
- veiwport 적용방법 : meta태그에 입력
<meta name="viewport" content="width= device-width; initial-scale= 1.0">

- 미디어쿼리
HTML5문서에 다양한 장치별로 각각 다른 스타일을 적용하는 규칙이다.

- 미디어쿼리의 유형
all : 모든장치
screen : 컴퓨터, 태블릿, 모바일
print : 인쇄장치(출력)
handbheld : 휴대용기기 PDA
tv : 텔레비전 디스플레이
projection : 

- 적용 방법 및 속성
1. <style type="text/css" media="screen">
2.<link rel="stylesheet" href="media.css" media="only screen">
3. @import url('경로') screen;
4.
@media( ) : ()가 참일 때 효과 실행
@media [only 또는 not] 미디어타입 [and (조건)] [and (조건)] ... {css설정} //설정
	[only 또는 not] 미디어타입 [and (조건)] [and (조건)] ... {css설정} //추가
only : 조건을 만족
not : 조건을 만족하지 않음
조건 : 미디어의 크기

- 특성
특성 조건 최대값/최소값 값
max-width : 300px : 출력의 최대 가로폭
min-height : 300px : 출력의 최대 세로폭
device-width : 스크린의 가로폭
device-height : 스크린의 세로폭
orientation : 출력방향 (portrait : 세로, landscape : 가로)

- 적용 방법
<link rel='stylesheet' href='스타일.css' media='only print'> : 프린트 할때만 해당 파일의 스타일 적용
<style> @media [only 또는 not] 미디어타입 [and (조건)] [and (조건)] ... {css설정} </style> : 스타일 시트 내에서 적용

[웹 폰트]
: 먼저 선언을 하고 사용
*@font-face{
font-family: "NPen";
src : url("NanumFont/NanumPen.ttf") format("truetype"); }

- format/확장자
> truetype.ttf
> opentype.ttf, .otf
> svg.svg, .svgz
> woff.woff

[position(배치)]
블록을 박스의 위치기준으로 배치하는 기술
컨텐츠를 서로 겹치게 배열하거나, 마크업한 순서와 동일하게 배치되는것을 다르게 표현할 수 있다.
HTML태그가 출력되는 위치를 지정하는 것을 배치(Positioning)이라고 한다.

- normalflow : 웹페이지에 나타나는 순서대로 HTML 태그를 배치하는 것
- overflow : 지정된 크기를 벗어나는 경우 처리하는 방법 적용 (x, y 축 처리 가능)
- z-index : 수직으로 쌓는 순서, 큰값이 위로 배치된다.

1. 박스위치 지정
- 종류
> 정적(static)배치
> 상대(relation)배치
> 절대(absolute)배치
> 고정(fixed)배치

- 구현 : position의 top, bottom, left, right 값으로 배치하여 구현
- 위치 : 박스의 모서리 한 점만 알면된다. (보통 top, left값만 지정한다. / 기본적으로 top 0, left 0)

2. 배치별 특정

속성값에 따른 배치컨테이너 및 배치기준 위치와 지정방법

- 정적(static)배치 : 부모컨테이너
부모 컨테이너에서 해당 태그(html의 구성) 순서에 따른 순차적인 위치지정
position : top, bottom, left, right 속성은 무시된다.
요소를 이동하거나, 겹칠 수 없는 원래 그대로의 상태이다.(z-index가 적용되지 않는다.)
모든 요소(태그)의 기본은 static이다.(생략가능)

- 상대(relation) : 부모컨테이너
부모 컨테이너에서 해당 박스의 정적위치 공간기준의 상대위치
해당 박스의 정적 위치 공간은 계속 유지된다.
후속 형제박스의 위치에 영향을 주지 않는다.
float : left 함께 쓸 수 있다.
* absolute요소의 부모박스의 역할만 하거나, 살짝 이동할 때 사용
* float 배치는 박스의 바깥쪽에 배치가 어렵지만 상대배치를 적용할 경우 외부에도 배치 가능

- 절대(absolute)배치 : 가장 가까운 상위 컨테이너
절대위치를 지정하면 해당 박스는 본 판에서 떨어져서 떠있는 상태가 된다.
부모의 위치를 기반으로 left, top값으로 지정
해당 박스의 정적위치는 무시된다.
후속 형제의 위치에 영향을 준다.
* 보통 부모를 상대배치(relation) 선언하여 사용하며 만약, 부모가 없다면 body가 된다.
* float : 와 함께 사용하지 않는다.
(부모를 지정하지 않거나 float : 을 같이 사용 할 경우 컨텐츠가 증가하면 레이아웃이 망가질 수 있다.)


- 고정(fixed)배치 : 브라우저 화면
> 브라우저 화면 공간 기준의 고정 위치를 지정

- float유동 배치

[플로팅박스]
원래 레이아웃의 순서는 html에서 요소의 순서에 따라 세로로 배치된다.
플로팅박스는 박스를 공중에 띄워서 좌우(가로)방향으로 배치하게 한다.
*자식 태그에 float을 줄 경우 부모에게도 float을 부여해야 부모에게 적용된 속성이 발현된다.

구현
float:left : 플로팅 박스를 왼쪽에 배치
float:right : 플로팅 박스를 오른쪽에 배치
float:none : 지정하지 않음

clear:left : left로 지정된 플로팅박스 해제
clear:right : right로 지정된 플로팅박스 해제
clear:both : 앞에 설정한 모든 플로팅박스 해제

container에서 overflow : auto
footer요소가 없을 때(플로팅박스 하단에 요소가 없을 때)는 가상클래스로 설정할 수 있다. (: after(clear:both;))

float을 해제하지 않으면, 다음 박스에 속성이 제대로 지정되지 않는다.
float을 해제하지 않으면 float된 박스를 감싸는 박스에 부여된 배경, 테두리, 여백들이 하나도 적용되지 않는다.

2차원 배열(transform)
회전, 확대, 축소, 이동, 찌그러트리기 등 기하학적 모양 출력

- 종류
translate(20px, -30px) : 우측으로 20px, 위로 30px 이동
translateX(), translateY()

rotate(30deg) : 30도 회전

skew(30deg, 20deg) : 가로 30도, 세로 20도로 뒤튼다.
skewX(), skewY()

scale(2, 3) : 폭을 2배로, 높이를 3배로
scaleX(), scaleY()

[@keyframes] 애니메이션 만들고 적용하기
- 만들기
@keyframes 애니메이션 이름{
0% {발생 이벤트}
50%{발생이벤트}
100%{발생이벤트}
}
- 적용하기
> animation-name : textColorAnimation : 적용할 애니메이션 이름
> animation-duration : 5s : 작동될 시간
> animation-iteration-count : infinite : 반복여부

[레이아웃]
레이아웃의 종류
- 고정형(fixed)
> 컨텐츠의 특정 가로폭을 px단위로 고정한 레이아웃.(창의 최소크기가 정해져있음)
> 가장 간편하며 대부분의 웹사이트에서 사용
> 다양한 디스플레이에 대응하기엔 부족함(대형화된 화면에선 가로폭이 좁고 답답하게 느껴질 수 있음)

- 유동형(Lequid)
> 윈도우의 가로 폭이 바뀌어도 그에 맞도록 컨텐츠의 가로폭이 늘거나 줄도록 설계하는 레이아웃
> 가로폭을 %단위로 설계하거나 완전히 %로만 설계

- 유동형(Flexible)
> 극단적으로 좁거나 극단적으로 넓은 화면의 가독성을 좋게 개량한 레이아웃
> %와 px를 혼용하여 설계한다.

- 유동형(Grid)
> 다양한 컨텐츠 박스들을 가로순으로 나열하는 레이아웃
> float을 활용하여 설계

[마우스 커서 변경 속성]
- cursor : 마우스 커서 변경
> default : 기본값
> auto : 자동정렬
> crosshair : 좌표 모양
> pointer : 손모양
> move : 이동
> help : 도움말, 물음표
> wait : 실행 중
> text : 텍스트 입력
> n-resize : 상하 사이즈 조절
> e-resize : 좌우 사이즈 조절

display속성
- 요소(태그)의 표시특성을 변경한다.
- 정보구조에 맞게 요소를 지정하지만 출력시에는 필요한 속성으로 변경시켜 디자인할 수 있다.

- block
> 박스의 유형을 블럭박스로 보여준다.
> 항상 새로운 라인에서 시작한다.
> 옆에 다른 요소가 붙을 수 없다.
> width와 height을 지정할 수 있다.
> text-align을 지정할 수 있다.

- inline
> 박스의 유형을 인라인으로 보여준다.
> 모든 박스안에 배치되어 진다.
> 옆에 다른 요소가 붙을 수 있다.
> width와 heigth를 지정할 수 없다.

- inline-block
> 새 라인에서 시작하지 못함.
> 박스안에 배치
> 옆에 다른 요소배치가 가능
> width, heigth을 지정할 수 있다.

- list-item
> block과 같으면서 list-style을 설정할 수 있다.

- table-cell
> 표의 셀과 마찬가지로 일렬로 가로 정렬되며 요소의 높이도 자동적으로 가장 큰 것에 맞춰진다.
> vertical-align을 지정할 수 있다.

- flex
> 플렉시블 박스화 시킨다.
> row, row-reverse, colum, colum-revers 등이 있다.

- none : 비표시

*추가학습 :
fiter: alpha(opacity=75);

[CSS설정]

1. 리셋CSS
- 브라우저마다 초기 스타일 프로퍼티가 다른게 설정되어 있다.
- 효율적인 코딩작업을 위해서 HTML요소의 기본값들을 초기화시키는 작업이다.
> 브라우저마다 초기 스타일대로 작업하지 않고 통일시켜서 효율적인 작업을 하기 위함이다.

2. 흔히 이용하는 CSS
- 에릭 마이어의 Reset CSS
   /* 열거한 요소의 텍스트 스타일을 플랫화 한다. */
		html, body, div, span, applet, object, iframe,
	h1, h2, h3, h4, h5, h6, p, blockquote, pre,
	a, abbr, acronym, address, big, cite, code,
	del, dfn, em, font, img, ins, kbd, q, s, samp,
	small, strike, strong, sub, sup, tt, var,
	b, u, i, center,
	dl, dt, dd, ol, ul, li,
	fieldset, form, label, legend,
	table, caption, tbody, tfoot, thead, tr, th, td {
		margin: 0;
		padding: 0;
		border: 0;
		outline: 0;
		font-size: 100%;
		vertical-align: baseline;
		background: transparent;
	}
	
	/* 구 브라우저에서 HTML5 새로운 요소 출력을 최적화 한다. */
	articl,aside,details, figcaption, figure,footer,
	header,hgroup,menu,nav,section{
		display: block;
	}
	
	/* 행간의 글자높이를 같게한다. */
	body {
		line-height: 1;
	}
	
	/* 목록 첫머리 마크를 비표시한다. */
	ol, ul {
		list-style: none;
	}
	
	/* 인용문의 ""를 비표시로 한다. */
	blockquote, q {
		quotes: none;
	}
	
	
	/* 포커스 스타일을 정의 */
	:focus {
		outline: 0;
	}
		
	/* 인접하는 셀의 border를 겹쳐 표시한다 */
	table {
		border-collapse: collapse;
		border-spacing: 0;
	} 
- HTML5 Doctor Reset CSS
	/* 열거한 요소의 텍스트 스타일을 플랫화 한다. */
	html, body, div, span, object, iframe,
	h1, h2, h3, h4, h5, h6, p, blockquote, pre,
	abbr, address, cite, code,
	del, dfn, em, img, ins, kbd, q, samp,
	small, strong, sub, sup, var,
	b, i, dl, dt, dd, ol, ul, li,
	fieldset, form, label, legend,
	table, caption, tbody, tfoot, thead, tr, th, td,
	article, aside, canvas, details, figcaption, figure,
	footer, header, hgroup, menu, nav, section, summary,
	time, mark, audio, video {
	    margin:0;
	    padding:0;
	    border:0;
	    outline:0;
	    font-size:100%;
	    vertical-align:baseline;
	    background:transparent;
	}
	
	/* 행간의 글자높이를 같게한다. */
	body {
	    line-height:1;
	}
	
	
	/* 구 브라우저에서 HTML5 새로운 요소 출력을 최적화 한다. */
	article,aside,details,figcaption,figure,
	footer,header,hgroup,menu,nav,section {
	    display:block;
	}
	
	/* 네비게이션 속의 목록 첫머리 마크를 비표시한다. */
	nav ul {
	    list-style:none;
	}
	
	/* 인용문의 ""를 비표시로 한다. */
	blockquote, q {
	    quotes:none;
	}
	
	/* 인용문 앞뒤에 공백을 두는 것으로 초기화한다. */
	blockquote:before, blockquote:after,
	q:before, q:after {
	    content:'';
	    content:none;
	}
	
	/* 링크거는 앵커태그의 스타일을 초기화한다. */
	a {
	    margin:0;
	    padding:0;
	    font-size:100%;
	    vertical-align:baseline;
	    background:transparent;
	}
	
	/* 필요에 맞게 색상 변경 */
	ins {
	    background-color:#ff9;
	    color:#000;
	    text-decoration:none;
	}
	
	/* 필요에 맞게 색상 변경 */
	mark {
	    background-color:#ff9;
	    color:#000;
	    font-style:italic;
	    font-weight:bold;
	}
	
	del {
	    text-decoration: line-through;
	}
	
	abbr[title], dfn[title] {
	    border-bottom:1px dotted;
	    cursor:help;
	}
	
	/* 인접하는 셀의 border를 겹쳐 표시한다 */
	table {
	    border-collapse:collapse;
	    border-spacing:0;
	}
	
	/* 필요에 맞게 테두리 색상 변경 */
	hr {
	    display:block;
	    height:1px;
	    border:0;  
	    border-top:1px solid #cccccc;
	    margin:1em 0;
	    padding:0;
	}
	
	input, select {
	    vertical-align:middle;
	}
	
	/* IE6, IE7에 대한 설정 */
	.clearfix{*zoom:1;}

[nav]
- 주로 목록으로 표시된다.
- display를 inline으로 처리하여 가로 방향으로 적용한다.
2, 3단 등 가로방향의 배열은
- 주로 float:left, float:left ,,, float:right 활용한다.
- 이 때, clear:both처리한 하단 요소에서는 margin-top을 줄 수 없다. 이 경우, float처리한 상단 요소에서 margin-bottom으로 준다.
- 이 때, 하단요소가 없어서 clear:both처리가 불가할 경우에는 float:left처리한 요소의.. 부모요소에서 가상요소를 배치하여 처리한다.
1) :after {content="";display:block;clear:both}
2) overflow : hidden

상하 박스의 마진설정
- 좌 우는 더해지지만 상하는 큰 값으로 설정됨에 주의
- 상하 마진을 줄 때는 되도록 한 방향(margin-bottom)으로만 통일설정이 좋다.

[li]
<li> 내부에 <a>태그가 들어갈 경우 인라인 요소이기 때문에 링크 선택이 잘 안될 수 있다. display : block으로  처리하여 설정을 변경해준다
<li>태그 작성시 가독성을 위해 다음 줄로 변경할 경우 사이에 공백이 생길 수 있다. 줄변경을 하지 않거나 사이에 주석처리를 하면 처리가 가능

[display : table] + [display : cell]
화면배치시 절대배치로 잡아도 되지만 display:table로 배치하여 내부 요소(il, ol) 등은 display:cell로 배치할 수 있다. 정렬은 vertical-align으로 한다.(table과 cell에 width를 적용)

1.CSS 스프라이트 방식
- 여러화면에 사용될 이미지들을 1장으로 정리해 놓고 background-position프로퍼티를 이용해서 위치를 바꿈으로써 다른 이미지를 보여주는 기법
* CSS Sprite Generator, Sprite Pad

2.CSS 시그니쳐 방식
- CSS만으로 현재 위치를 자동 인식시키는 방식
- body에 class/id를 지정하고, 페이지 단위로 스타일에 변화를 주는 기법

[자주 사용되는 색상 코드]
olivedrab(#6B8E23)
darkcyan(#008B8B)
darkorange(#FF8C00)
fuchsia(#FF00FF)
brown(#A52A2A)
deppskyblue(#00BFFF)

[제작 순서 예시]
step1 : 내용 구성과 블럭영역의 구현 - 배경색지정
step2 : 배치(position)를 설정해서 구도를 잡는다
step3 : 내비게이션을 구현한다
step4 : float으로 설정된 후속영역의 배치를 설정한다
step5 : 구성블럭에 대한 영역 크기를 지정한다
step6 : 내비게이션과 컨텐츠창을 연결한다
step7 : 효과 등 설정