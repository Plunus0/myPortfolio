<EL (Expression Language)>
- HTML문서 내에서 Java의 값을 출력할 때 사용되는 언어인 스크립트 내의 ${ }를 말한다.

- EL은 null을 출력하지 않는다.

- 간단하고 편리하게 사용할 수 있다.
* ${ } 내부에서는 값을 가져오는 get메서드 중 get과 ( )를 생략할 수 있다. (생략일뿐 메서드는 존재해야한다.)

- 선언부에서 생성된 객체는 lv(지역변수)에 저장되므로 EL에선 사용할 수 없다. 객체에 저장하여 저장소에 등록해야 사용할 수 있다.

- 만약 해당 객체의 멤버를 사용해야하는 경우 객체의 앞에 pageContext를 붙여준다.

- 해당하는 값을 찾을 땐 저장소의위치(requestScope 등)까지 작성할 수도 있지만 저장소의 위치를 생략하면 좁은 저장소부터 차례대로 검색하여 일치하는 값을 찾는다. (page > requestScope > session > application)

- 문자열을 결합하려면 "str"+="str" 연산자를 이용, 일반 연산자 사용시 정수로 취급되어 결과가 출력된다.

- null 또는 빈문자열을 숫자와 연산하면 0으로 계산되어 출력된다.

<EL 예약어>
${ } 내부에서 사용할 수 있는 예약어

- empty x : x가 null 또는 빈 컬렉션 배열일 경우 true
- not empty x : x가 비어있지 않을 경우 true
- eq : 같을 때 (= ==)
- ne(not equal) : 다를 때 (= !=)
- param.이름 : 전달받은 값을 출력
- paramValuse.이름[x] : 전달받은 값을 출력(배열)

<JS6의 Template literals 표현>
EL의 표현식과 동일한 문자를 사용한다. 다만 EL이 먼저 해석되기 때문에 브라우저에서 해석이 되지 못하므로 EL태그로 한번 더 감싸주면 브라우저에서 Template literals를 정상적으로 출력할 수 있다.

<JSTL(JSP Standard Tag Library)>
스크립트(<% ~ %> ..)을 활용하여 JSP에서 JAVA코드 구현시 번거로움을 줄이기 위해 고안된 Tag Library이다.

- JSTL 사용방법
선언부에 JSTL의 Tag Library를 활용하여 선언한다.

> JSTL의 core Library를 활용하여 접두사 C(core)를 사용하기 위한 선언
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

> JSTL의 fmt Library를 활용하여 형식화 출력하기 위한 선언
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>

> JSTL의 form Library를 활용하여 에러메세지를 출력하기 위한 선언
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>

* 접두사의 경우 다른 문자로 사용해도 되지만 일반적으로 c 또는 fmt를 사용한다.

<core Tag Library의 종류>

- <c:set ~ /> : 저장소에 key(var="이름")와 value(value="값")를 저장한다. 저장소를 지정해줄 수 있으며, 생략시 기본값 page 저장소에 저장된다.
* 대입연산자(=) 사용하여 값 입력 시 " " 를 활용하여 안에 넣어줘야 한다.
* 배열 저장 방법 : value="x, y, z ..."
* 저장된 값 출력시 EL(${이름})을 활용한다.(출력에는 " "가 필요없다.)

- </c:if> : if문, 조건식에 해당하는 블럭과 사용될  scope설정
* if문 사용방법
<c:if test="boolean값">
실행문
</c:if>

- </c:forEach> : 반복문, items 속성에 배열을 할당할 수 있다.
* 반복문 사용방법(예시)
<c:forEach var="값이 저장/출력될 곳" items="반복할 배열(EL태그활용)" varStatus="varStatus객체생성할이름">
${status.count}. 반복할 배열[${status.index}]=${값이 저장/출력될 곳}<br>
</c:forEach>
* items 대신 begin과 end값을 설정하여 반복될 횟수를 설정할 수 있다.
* 실행결과 : 1. 반복할 배열[0]=값이 저장/출력될 곳의 값 ...
* 생성된 varStatus 객체에는 count 와 index 멤버가 있다.(반복문이 실행될 때 마다 count는 1부터 증가, index는 0부터 증가)

- </c:choose> : if-else문의 시작과 끝
- </c:when test=""> : if-else문의 내부 조건문, test에는 체크할 조건을 입력한다.
- </c:otherwise> : if-else문의 else문
* 사용이 비슷하다.
<c:choose> : 다른 언어의 Switch와 비슷
<c:when test=""> : switch문의 case에 해당, test에는 체크할 조건을 입력한다.
<c:otherwise> : switch문의 default에 해당

- <c:out ~ /> : 내부 태그를 실행하지 않고 내용을 text로 출력한다.
* Script공격을 방어할 수 있다.

- <c:url ~ /> : Context root 자동추가, Session id를 자동추가 해준다.

<fmt Tag Library의 종류>
- <fmt:formatDate ~ /> : 날짜 및 시간의 form을 지정 하여 출력
* 날짜 포맷 지정방법
<c:set var="이름" value="<%=new java.util.Date( ) %>"/>
<fmt:formatDate values="${이름}" type="both" pattern="yyy/MM/"dd HH:mm:ss"/>

<form Tag Library의 종류>
- <form:form modelAttribute="객체명"> ~ </form:form> : 검증할 객체를 작성하면 post방식으로 전송
* html로 변경된 태그
<form id="객체명" action="보낼 주소" method="post">

- <form:errors path="id" cssClass="msg"/> : 에러를 출력. path에 에러 발생 필드를 지정( *은 모든 필드의 에러)
* html로 변경된 태그
<span id="id.errors" class="msg">에러 메세지 출력</span>