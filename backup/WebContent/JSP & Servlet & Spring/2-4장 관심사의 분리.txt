[관심사의 분리]
<관심사의 분리 Separation of Concerns>
각 작업구간별로 관심사(Concern)라고 불리우며, 이를 효율적으로 관리하기 위해선 관심사별로 분리하여야 한다.
ex) 입력데이터 처리구간, 실제 작업구간(Controller), 출력구간(View)

- 입력의 분리 : DispatcherServlet의 작업구간
> 입력 & 변환 그리고 Model 객체의 생성을 맡는 구간(별도로 객체생성을 하지않아도 매개변수만으로 Spring에서 자체적으로 생성해준다.)
* Model은 이 구간에서 만들어졌기에 Controller구간에서 다시 반환받을 필요가 없다.
> 입력부분은 대개 request.getParameter( )를 사용한다. 이를 이용하여 입력은 공통적으로 받고, 이를 각 데이터별 처리부에 분배해주어 중복되는 부분을 제거한다.
* HttpServletRequest객체로 모든 데이터를 받을 수도 있지만, QueryString의 Name부에 해당하는 value를 개별 매개변수로 받을 수 있으며 추가로 형변환이 가능한 타입이라면 매개변수의 타입을 형변환이 가능한 다른 타입으로 작성해 형변환된 데이터를 받을 수 있다.
> 유효성 체크 : 폼을 통한 데이터 전송시 데이터의 유효성(쓸모없는데이터)을 체크하는 과정(JS를 통해서 진행하면 쉽다.)

- 출력의 분리
처리된 결과에 따라 출력할 form이 다를 경우 효율적인 출력을 위해 처리부분과 출력부분을 구분해주어야 할 필요가 있다. 

* OOP 5대 설계원칙 (SOLID)
- SRP : 단일 책임의 원칙 : 하나의 메서드는 하나의 책임(작업)만 진다.
O
L
I
D

* 코드의 분리
1. 관심사의 분리
2. 자주 변하는 것과 변하지 않는 것의 분리(Common/UnCommon)
3. 중복(공통) 코드의 분리