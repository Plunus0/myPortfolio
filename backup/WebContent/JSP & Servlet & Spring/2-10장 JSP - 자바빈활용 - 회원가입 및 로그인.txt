<SQL과 연동하여 데이터 입력하기(회원가입)>
기본적으로 Form .jsp페이지와 데이터를 받아 처리할 .jsp, DAO 클래스, VO 클래스 가 필요하다.
폼의 이름 VO의 이름 DB컬럼명은 동일하게 맞춘다.

1. form tag로 데이터들을 입력 받을 form 구현
* 이때 form의 속성 중 action(데이터를 받을 페이지)과 method(전송방식)를 작성

2. 제출할 수 있는 버튼에 자바 스크립트로 이벤트를 추가하여 호환성검사 진행
* 호환성검사 예시1
var x = document.getElementById("x");
if(x.value == ""){
alert("입력되지않았습니다.");
x.focus();
return false;}
Form.submit();

* 호환성검사 예시2 (submit 버튼에 이벤트 결합, onsubmit)
function formCheck(frm){
var msg =' ';
if(frm.id.value.length<3){
setMessage('id의 길이는 3이상 이어야합니다.',frm.id);
return false;}
retrun true;}

function setMessage(msg,element){
document.getElementById("msg").innerHTML = `<i class="fa fa-exclamation-circle"> ${msg}</i>`;
if(element){ element.select( ); } }

3. 데이터를 전달받은 페이지에서 Form 태그를 통해 넘어오는 데이터를 자바빈 VO클래스 객체로 맵핑한다.(임포트 필요)
* 맵핑 예시
<jsp:useBean id="vo" class="com.프로젝트명.vo.생성된VO"></jsp:useBean>
<jsp:setProperty property="*" name="vo"/>

4. DAO클래스에 로그인 실행 메서드 구현
public int insert(CgvMemberVO vo) {
int result = 0;
String sql = "insert into cgv_member values(?,?,?,?,?,?,?,?,sysdate)";
getPreparedStatement(sql);
try {
pstmt.setString(1,vo.getId());
pstmt.setString(2,vo.getPass());
pstmt.setString(3,vo.getName());
pstmt.setString(4,vo.getGender());
pstmt.setString(5,vo.getEmail());
pstmt.setString(6,vo.getHp());
pstmt.setString(7,vo.getHobbylist());
pstmt.setString(8,vo.getIntro());
result = pstmt.executeUpdate();
close();
} catch (Exception e) {
e.printStackTrace();}
return result;}

5. 전달받은 JSP페이지에서 DAO객체의 로그인 메서드 실행 및 로그인 성공유무에 따라 결과창을 보여줄 화면으로 이동
* 실행 예시(Result객체가 없으므로 정상시행시 반환값은 int이다.)
생성된DAO dao = new 생성된DAO();
int result = dao.insert(vo);
if(result == 1){
response.sendRedirect("저장 성공시 보여줄 화면URL과 QueryString";)
}else{response.sendRedirect("저장 실패시 보여줄 화면URL과 QueryString");}

<아이디 중복체크 기능 사용하기>
1. 아이디입력 폼의 값을 가져온다. (jQuery 사용)
var id = $("#아이디값이 있는 tag의 name").val();

2.  id값의 value를 검사한다.
if(id != ""){ 값이 정상적일 때 실행}
else{alert("아이디를 입력해주세요.");
$("#id").focus();
return false;}

3. 값에 이상이 없다면 해당 데이터를 서버(별도 jsp페이지)로 전송하는 ajax를 활용한다.
$.ajax({
url: "작업을 수행할 jsp페이지(서버)+QueryString",
success: function(result){ 결과에 대한 실행부 }

4. 넘겨받은 데이터를 저장한다.
String id = request.getParameter("id")

5. DB 연동 및 중복체크 메서드 실행
CgvMemberDAO dao = new CgvMemberDAO();
int result = dao.idCheck(id);

* 메서드 예시
public int idCheck(String id) {
int result = 0;
String sql = "SELECT COUNT(*) FROM CGV_MEMBER WHERE ID=?";
getPreparedStatement(sql);
try {
pstmt.setString(1, id);
rs = pstmt.executeQuery();
while(rs.next()) {
result = rs.getInt(1);}
close();
} catch (Exception e) {
e.printStackTrace();
}return result;}

6. ajax success로 결과값 전송(문자열만 전송 가능)
out.write(String.valueOf(result));

7. 전달 받은 결과에 따른 출력 실행
if(result == 1){
$("#msg").text("아이디가 중복되었습니다. 다시 입력해주세요.")
$("#msg").css("font-size","10px").css("color","red")
}else{
$("#msg").text("사용이 가능한 아이디 입니다.")
$("#msg").css("font-size","10px").css("color","green")}

* JSP에서 값을 받거나 반환할 때 ajax에서 받고, 넘겨주는 객체는 @ResponseBody(리턴값), @RequestBody(매개변수)를 선언해줘야한다.

<SQL과 연동하여 데이터 비교하기(로그인)>
반환받을 데이터가 없는것같지만 count된 숫자를 받아야한다. 따라서 rs에 검색 후 반복문 조건rs.next()를 이용해 값을 모두 추출한 뒤 rs.getInt(1)을 사용해 데이터를 result에 저장한다.
로그인 form에서는 사용자가 어디서 왔는지 url로 받아 로그인 성공 시 해당 화면으로 돌아갈 수 있도록 해주는 방법이 좋다. (request 객체의 getHeader정보 안의 getMethod메서드를 통해 어디서 왔는지 알 수 있다. < > request객체의 getRequestURI( )를 사용하면 어디로 가려고 했는지 알 수 있다.)

1. Form Tag로 비교할 데이터 입력받기
2. 입력된 데이터 유효성 검사
* 테이블에서 id, pass -> 자바와 비교하여 로그인처리
* 테이블에서 id, pass를 count 함수를 이용하여 처리 -->
(* 아이디 또는 비밀번호가 일치하지 않습니다. -> count로 처리해서 그렇다.)
* 유효성검사 로직(JavaScript)
function loginCheck(){
var id = document.getElementById("id");
var pass = document.getElementById("pass");
if(id.value == ""){
alert("아이디를 입력해주세요.");
id.focus();
return false;
}else if(pass.values == ""){
alert("패스워드를 입력해주세요");
pass.focus();
return false;}
loginForm.submit();	}
3. 넘어온 데이터를 vo객체에 맵핑
<jsp:useBean id="vo" class="com.myweb.vo.MemberVO"/>
<jsp:setProperty property="*" name="vo"/>
4. DataBase에 연결하여 vo객체에 맵핑된 데이터와 비교
* 로그인처리 로직
public int getLogin(VO클래스명 vo) {
int result = 0;
String sql = "select count(*) from member where id=? and pass=?";
getPreparedStatement(sql);
try {
pstmt.setString(1, vo.getId());
pstmt.setString(2, vo.getPass());
rs = pstmt.executeQuery();
while(rs.next()) {
result = rs.getInt(1);}
} catch (Exception e) {
e.printStackTrace();}
return result;}
5. 로그인 성공유무에 따라 결과창을 보여줄 화면으로 이동
MemberDAO dao = new MemberDAO();
int result = dao.getLogin(vo);
if(result == 1){
response.sendRedirect("URL?QueryString")
}else{
response.sendRedirect("URL")}