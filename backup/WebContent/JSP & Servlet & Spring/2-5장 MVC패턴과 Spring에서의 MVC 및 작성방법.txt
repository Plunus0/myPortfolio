<MVC의 개념>
협업을 하는 Backend 개발을 위해 제공된 모델(MVC패턴)
MVC는 사용자와 상호작용하는 S/W를 디자인함에 있어 세가지 요소로 쪼개어 하는 것
서로 다른 역할을 각각의 메서드로 구분한 상황에서 공통적인 데이터를 처리하기 위한 패턴방식

- Model :
프로그램의 내부 상태, 즉 프로그램의 정보(데이터)
보통 입력구간에서 생성되며, 처리구간에서 데이터를 입력받아 출력구간에 데이터를 이어 주는 역할을 한다.
* 실제 모델은 Interface이다, 모델의 구현체는 Model m = new BindingAwareModelMap( )
*** Model 만들 때 주의사항으로 Form과 DBColumn과 VO의 필드명을 일치시켜야한다. ***
- View :
사용자 인터페이스 요소를 뜻하는데, 유저에게 보여지는 것, 출력 구간
처리구간으로부터 Model을 넘겨받아 이를 보여주게 되는 구간이며 여러 View 중 상황에 맞게 선택할 수 있다.
- Controller :
데이터와 비즈니스 로직 간의 상호 작용을 뜻함, 처리 구간
반환타입에 따라 작성방법이 다르며, 작업 결과를 Model 객체에 저장 후 출력구간에 넘겨 준다. 또한 상황에 맞는 View를 선택할 수 있다.

<Model1 (MVC1) : JSP(Controller, View) + Java Beans(Model)>
- JSP로 구현한 기존 웹 어플리케이션은 모델1 구조로 웹 브라우저의 요청을 JSP 페이지가 받아서 처리 하는 구조이다.
- JSP 페이지에 비지니스 로직을 처리 하기 위한 코드와 웹 브라우저에 결과를 보여주기 위한 출력 관리 코드가 뒤섞여 있는 구조
- JSP 페이지 안에서 모든 정보를 표현(view)하고 저장(model)하고 처리(control)되므로 재사용이 힘들고, 읽기도 힘들어 가독성이 떨어진다.
* Model1 생성 시 Dynamic Web Project로 생성

- 정리
> 정의: 모든 클라이언트 요청과 응답을 JSP가 담당하는 구조
> 장점: 단순한 페이지 작성으로 쉽게 구현 가능하다. 중소형 프로젝트에 적합
> 단점: 웹 애플리케이션이 복잡해지면 유지보수 문제가 발생된다.

<Model2 (MVC2) : Servlet(Controller) <-> JSP(View) + Java Beans(Model1)>
- Spring 프레임워크로 발전됐다.
- MVC1 구조와 달리 웹 브라우저의 요청을 하나의 서블릿이 받게 됨
- 서블릿은 웹 브라우저의 요청을 알맞게 처리한 후 그 결과를 JSP 페이지로 포워딩

- 정리
> 정의: 클라이언트의 요청처리와 응답처리, 비지니스 로직 처리하는 부분을 모듈화시킨 구조
> 장점: 처리작업의 분리로 인해 유지보수와 확장이 용이하다.
> 단점: 구조 설계를 위한 시간이 많이 소요되므로 개발 기간이 증가한다.

<Model2 확장판 : Spring MVC FrameWork의 실행구조>
1. Dispatcher Servlet : 프로젝트의 web.xml
프로젝트의 web.xml에 정의되어있으며, client의 요청을 최초로 받는 서블릿으로  URL의 '/'로 호출된다.

2. Handler Mapping : 소스파일 내 servlet-context.xml
Dispatcher Servlet에 의해 클라이언트로부터 요청받은 내용을 실행이 가능한지 확인하고 Dispatcher Servlet에게 알려준다.
* @Controller, @RequestMapping 선언되어 있는 프로그램을 찾아 STS시작 후 명세서를 미리 만들어놓는다.
* src파일 내 servlet-context.xml에 따른다.

3. Handler Adapter
요청내용이 실행 가능하면 Dispathcher Servlet은 Handler Adapter에게 해당 Controller를 찾아 실행하도록 요청한다.

3. Controller
Controller가 요청을 수행 후 view name을 Handler Adapter에게 반환하고 Handler Adapter는 그대로 Dispatcher Servlet에게 알려준다.

5. View Resolver : servlet-context.xml
Dispatcher Servlet은 Handler Adapter로부터 반환받은 view name을 View Resolver에게 전달하고, View resolver는 servlet-context.xml에 적힌 위치대로 매칭되는 view name을 찾아 servlet-context.xml에 적힌대로 접두, 접미사를 붙인 뒤 결과를 Dispatcher Servlet에게 알려준다.
* 기본적으로 jsp파일은 servlet-context.xml에 확장자를 생략할 수 있도록 정의되어 있기에 생략이 가능하다. 이 상태에서 다른 확장자는 생략이 불가능하며 필요시 수정이 가능하다.

6. View
Dispatcher Servlet은 View Resolver에게 전달받은 view를 찾아 데이터가 담긴 Model을 전달해주고 View에서 데이터처리를 한 뒤 client에게 결과를 응답한다.

* 직접연결이 아닌 과정이 복잡한 이유는 느슨한 결합을 통해 변경에 유리하도록 설계한 것이다.

<Redirect>
클라이언트가 수동 요청을 발생시켰을 때 서버가 300번대(다른 URL로 재요청) 응답 및 Redirect URL을 반환시킬 경우 해당 주소 자동적으로 GET방식을 통해 재요청을 하는 것
* 요청 2번, 응답 2번(클라이언트가 요청을 두번 하므로 URL주소가 변경된다.)

- Spring의 RedirectVIew
1. 클라이언트의 요청을 DispatcherServlet이 받음
2. DispatcherServlet은 요청을 처리할 Controller의 메서드를 호출하여 Redirect문자열을 리턴 받음
3. DispatcherServlet이 전달받은 Redirect문자열을 RedirectView에 전달
4. RedirectView가 300번대 & Redirect URL이 포함된 응답헤더를 만들어서 클라이언트에 응답
5. 300번대 응답을 받은 클라이언트는 Redirect URL로 자동 재요청

- Spring의 JstlView
1. 클라이언트의 요청을 DispatcherServlet이 받음
2. DispatcherServlet은 요청을 처리할 Controller의 메서드를 호출하여 View이름을 리턴 받음(받은 View이름을 InternalResourceViewResolver에 보내 View이름을 해석한뒤 실제 .jsp경로로 반환한다.)
3. DispatcherServlet이 전달받은 View이름을 JstlView(JSP뷰를 처리하는 역할)에 전달하면 JstlView는 해당 View에게 모델을 넘겨준다.
4. 모델을 전달받은 View는 최종 데이터를 만들어 클라이언트에게 응답

<forward>
해당 페이지가 클라이언트의 요청을 전부 처리하지 못했을 경우 처리 가능한 페이지에게 request, reponse 객체를 전달하여 요청을 전달하는 것 전달받은 페이지는 요청을 처리하고 request, response를 갈무리하여 클라이언트에게 응답한다.
* 요청 1번, 응답 1번(URL주소가 변경되지 않는다.)
* 최초 요청이 method방식에 따라 forward도 동일한 방식으로 진행

- Spring의 InternalResourceView
1. 클라이언트의 요청을 DispatcherServlet이 받음
2. DispatcherServlet은 요청을 처리할 Controller의 메서드를 호출하여 forward문자열을 리턴받음
3. DispatcherServlet이 반환받은 forward문자열을 InternalResourceView에게 전달
4. InternalResourceView는 전달받은 foward문자열을 요청하고 DispatcherServlet에게 알림
5. InternalResourceView의 요청을 DispatcherServlet이 받음
6. DispatcherServlet은 요청을 처리할 Controller의 메서드를 호출하여 View이름을 리턴 받음(받은 View이름을 InternalResourceViewResolver에 보내 View이름을 해석한뒤 실제 .jsp경로로 반환한다.)
7. DispatcherServlet이 전달받은 View이름을 JstlView(JSP뷰를 처리하는 역할)에 전달하면 JstlView는 해당 View에게 모델을 넘겨준다.
8. 모델을 전달받은 View는 최종 데이터를 만들어 클라이언트에게 응답
* forward받은 페이지에서 요청받은 데이터를 사용하려면 ewquest객체에 저장해둔다.

<Controller, Service, Repository>
- Controller
요청과 응답을 처리
데이터 유효성 검증
실행 흐름을 제어

- Service
비지니스 로직담당
트랜잭션 처리

- Repository
순수 Data Access 기능
조회, 등록, 수정, 삭제
* 작업 중 발생한 예외에 대해서 직접처리(try-catch)를 하지 않고 Service 또는 Controller 계층에서 처리하도록 한다. (가급적 Controller 처리)

<컨트롤러 메서드의 반환타입에 따른 Controller 구간의 작성방법>
- 반환타입이 String인 경우
1. 메인메서드의 반환타입을 String으로 지정 및 Model 타입의 매개변수 생성
> public String main(매개변수, ... , Model m)
2. Model 객체에 작업 결과 저장
> m.addAttribute("Key", value)
* Key단어를 생략할 수 있다.(생략시 value에 해당하는 객체의 클래스명 앞글자가 소문자로 변경된 채 Key값으로 저장된다.)
3. 작업결과를 보여줄 View의 이름을 반환
> return "뷰의 이름"
* 경로의 전체이름이 아닌 뷰의 이름만 적는 이유는 웹관련 설정[ 프로젝트폴더 > src > main > webapp > WEB-INF > spring > appServlet > servlet-context.xml > beans태그 ]에서 접두사 및 접미사 설정이 가능하기 때문이다.
* return 시 뷰의이름 접두사와 접미사에 redirect: + 돌아갈URL + QueryString을 추가하여 URL재작성을 할 수 있다. 이 때 문자의 경우 별도 encoding이 필요하다.
* redirect시 QueryString 대신 m.addAttribute("이름", QueryString)+"redirect:돌아갈URL"을 사용하여 model에 값을 저장 하여 넘길 수도 있다. (자동으로 QueryString으로 만들어준다.)
* <JSP의 QueryString을 JS에서 받아 사용하기>
1. 넘어온 QueryString을 받아 변수에 저장
* String JSP변수명 = request.getParameter("파라미터명");
2. JS에 해당 변수를 저장
var JS변수명 = '<%= JSP의변수명%>';
3. JS의변수명에 단어가 일치할 경우(넘겨준 값) alert 출력
if(JS의변수명 == 'true로설정할 값'){
alert("출력할 메세지"); }

- 반환타입이 없는 경우 (Void) : @RequestMapping 어노테이션으로 맵핑된 URL의 끝단어가 작업결과를 보여줄 View 이름이 된다.
1. 메인메서드의 반환타입을 Void로 지정 및 Model 타입의 매개변수 생성
> public void main(매개변수, ... , Model m)
2. Model 객체에 작업 결과 저장
> m.addAttribute("Key", value)

- 반환타입이 ModelAndView 인 경우 : Model객체를 직접 생성하여 Model객체에 작업결과와 View를 담아 넘겨주는 방식
1. 메인메서드의 반환타입을 ModelAndView로 지정
> public ModelAndView main (매개변수 ...) {
* 매개변수로 Model을 지정하지 않는다.
2. ModelAndView 객체 생성
> ModelAndView mv = new ModelAndView( );
3. ModelAndView 객체에 작업 결과 저장
> mv.addObject(String Key, Object value);
4. 작업결과를 보여줄 View의 이름을 지정
> mv.setViewName("뷰의 이름");
5. ModelAndVIew 객체 반환
> return mv;

* 리턴 결과가 다른 페이지를 호출할 때 페이지에 DB연동 로직이 필요한 경우, 단순히 .jsp로 호출된 view에는 불러온 데이터가 없기 때문에 단순히 껍데기만 남은 페이지가 호출된다. 이 때에는 "redirect : URL주소 " 를 사용하여 view 파일이 아닌 해당 주소로 다시 이동해야한다.

<Model을 전달받은 View의 Model 내부 데이터 출력(.jsp)>
- 각 데이터를 직접적으로 출력할 수 있는 경우 EL(${KEY})을 활용하면 View파일 내에서 ${KEY} 입력시 전달받은 Model에 해당하는 value가 출력된다.
- 배열 등 제어문을 활용하여 데이터를 출력해야하는 경우 JSTL 태그의 <c:forEach var="출력할변수명" items="모델에 담긴 배열 또는 ArrayList 객체명, EL형식으로 작성">${출력할변수명}</c:forEach>를 사용하여 출력이 가능하다.

* View File의 위치 : 프로젝트폴더 > src > main > webapp > WEB-INF
* 받는 매개변수의 가짓수가 많을 경우 클래스로 묶어서 받는 것도 고려해볼 수 있다. (EL로 출력할때도 param 대신 객체명으로 출력 가능, 단 getter, setter, toString 이 제대로 등록된 경우)