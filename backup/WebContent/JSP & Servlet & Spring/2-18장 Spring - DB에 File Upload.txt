<DB에 파일 업로드>
DB에 파일을 올리는 방법은 크게 2가지가 있다.
1. 파일 자체를 저장(BLOB) : 용량의 한계로 금전적인 부담이 커진다.
2. 파일의 이름만 저장, 파일 자체는 WAS Server에 저장 : 파일명이 중복될 경우 오버라이딩이 되는 문제가 있기에 별도의 컬럼을 두고 고유번호를 부여한다.
* 한국은 2번 방식 위주로 진행중이나 Cloud 서비스에는 적합하지 않아 역으로 반정규화를 진행하고 있다.

<전체 로직 요약>
- 업로드(수정의 경우 4번부터 실행)
0. DB의 테이블에는 파일의 이름만 저장, 실제파일은 서버에 저장

1. DB의 테이블 구조
bfile(사용자가 선택한 파일명)
bsfile(서버에 저장되는 파일명)
* resources\upload폴더 미리 생성

2. 개발환경에 따른 라이브러리 준비 (Spring MVC Framework)
메이븐 : Maven Repository에서 commons-io, commons-fileupload ==>> pom.xml

3. Bean 생성 ==>> ServletContext.xml
<!-- multipartResolver -->
<beans:bean id="multipartResolver"
class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
</beans:bean>

4. 파일업로드 폼에 enctype="multipart/form-data" 추가

5. VO파일에서 CommonsMultipartFile 타입으로 폼에서 넘어오는 데이터 저장 (bfile, bsfile이 아닌 다른 이름 생성하며 해당 파일은 form에서 넘어올 name과 동일하게 지정한다.)
추가로 DB 컬럼의 이름과 같은 String 타입의 bfile, bsfile를 추가로 만들어둔다.

6. 컨트롤러 작성
컨트롤러에서 vo에 저장된 파일객체의 유무를 판단하고,
파일명.getOriginalfilename( ) 메서드로 bfile을 출력함
bfile+UUID(Random클래스 등) 형식으로 bsfile 출력
VO에 저장 후 DB전송
* 예제
String nfile, nsfile = "";
if(!vo.getFile1().getOriginalFilename().equals.("")) {
UUID uuid = UUID.randomUUID();
nfile = vo.getFile1().getOriginalFilename();
nsfile = uuid+"_"+nfile;
vo.setNfile(nfile);
vo.setNsfile(nsfile);}

* vo.getFIle1( ).getOriginalFilename( ) 를 null로 비교하지 않는 이유는 리턴값이 null이 아닌 String의 "" 값이기 때문이다.

7. 컨트롤러 작성(request객체와 예외처리를 해주어야한다.)
파일 수정 및 업로드를 실행시켰을 경우 결과값을 받아 성공했을 때 사용자가 저장 혹은 변경된 파일이 있을 경우 실제로 파일을 저장한다.
if(vo.getFile1().getOriginalFilename().equals("")) {

8. 실제 파일을 서버에 저장할 경로 생성
String path = request.getSession().getServletContext().getRealPath("/"); // Request 객체를 통해 서버의 Upload 저장위치를 가져옴
path += "resources\\upload\\"; // 세부 저장위치인 폴더 지정

9. File객체를 생성하여 upload 위치에 저장
File file = new File(path+nsfile); // 파일이 저장될 경로 및 이름생성
vo.getFile1().transferTo(file);} // 실제파일을 가지고 있는 vo객체에서 file객체로 메서드를 활용해 저장

* 업로드시 현재 HTML5의 에러로 인해 사용자가 파일을 올려도 input 태그의 value값이 변경되지 않는 오류가 있다. 스타일시트로 별도로 만들어 가려준다.

10. 컨트롤러 작업 후 DAO 작업
업데이트 메서드 중 vo객체에 추가된 파일(nfile)의 유무를 통해 nfile과 nsfile을 업데이트하는 sql문과, 그렇지 않을 경우 nfile과 nsfile을 업데이트 하지않는 sql문을 분리하여 작성한다.
try {
if(vo.getNfile() != "") {
sql = "update cgv_notice set ntitle=?, ncontent=?, nfile=?, nsfile=?  where nid=?";
getPreparedStatement(sql);
pstmt.setString(1, vo.getNtitle());
pstmt.setString(2, vo.getNcontent());
pstmt.setString(3, vo.getNfile());
pstmt.setString(4, vo.getNsfile());
pstmt.setString(5, vo.getNid());
}else {
sql = "update cgv_notice set ntitle=?, ncontent=?  where nid=?";
getPreparedStatement(sql);
pstmt.setString(1, vo.getNtitle());
pstmt.setString(2, vo.getNcontent());
pstmt.setString(3, vo.getNid());}

- 새로운 파일로 업로드될 경우 기존의 파일을 삭제
1. 수정(업데이트)폼에서 nfile과 nsfile을 히든타입으로 파일명을 보낸다.
<input type="hidden" name="nsfile" value="${vo.nsfile }">
<input type="hidden" name="nfile" value="${vo.nfile }">
* nfile을 추가하는 이유는 vo객체에 nfile을 맵핑하여 DAO실행 시 값을 입력해주기 위함이다.

2. 컨트롤러에서 String 타입의 oldFile 변수를 선언하여 vo객체에 맵핑된 Nsfile을 저장한다.
String oldNsfile = vo.getNsfile( );

3. 기존파일 유무 확인 후 삭제
if(oldFile != null) { // 기존에 업로드했던 파일이 있을 경우
File dfile = new File(path+oldFile); // 기존 파일의 경로를 만든다.
if(dfile.exists()) { // 기존 파일의 경로가 실제로 존재할 경우
dfile.delete();}} // 파일 삭제

- 게시글 삭제시 해당 게시글을 통해 업로드된 파일 삭제
1. 삭제할 게시글의 고유값을 가져온다.
<input type="hidden" name="nid" value="${nid }">

2. 가져온 고유값을 DAO를 활용해 실제 저장된 파일이름(nsfile)을 반환받는다.
String nsfile = dao.selectNsfile(vo.getNid( ))

* nsfile을 반환받을 DAO 예시
public String selectNsfile(String nid) {
String result = "";
String sql = "select nsfile from cgv_notice where nid=?";
getPreparedStatement(sql);
try {
pstmt.setString(1, nid);
rs = pstmt.executeQuery();
while(rs.next()) {
result = rs.getString(1);}
} catch (Exception e) {
e.printStackTrace();}			
return result;}

* close( )를 실행할 경우 다음 DAO(게시글 삭제)가 실행되지 않기 때문에 주의한다.

3. 파일 삭제 DAO가 정상적으로 실행된 후 파일이 있는 경우 upload폴더에서 파일을 삭제하는 메서드를 실행한다.
if(result ==1) { // 파일삭제가 완료된 경우
if(nsfile != null) { // 업로드된 파일이 있었다면
String path = request.getSession().getServletContext().getRealPath("/");
path += "resources\\upload\\"; // 파일이 저장된 루트를 가져온다.
File file = new File(path+nsfile); // 파일이 저장된 루트와 파일명 기반으로 파일 객체 생성
if(file.exists()) { // 해당 경로에 실제로 파일이 있다면
file.delete(); // 파일 삭제
}}
* 파일이 저장된 루트를 가져올 때 사용되는 request객체는 HttpServletRequest 객체를 생성하여 받아온다.
* File객체 생성시 예외처리를 해준다.
public ModelAndView admin_notice_delete(CgvNoticeVO vo, HttpServletRequest request) throws Exception {






<실제 예제>
1. Maven Repository에서 Apache Commons IO / Apache Commons fileupload 라이브러리 다운 후 메이븐 - pom.xml 에 입력	
// c:\사용자\m.2폴더의 repository에 저장된다!!
					
// pom.xml 의 dependency 안에 넣어줘야한다. (Test 밑에 넣는다.)
<!-- FileUpload - MultipartHttpServletRequset -->
		<dependency>
    		<groupId>commons-io</groupId>
    		<artifactId>commons-io</artifactId>
    		<version>2.0.1</version>
		</dependency>

		<dependency>
		  <groupId>commons-fileupload</groupId>
		  <artifactId>commons-fileupload</artifactId>
		  <version>1.4</version>
		</dependency>

2. 환경설정 추가 : servlet-context.xml
<!-- multipartResolver -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</beans:bean> 

3. 저장폴더 생성 : resources 아래에 upload 폴더 생성 함
   --> 이미지 호출 경로 : 
      http://localhost:9000/컨텍스트명/resources/upload/파일이름.확장자


4. VO 객체에서 파일을 CommonsMultipartFile 객체 형태로 받도록 필드 선언 및 getter, setter 추가
* form에서 넘어오는 이름을 DB와 form의 name과, VO 필드명을 동일하게 해야하나 file의 경우 이름만 별도로 추출해서 String으로 저장해야 하기 때문에 form쪽과 form을 받는 vo 필드에서는 임시 이름으로 설정해준다. 이후 변환하여 VO에 String타입으로 저장 후 해당 이름을 DB이름과 동일하게 맞춤
form이름 == vo필드 이름 -[컨트롤러에서 변환]-> vo필드 새이름 == DB이름
* form에서 데이터를 보낼 때 enctype="multypart/form-data"가 없다면 문자타입으로만 실행된다. 반드시 form 태그 안에 enctype="multypart/form-data"를 입력해준다. (Model2에서는 String으로 넘어가는 필드의 경우 vo에 자동 맵핑되서 별도 처리를 하지 않아도 된다.)

5. 컨트롤러 설정
--파일을 선택한 경우에만 파일업로드 처리하도록 제어
@RequestMapping(value = "/file_upload_proc.do", 
						method = RequestMethod.POST)
	public String file_upload_proc(FileVO vo, 
					HttpServletRequest request) throws Exception{
	
		if(vo.getFile1().getOriginalFilename().equals("")){
			//파일 존재
			String root_path = request.getSession().getServletContext().getRealPath("/");
			String attach_path = "\\resources\\upload\\";
				
			//rfname 중복방지 처리
			UUID uuid = UUID.randomUUID();
			System.out.println((vo.getFile1().getOriginalFilename()));
			System.out.println((uuid +"_"+vo.getFile1().getOriginalFilename()));
			
			//DB저장
			
			//DB저장 완료 후 폴더에 저장하기
			System.out.println(root_path + attach_path + uuid +"_"+vo.getFile1().getOriginalFilename());
			File file 
			= new File(root_path + attach_path + uuid +"_"+vo.getFile1().getOriginalFilename());
			vo.getFile1().transferTo(file);
			
		}else{
			//파일 없음
			System.out.println("선택 파일 없음~");
		}
		
		return "file_upload_success";
	}

5. 컨트롤러 설정 2
/**
	 * 게시글 등록 처리
	 * @return
	 */
	@RequestMapping(value="/board_write.do", method=RequestMethod.POST)
	public String board_write(CgvBoardVO vo, HttpServletRequest request) {

		String result_page = "";
		CgvBoardDAO dao = new CgvBoardDAO();
		String bfile, bsfile = "";
		
		//파일 업로드 데이터 생성 --> bfile, bsfile
		if(vo.getFile1().getOriginalFilename().equals("")) { // 업로드된 파일의 이름이 존재하는 경우
			UUID uuid = UUID.randomUUID(); // 랜덤 ID생성
			bfile = vo.getFile1().getOriginalFilename();
			bsfile = uuid + "_" + vo.getFile1().getOriginalFilename();
			
			vo.setBfile(bfile);
			vo.setBsfile(bsfile);
		}
		
		int result = dao.insert(vo);
		
		if(result == 1) { // 게시글 작성에 성공했을 경우
			if(vo.getFile1().getOriginalFilename().eqauls("")) { // 업로드된 파일의 이름이 존재하는 경우
				//파일저장 위치 확인
				String root_path = request.getSession().getServletContext().getRealPath("/");
				root_path += "\\resources\\upload\\";
				
				File file = new File(root_path + bsfile);
				
				try {
					vo.getFile1().transferTo(file);
				} catch (Exception e) {
					e.printStackTrace();
				}
			result_page = "redirect:/board_list.do";
			}else {
				//에러페이지 호출
			}
		}
		return result_page;
	}