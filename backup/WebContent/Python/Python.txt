[Python]
#!python
print("Content-Type: text/html") : 파이썬 문자를 사용하기 위한 출력설정

[데이터타입]
- 숫자(Integer)
- 문자열(String) : ' ', " " 사용 가능
(시작과 끝은 같은 부호로 처리, 따옴표가 이중으로 표현될 필요가 있다면 큰 따옴표 안에 작은 따옴표를 넣는다.)
(문자열끼리의 덧셈은 문자열이 이어진다)
- Boolean : True(참) 또는 False(거짓)로 이루어져있다.

[연산자]
사칙연산자 : +, -, *, /
비교연산자 : ==, <, >, <=, >=, !=
논리연산자 : and(&&), or(||), not(!)

[Variable : 변수]
사용법
x = y : x에 y를 대입한다.

[함수]
- 작성법
def 함수명(매개변수) :
   (실행문)
*실행문 내에 return으로 반환값을 줄 수 있다.

- 사용법
함수명(아규먼트)

[모듈]
1. 모듈 전체 import
- 파이썬 파일로 작성된 파일을 import로 모듈을 적용할 수 있다.
> 파일명. 으로 파일 내 메서드 및 변수를 활용 가능

2. 모듈 내 특정 함수 import
- from 파일명 import 함수명, 변수명
> 해당 함수를 해당 파일에서 작성한 것처럼 함수명만으로 바로 호출할 수 있다.

[패키지]

*패키지>모듈>함수

[제어문 : 조건문]
if (boolean) :
   (실행문)
elif (boolean) :
   (실행문)
else :
   (실행문)

[제어문 : 반복문]
- if문 : Sequence Type 활용
for (변수명) in (Sequence Type(String, List ...)) :
   (실행문)
* 변수에 시퀀스타입의 길이만큼 반복해서 값이 저장되고 실행문이 실행된다.

- if문 : range 활용
for (변수명) in range( i ) :
   (실행문)
* i 값만큼 반복된다.

- while문
while (boolean) : (실행문)
else : (실행문)

[String : 문자열]

[String 주요 메서드]
len( x ) : x의 길이를 반환
x[ i ] : x의 i번째 글자를 반환
x[ i : j ] : x의 글자 중 i부터 j까지 반환
x*2 : x를 두번 출력
x in xyz : xyz 내에 x가 포함되어있는지 확인 후 boolean타입 반환
capitalize( ) : 해당 문자열의 첫번째 알파벳을 대문자로 변경한다.

*formating
기본적인 기능은 변수와 동일하지만 입력값을 제한, 제한적인 지정범위내에서의 사용 등이 가능하다. 또한 '', "" 내 작성한 html코드 내부에서도 작동이 가능하다.
- 사용방법
>positional formating
'{ } { }'.format(x, y) : 괄호를 입력한 순서대로 x, y로 변경

>named placeholder
'{a} {b:d}'.format(a=x, b=y) : 괄호 내 문자를 특정한 값으로 치환(:d : form이 10진수로 제한)

[List : 배열]
x = [ 1, 2, 3 ]

[List 주요 메서드]
x[ i ] : x의 i번째 요소(Element)를 반환
len( x ) : x배열의 길이를 반환
del x[ i ] : x의 i번째 요소를 삭제
x.append(y) : x 배열에 y를 추가(맨 뒤)

*String과 List는 Sequence Type으로 공통 메서드가 있다.

[Set Type]
*Set Type은 집합으로 데이터의 중복을 허용하지 않는다.

[Mapping Type]
*Mapping Type은 키 데이터의 중복을 허용하지 않으며 해당 키값에 매칭되는 data값을 저장할 수 있다.

[CGI : Common Gateway Interface]
웹서버와 개발언어간의 표준화된 약속
개발환경이 달라도 약속된 값으로 반환하거나 수용할 수 있도록 해준다.

import cgi : cgi모듈을 import한다.

[cgi 주요 메서드]
cgi.test() : 웹서버가 사용자에 요청에 의해 해당 문서에 전달하는 데이터를 반환
form = cgi.FieldStorage( ) : 해당 문서의 기본 데이터를 반환
form["id"].value = 해당 문서의 id 값 반환

*<form> 태그로 URL 쿼리스트링을 만들 수 있다.

[주요 메서드]
print( x ) : x를 출력
input('표시텍스트') : 사용자의 입력을 받는다.

os.path.exists('파일경로') : 해당 경로에 해당 파일이 있는지 확인 후 bollean타입 반환(os.path를 improt)
os.listdir('파일경로') : 주어진 경로에 아래에 있는 목록들의 이름을 List Type으로 반환(os.path를 improt)
os.rename('기존파일경로','변경파일경로') : 파일의 이름을 변경한다.

[파일 제어]
f = open('파일주소','w'/'r') :
*파일 쓰기시 'w' / 읽기 시 'r' 생략시 r이 기본값
.read( ) : 파일을 읽는다.
.wrtie(쓸 파일) : 파일을 쓴다.
.close( ) : 사용한 파일을 닫는다.
os.remove('파일경로') : 파일을 삭제한다.

[Redirection]
print("Location : 파일경로") : 파일 제어 완료 후 다시 원래 상태의 페이지로 돌아가기 위한 명령어

[특수 기호]
# : 뒤의 내용을 주석처리 한다.
\ : 뒤의 기호를 기능이 아닌 문자열로 처리한다.
\n : 줄바꿈
'''~''' : docstring 내부의 내용을 줄바꿈(\)을 적용하지 않아도 되는(Enter) 상태로 만든다

[Tip]
Python은 들여쓰기 중요
Python HomePage Documentation - Python3 - Tutorial / Library Reference / Language Reference 에는 Python의 기능을 정리해 놓은 곳
Library Reference : 파이썬이 갖고있는 기능(부품)
Language Reference : 파이썬의 문법
Tutorial : 기능과 문법의 활용방법 안내
파이썬 내부에서 "",''를 활용하여 html태그를 작성할 수 있다.
파이썬으로 사용자의 입력을 저장할 때 태그를 직접 저장할 경우 위험변수가 있다. 따라서 < 는 &lt; 로 >는 &gt; 로 <script> 코드 자체를 변화시키는 등의 조치로 보안문제를 해결해야함
*Pypi 등의 html-sanitizer 설치하여 도움을 받을 수 있다.

[API : Application Programming Interface]
함수, 문법 등을 활용하여 새로운 것을 만든다.