자바스크립트란?
JAVA+LiveScript로 자바의 문법을 빌리기만한 언어다.
Webpage에서 동적 상호작용을 발생시키는 언어
* " ", ' ' 구분이 없다. 대신 " " 내부에서는 ' ' 로 표기
작성 시 헤드부분에는 전역변수와 함수를 작성하고, 바디부분에다가 적을때에는 중간에 적는것보다 맨 하단에 위치시키는게 가장 좋음
Dynamic HTML을 실행하는 첫번째이다.

[실행 방법]
1. <script type="text/javascript"> </script> 안에 작성
2. 태그 활성화 : HTML의 body부분에 </script> 태그로 활성화 (내에서만 활성화)
3. 이벤트 발생 : onclick, onchange, onkeydown ...
4. 콘솔(읽기 전용)
5. <script type="text/javascript" src="javascript.js"> </script> 또는 <link rel="stylesheet" href="js.js"> 태그를 활용하여 외부에서 가져올 수 있다.
6. 요소안에 스크립트 작성 : <a href="javascript:alert('클릭하셨어요?')">클릭해보세요.</a>

[데이터 타입]
<기본>
- undefined : 값을 할당하지 않은 변수의 타입(= null)
- Number : 숫자 값
- String : 문자열
- Boolean : 논리값(True, False)
- Null : null값
- BigInt : Number의 한계를 넘어서는 큰 정수
- Sysmbol : 유일하고 변경불가한 key값
<구조>
- Object
- Function : 함수(메서드)

[데이터타입의 자동형변환]
"10"+"5" = 105(문자끼리의 덧셈은 결합)
"10"-"5" = 5 (문자끼리의 뺄셈은 연산)
"10"+5 = 105(문자와 숫자의 덧셈은 결합)
10+5 = 15(숫자끼리의 덧셈은 연산
"가"+10+5 = 가105(문자가 포함되어있으면 결합)
10+3+true = 14(true는 1의 값을 갖는다)
*flase는 0의 값을 갖는다.
"10"*5 = 50(문자열이라도 덧셈을 제외하면 연산이 된다)

*parseInt(문자열) : 문자열을 숫자로 형변환

[변수(프로퍼티)]
변수에 대입연산자를 활용하여 값을 저장할 수 있다.
변수명에는 상수값이 올 수 없다.
변수 생성 시 var 표기 후 생성(var 선언 시 코드작성 중 오류 체크 가능)
변수의 타입은 자동설정되므로 타입선언은 생략할 수 있다.

- 변수의 종류
var : 
const이전에 선언하던 키워드로 유연한 변수 사용이 가능
코드의 양이 많다면 변수의 용도파악이 어렵고 값이 예상치 못한 방향으로 바뀔 수 있다.
변수선언 이전에 변수를 참조해도 에러가 발생하지 않는다.
어디서든 해당 변수 출력시 마지막에 저장된 값이 출력된다. 

const :
상수를 선언할 때 사용하는 키워드
var와 다르게 블록마다 값을 따로 갖는 블록단위의 scope를 갖고 있다.
선언과 동시에 초기화하며, 런타임 이전에는 실행될 수 없는 점을 주의해야한다.
const키워드로 변수를 선언하고 초기화를 나중에 하거나, 변수를 먼저 사용하고 나중에 변수를 선언 및 초기화를 하면 에러가 발생한다.

let :
변수를 선언할 때 사용되는 키워드
재할당이 필요한 경우 사용된다
var와 다르게 블록마다 값을 따로 갖는 블록단위의 scope를 갖고 있다.
var와 다르게 선언부터 초기화가 한번에 이루어지지 않고 각 단계가 분리되어 실행된다.
Hoisting 또한 var와 다르게 변수를 선언하기 이전에 변수를 참조하면 에러가 발생한다.
*Hoisting은 JS만의 고유한 특징으로 프로그램을 실행할 때 런타임을 본격적으로 시작하기 전에 한 번 코드를 전체적으로 훑으면서 선언문이 있는 부분들을 확인하고 메모리를 확보하여 변수명과 연결하는 작업

- 구현방법
var 변수명 =
let 변수명 =
const 오브젝트명 =

* new 데이터타입( ); 으로 선언할 경우 해당 변수의 데이터타입이 수동으로 설정되며 값이 저장되지 않았을 경우 출력시에는 undefined가 아닌 선언된 데이터타입이 출력된다.
* 객체에 속할 경우 "프로퍼티"
* 변수선언은 굳이 불필요

[식별자(명명규칙)]
첫글자는 영문으로 시작, 특수문자나 한글은 사용할 수 없다. 대소문자를 구분한다. 예약어는 사용불가

[연산자]
+ - * / : 사칙연산
% : 나머지

논리연산자
&& : (AND) 모두가 참일 때 참
|| : (OR) 모두 가 거짓일 때 거짓
! : (NOT)

비트연산자(0과 1을 비교하는 연산자)
& : (AND) 11 일 때만 1
| : (OR) 00일 때만 0
^ : (NOT) 같으면 0, 다르면 1

비교연산자
===, >=, <=, >, <, !=

대입연산자
+= : 더하고 대입
-= : 빼고 대입
*= : 곱하고 대입
/= : 나누고 대입
%= : 몫을 구하고 대입

증감연산자
++ : 1증가
-- : 1감소
>> : 비트값을 미룬다.
++a : 1증가 후 대입
a++ : a 선행 후 1증가

조건연산자(삼항연산자)
조건식 ? 참 : 거짓 ;
[조건문]
-if문
if (boolean)
{구현부}
else if (boolean)
{구현부}
else{구현부}

-switch문
switch (검증대상){
case 검증 : 구현부 break;

[반복문]
while(boolean){구현부}
for(초기값;반복조건;증감식){
구현부}
for(var i in 반복할배열){구현부}

[함수(메서드)]
함수 선언 : 
function 선언부(매개변수){구현부}

* 결과를 retrun으로 반환 가능
* 같은 이름의 함수가 중복될 경우 에러가 아닌 덮어쓰기가 된다.
* 객체에 속할 경우 "메서드"
* 정의 시점이 아닌 호출 시점에서 값 반영이 온전할 경우 에러가 없다.(가급적 헤드쪽에 선언)

함수 실행 :
1. </script> 태그 내부에서 실행 가능(스크립트 태그는 2개가 있다.)
2. 특정 이벤트 내에서 실행 가능

[객체]
서로 연관있는 속성(프로퍼티) & 변수 & 메서드들을 모아 묶어둔 것
사용시 객체이름+멤버접근연산자' . '+변수&메서드 명으로 사용

- 객체의 종류
1. 내장 객체
> 기본 객체(=core 객체) :
Array, Date, String, Math, 
> BOM 객체 (Browser Object Model)
> Document 객체

2. 사용자 정의 객체 :

- 종류
> Object( ) - 싱글톤 방식 (new 없이 이미 생성된 객체를 빌려온다. 다중생성 제한)
> 리터럴 표기법 - 싱글톤 방식 (new 없이 이미 생성된 객체를 빌려온다. 다중생성 제한)
> JSON : 자바 스크립트 객체 표기법
> 프로토 타입

<Object( )>
- 구현방법
var 객체명 = new Object( );
객체명.키 = 값;
객체명[키] = 값;
객체명.메서드명 = function(매개변수){구현부}
function 메서드명(매개변수){구현부}

<리터럴 표기법>
- 구현방법
var 객체명 = { "키1" : 값, "키2" : 값, ...}
var 객체명 = {메서드명 : function(매개변수){구현부}...}
* 객체 생성시 { } 사용
* 콜론으로 맵핑, 콤마로 구분

<JSON : JavaScript Object Notation>
자바 스크립트 객체 표기법
여러가지 종류가 다양한 데이터들을 한꺼번에 많이 담을 수 있다.
이름, 값 쌍으로 콜론으로 맵핑하며 한 쌍은 콤마(,)로 구성된다. (이름쪽에는 쌍따옴표를 생략해도 된다.)
속성과 값(키와 value)로 구성된 데이터 객체를 전달하기 위해 사람이 읽을 수 있는 텍스트를 사용하는 개발형 표준포맷
값 : 문자, 숫자, 배열(함수는 불가)
{ } 중괄호로 시작하고 종료
, 로 구분
* {"키":"값",}

- 사용 예시
{"name":"John", "age":30, "car":null}

- 입력 가능한 데이터 타입
문자열 : { "name" : "홍길동" }
숫자 : { "age" : 20 }
JSON객체 : { "obj" : { "name" : "hong" } }
배열 : { "array" : "[1,2,3,4,5]" }
Boolean : { "boolean" : true }
null : { "str" : null }

- 입력 불가능한 데이터 타입
날짜
undefined
메서드

- 주요 메서드
> JSON.stringify( ) : 객체를 JSON 문자열로 변환(직렬화, JS객체 -> 문자열)
> JSON.parse( ) : JSON문자열을 객체로 변환(역직렬화, 문자열 -> JS객체)

멤버접근연산자(.)를 사용하여 내부 데이터에 접근할 수 있다.
내부에 JSON객체 또는 배열이 있는 경우 멤버접근연산자와 인덱스[ ]를 추가적으로 사용하여 더 깊숙히 접근할 수 있다.

<프로토타입>
- 구현방법 : new student( )
- 속성(멤버변수)
- 메서드(프로토타입 함수)
- 구현방법
1. 프로토타입 함수 작성
- 속성에 this를 붙여서 선언한다.
> this가 없다면 전역변수
- 메서드에 this를 붙여서 선언한다.
활용
var v = new 생성자( );
**프로토타입 객체 생성 예시(객체의 첫번째 글자는 항상 대문자다)
function Account(name, code, balance) {
	this.owner = name;
	this.code = code;
	this.balance = balance;
		
	this.inquiry = function a(){
		return this.balance;}
	this.deposit = function(money)
		{this.balance += money;}
	this.withdraw = function(money)		{this.balance -= money;}
}
** 메서드 실제 출력시에는 deposit( ) 으로 출력
* 메서드 작성 (순서에 주의)
메서드명 = function(매개변수){구현부}

[DOM 객체 : 문서 내 객체들]
Document Object Model

실행
- 브라우저가 DOM객체를 생성
- DOM트리를 작성
- HTML문서가 사라짐
- 브라우저에는 DOM객체와 DOM트리만 남는다. + 내장객체, BOM
- 자바스크립트가 DOM객체를 컨트롤해서 제어한다.>동적문서를 만든다.

HTML DOM객체
- 태그당 하나의 객체를 갖는다.
- 멤버변수(공통)
> id : 없으면 공란
> title :
> lang :
> tagName : 태그 명
> innerHTML : 태그 안의 내용
> childElementCount : 자식 DOM 객체 수
> firstElementChild : 첫번째 자식
> lastElementChild : 마지막 자식
> parentElemnet : 부모 객체
> nextElementSibling : 뒤에 있는 사촌(부모가 다름) 객체
> previousElemnetSibling : 앞에 있는 사촌(부모가 다름) 객체
> offsetWidth : 패딩, 테두리, 스크롤바를 포함한 넓이
> offsetHeight : 패딩, 테두리, 스크롤바를 포함한 높이
> offsetLeft : 객체의 출력위치를 조정한다. (수평)
> offsetTop : 객체의 출력위치를 조정한다. (수직)
> style : 스타일 객체에 연결되어 있다. (스타일의 속성을 가져와서 설정
*기존 CSS 문법 중 하이픈이 들어간 경우 하이픈을 제거하고 하이픈 뒤의 단어가 대문자로 들어간다.(ex text-align -> textAlign
*obj.style.cssText="font-size: "+size / cssText를 활용해 CSS처럼 입력할 수 있다. 다만, CSS설정의 전체가 덮어쓰여지기 때문에 전의 입력항목 전체가 default값으로 초기화 된다.
~
*객체들은 내용 반환도 하지만 대입으로 내용을 변경할 수 도 있다.

- document 객체
> body : body객체
> head : head객체
> html : html객체
> getElementById() : 해당 id값을 갖고 있는 객체를 반환(id가 중복될 경우 최상위의 객체)
> getElementsByTagName() : 해당 tag값을 갖고 있는 컬렉션을 반환
> getElementsByClassName() : 해당 class값을 갖고 있는 컬렉션을 반환
> getElementsByName() :  해당 name값을 갖고 있는 컬렉션을 반환
* id를 제외하고 전부 컬렉션이므로 for문으로 적용한다.

> creatElement() : HTML 태그의 동적생성
> creatTextNode() : 전송할 텍스트를 생성한다.
> appendChild("추가할 태그","위치") : 마지막 자식 뒤에 새로운 자식을 추가
> insertBefore("추가할 태그","위치") : 특정 자식 앞에 자식노드 추가
> removetBefore() : 자식 삭제
> replaceChild() : 특정 자식노드를 교체
> removeChild() : 자식노드 삭제
> setAttribute("속성이름", "속성값") : 속성 추가
> getAttribute() : 속성을 가져온다.
> click() : 클릭한듯한 효과를 준다(클릭으로 인한 해당 작업 수행가능)
> focus() : 객체에 포커스를 준다.
> select() : 객체를 선택한다.(드래그 효과)
- 컬렉션
> children : 직계 자식객체들에 대한 레퍼런스 배열

> write() : HTML문서의 마지막에 DOM트리 추가연결
> open() : document속의 객체를 지우고, 새로운 HTML을 쓸 수 있도록 한다.
> close() : 더이상 쓰기를 할 수 없게 닫는다.
* write주의점
document객체가 닫히고 나면 추가하기 위해 write()를 사용하지 못한다.
닫히고 난 다음에 write()를 사용하면 open()과 동일한 효과가 적용된다.(현재 문서의 객체들은 모두 지워지고 새로 작성하는 내용만 출력)

[Event : 이벤트]
- 입력행위, 문서의 변화
- 브라우저가 이벤트 객체를 만들어서 이벤트 리스너에게 전달
- 이벤트에 대한 다양한 정보를 담고 있다.
* 좌표값, 키코드 등
- 브라우저가 생성 후 > 이벤트리스너에게 전달 > 실행 > 소멸

- 이벤트 추가/삭제
> addEventListener("on을제외한 이벤트 종류", 이벤트메서드 이름만, false) : 이벤트리스너 등록
> removeEventListener() : 이벤트리스너 삭제

- 종류
> onclick : 객체를 클릭했을 때
> ondblclick : 객체를 더블클릭 했을 때
> onload : 문서나 이미지가 로딩이 완료된 다음
> onabort : 문서나 이미지의 로딩이 중단되었을 때
> onresize : 윈도우 창의 크기가 변화할 때
> onfocus : 포커스를 얻었을 때
> onblur : 포커스를 잃었을 때
> onsubmit : submit 버튼을 눌렀을 때 반환값을 확인하여 전송여부를 결정한다.(return으로 boolean을 받아 true일때만 전송한다.)
> onchange : input, select, textarea 등에서 선택내용이 변하거나 체크상태가 변할 때
> onreset : 입력내용을 삭제할 때
> onsumit : 입력내용을 제출할 때
> onkeydown : 아무 키나 누르는 순간
> onkeypress : 문자, 숫자 키를 누르는 순간
> onkeyup : 키를 뗄 때
> onmouseup : 마우스 버튼을 뗄 때
> onmousedown : 마우스가 버튼을 누를 때
> onmouseenter : 마우스가 들어갔을 때
> onmouseover : 마우스가 위로 올라갔을 때
> onmouseout : 마우스가 나갔을 때
> onmouseleave : 마우스가 떠날 때
> onmousemove : 마우스가 움직이는 동안
> onwheel : 마우스 휠을 작동시킬 때
> onselect : 입력된 텍스트를 마우스로 선택할 때(글자 드래그)
> oncontextmenu = function hidemenu(){
alert('오른쪽 클릭금지!');
return false; 
: 마우스 우클릭 금지시

- 이벤트 구현
1. 이름을 가진 이벤트리스너 함수일 경우
p.onmouseover = f ;
function f(e){구현부}

2. 익명함수일 경우
p.onmouseover = function(e){구현부}

3. 태그 안에서 이벤트리스너 생성(event객체는 반드시 event로 작성)
* onmouseover="this.style.backgroundColor='orange'

- 이벤트 작성
1. 태그 안에서 이벤트리스너 생성(event객체는 반드시 event로 작성)
* onmouseover="this.style.backgroundColor='orange'"

2. DOM객체의 이벤트리스너프로퍼티에 작성
function init(){
		img = document.getElementById("img");
		img.onmouseover=over;
		img.onmouseout=out;
	}
	function over(){
		img.style.width="302px";
		img.style.height="302px;"
	}
	function out(){
		img.style.width="300px"
		img.style.height="300px;"
	}
3. addEventListener()를 이용해서 작성
function init(){
		p = document.getElementById('p');
		
		p.addEventListener("mouseover", over);
		p.addEventListener("mouseover", size);
		p.addEventListener("mouseover", fontstyle);
		p.addEventListener("mouseout", out);
	}
	function over(){
		p.style.backgroundColor='orchid';
	}
	function size(){
		p.style.fontSize='30px';
	}
	function fontstyle(){
		p.style.fontStyle='italic';
	}
	function out(){
		p.style.backgroundColor='white';
	}

- 주요 메서드
e.type : 이벤트의 종류
e.currentTarget : 이벤트를 실행시키는 객체
e.target : 이벤트를 발생시킨 객체
e.defaultPrevented : 이벤트 발생을 방해
e.button : 버튼 값
e.screenX / e.screenY : 스크린을 기준으로 한 좌표 값
e.clientX / e.clientY : 윈도우 내 문서 출력 영역 내에서의 좌표 값
e.offsetX / e.offsetY : 타겟 객체 안에서의 좌표 값
e.x / e.y : 부모 객체 안에서의 좌표 값
e.wheelDelta : 마우스 휠 값

*기본행동 취소*
return 메서드() : true를 리턴받으면 실행
false 
e.preventDefault()

BOM :
DOM 객체들은 HTML 태그들을 객체화 한 것. 모양이나 내용을 변경하여 동적변화를 주고자 함
브라우저가 실행되고 있는 환경에 자바스크립트 코드로 접근하고 제어 할 수 있도록 설계된 객체들의 그룹
표준은 없다. 그렇지만 공통된 프로퍼티나 메서드가 있다.

- 종류
window, navigator, history, location, screen

- window객체
열려있는 윈도우들은 모두 윈도우 객체이다.
1. 새로운 페이지를 로드할 때
2. iframe당 하나씩 생성
3. 개발자가 직접 생성할 때

사용법
window, window.self, self

1) 프로퍼티
window : 현재 윈도우 객체에 대한 레퍼런스(이벤트 설정이 가능하다.)
self : 현재 윈도우 객체에 대한 레퍼런스
-----------
location=url : 현재의 윈도우에서 url을 로드시킨다.
history
navigator
document
-----------
name : 윈도우이름
locationbar
menubar
personalbar
scrollbar
toobar
opener : 어떤 장치로 열었는지 확인

status : 상태바
closed : 닫혀서 보이지 않는다면 true
length : iframe의 갯수
top : 최상위 윈도우 객체에 대한 레퍼런스
parent :

innerWidth : 문서가 출력되는 영역의 폭(scrollbar 포함)
innerHeight : 문서가 출력되는 영역의 높이(scrollbar 포함)
outterWidth :
innerHeight :

screenX : 스크린상의 X좌표
screenY : 스크린상의 Y좌표
scrollX : 상하를 조절하는 스크롤의 X좌표
scrollY : 상하를 조절하는 스크롤의 Y좌표
-------------
기능(window. / self.)
open('출력할 페이지','윈도우이름','윈도우속성(_parent,_self,_blank)') : 새 윈도우를 연다
> width : 윈도우 폭(픽셀)
> height : 윈도우 높이(픽셀)
> left : 창이 열리는 위치(x좌표 값)
> top : 창이 열리는 위치(y좌표 값)
> resizeable : 윈도우 크기조절 가능여부

close() : 윈도우를 닫는다.
focus() : 윈도우에 포커스를 준다.
blur() : 포커스를 잃는다.
getSelection() : 윈도우 안에서 선택된 텍스트를 문자열로 리턴한다.

윈도우 실행시간 지정
실행 : 변수 = setTimeout("함수",시간);
해제 : clearTimerout(변수);
setTimeout() : 특정 시간에 1회 실행
setInterval() : 반복 실행
clearTimeout() : 1회 실행 중지
clearInterval() : 반복 실행 중지

resizeBy() : 특정 만큼 사이즈 조절
resizeTo() : 절대 위치로 사이즈 조절
moveBy(x값, y값) : 특정 크기만큼 이동
moveTo() : 절대 위치로 이동

scrollBy() : 절대 위치로 스크롤 조절
srcrllTo() : 특정 크기만큼 스크롤 조절

Location 객체
window.location 프로퍼티
윈도우에 로드된 웹 페이지의 URL정보를 나타내주는 객체

http://(프로토콜)www.mysite.com(호스트명):8080(포트)/content/(프로젝트)/(서브경로)/intro.html(파일)
href : URL 전체 이름
host : 도메인과 포트번호를 포함하는 웹서버주소
pathname : 디렉터리 문자열
~

.selectedIndex : 배열의 객체가 가지고 있는 선택된 값
assign() : 새로운 웹페이지를 로드한다.
reload() : 다시 로드한다.
replace() : 현재 페이지를 제거하고 새로운 페이지를 롣한다.

- window.location = "http://www.naver.com";
- window.location.href = "http://www.naver.com";
- window.location.assign("http://www.naver.com");
- window.location.replace("http://www.naver.com");

- var win = window.open();
	win.location="http://www.naver.com";

[이미지]
출력과정은 2과정으로 분류된다.
- 로딩과정
- 출력과정
해당 과정이 완료되기 전에 이미지 속성을 불러올 시 오류가 날 수 있기 때문에 onload(로딩이 끝날 경우)를 활용해서 처리한다.

(나쁜 예시)
var img = document.getElementById('img');
img.src = "a.png"; //로딩
var width = img.width; //읽기

(좋은 예시1)
var img = document.getElementById('img');
img.onload = function(e){ //이벤트 리스너를 src보다 우선등록
var width = img.width;
}
img.src="a.png"; //로딩

(좋은 예시2)
var bananaImg = new Image();
bananaImg.src = "banana.png"; // 이미지를 로딩해서 저장해두는 목적으로 new Images()를 활용 // 출력은 <img>에서만 출력된다.

DOM트리 : 브라우저를 실행시 먼저 빈 Document객체를 생성 후 그 아래에 DOM객체들을 추가한다. 마지막으로 모든 DOM객체 추가시 각 태그들을 DOM트리 구조로 구성한 것
(BOM객체)
Window (브라우저의 최상위)
document (DOM트리의 최상위 객체)
(DOM객체)
html
- head
meta
title
- body
...

[document개요] Document Object Model
- DOM트리의 최상위 객체이다.
> DOM객체는 아니다.
> HTML문서를 대변하는 객체이다. HTML문서의 전반적인 속성을 나타낸다.
> DOM객체를 접근하는 시작점이다.
* 접근 : window.document, document

- 프로퍼티, 메서드
> location : 현재 문서의 URL정보를 가진 location객체의 레퍼런스
> domain : 서버의 도메인 이름
> cookie : 서버의 쿠키
> lastModified : 마지막 수정날짜
~
> documentElement : html객체애 대한 레퍼런스
> title : 문서의 title
> body : 문서의 body
> head : 문서의 head
> activeElement : 포커스를 받는 객체

> images : img 컬렉션
> links : a, area 들의 컬렉션
> forms : form 컬렉션
~	 : 문서 내의 모든 해당요소 객체들의 컬렉션

[Array : 배열]
여러개의 원소를 연속적으로 저장하고 전체를 하나로 단위로 다루는 데이터 구조

- 특징 :
> 크기가 가변적이다.
> 데이터 타입을 혼합하여 사용할 수 있다.(정수, 실수, 문자, 함수, 객체 등)

- 구현 :
> [ ] : var 변수 = ['내용1', '내용2', '내용3' ...];
> new Array() : 값을 지정하여 배열 생성이 가능하나 가변적으로 더 추가가 가능하다.

- 주요메서드
> concat(arr) : 현재 배열에 arr배열을 추가하여 새로운 배열을 반환
> join("구분자") : 모든 원소를 구분자로 연결해서 하나의 문자열로 반환
> slice(시작, 끝) : 시작~끝-1 까지 반환
> reverse() : 역순으로 재 배열
> sort() : 정렬
> toString() : ' , '로 연결해서 하나의 문자열로 반환
> 변수명.length : 배열의 길이 반환

* 인덱스로만 저장이 되있으면 단순히 for문 혹은 변수명으로 전체 출력이 가능하나 인덱스부분에 name을 활용하여 데이터를 저장했을 경우 for(var 변수명 in 출력대상){ document.write(출력대상[변수명]) } 으로 전체 출력이 가능하다.
> 객체에 있는 모든 데이터 출력
for(var key in 객체명){구현부}
key 작성 시 key 반환
객체명[key] 작성 시 해당 value을 반환

* 인덱스 부분에 name 활용하여 저장시 "1" 등 문자열로 숫자를 저장하는 경우 문자열이 아닌 인덱스 1로 취급하여 저장한다. (내부 데이터가 바뀔 수 있음 주의)

[Date : 날짜와 시간]
- 생성
new Date( );

- 주요메서드
> getFullYear( )  : 현재 연도 4자리를 반환(브라우저에 따라 1900을 더해줄 필요가 있음)
> getMonth( ) : 현재의 월을 반환(0~11의 숫자, 0=1월)
> getDate( ) : 현재의 일자를 반환(1~31)
> getDay( ) : 현재의 요일을 숫자로 반환(0=일요일)
> getHours( ) : 현재의 시간을 반환(0~23까지)
> getMinutes( ) : 현재의 분을 반환
> getSeconds( ) : 현재의 초 를 반환
> getTime( ) : 1970.01.01 00:00:00부터 현재까지 경과한 시간을 1/1000초 단위로 된 값 반환

[String : 문자열]
- 문자열을 다루는데 가장 많이 사용되는 객체
- 일단 생성된 문자열은 수정이 불가하다.(java와 같음/메서드를 활용시 기존값은 수정되지 않는다.)
- [] 연산자에 인덱스를 활용해서 각각의 문자에 접근할 수 있다.(배열과 같음)

- 주요 기능 메서드
> length() : 문자의 길이를 반환
> charAt(index) : 해당하는 인덱스의 문자값을 반환
> charCodeAt(index) : 해당하는 인덱스의 문자 유니코드 값을 반환
> concat(s1, s2 .. ) : 현재 문자열 뒤에 s1, s2 .. 새로운 문자열을 추가하여 리턴
> indexOf(s) : s가 처음 나타나는 index를 반환
> replace(a, b) : a를 찾아서 b로 변경한 뒤 새로운 문자열을 리턴
> slice(indexA, indexB) : A~B-1까지 문자열을 리턴
> substr(index, len) : index부터 len갯수만큼 문자열을 리턴한다.(기존 값 변경 없음)
> substring(indexA, indexB) : A~B-1까지 문자열을 리턴
> trim() : 공백문자를 제거
> toLowerCase() : 소문자로 변경한다.
> toUpperCase() : 대문자로 변경한다.
> split( ) : 주어진 기준으로 배열로 만들어 반환

-글꼴/속성 관련 메서드
big( ) : 한단계 크게 (=</big>)
small( ) : 한단계 작게 (=</small>)
bold( ) : 굵게 (=</b>)
italics( ) : 이태릭체로 (=</i>)
strike( ) : 가운데 줄 (=</strike>)
sub( ) : 아래 첨자 (=</sub>)
sup( ) : 위 첨자 (=</sup>)

fontcolor(색상) : 글자의 색상 지정 (=<font color>)
fontsize(크기) : 글자의 크기 지정 1~7까지 (=<font size>)

anchor(이름) <<<<<< link("#이름") : link로 이동한다.
link("URL") : URL로 이동할 수 있도록 해준다.(=</a>)

[Math : 수학계산 관련 객체]
- new 연산자를 사용하지 않는 static객체다.

- 속성
> E : 자연로그 밑에 있는 오일러 상수
> LN10 : 10의 자연로그
> LN2 : 2의 자연로그
> PI : 원주율
> SQRT1_2 : 1/2의 제곱근
> SQRT2 : 2의 제곱근

- 주요메서드
> ceil(n) : n을 올림한다.
> floor(n) : n을 내림한다.
> round(n) : n을 반올림한다.
> max(n, m) : 두 개(n, m) 중 큰 수
> min(n, m) : 두 개(n, m) 중 작은 수
> pow(n, m) : n의 m승
> exp(n) : e의 n승
> abs(n) : n의 절대값
> sqrt(n) : n의 제곱근
> sign(n) : 사인
> cos(n) : 코사인
> tan(n) : 탄젠트

> random( ) : 0부터 1미만의 랜덤 소수

[그래픽 - 캔버스(canvas)]
HTML5에 추가된 새로운 태그
자바스크립트 코드로 웹 페이지에 자유롭게 그래픽을 그릴 수 있는 기능

- 기능 : 도형, 글자그리기, 이미지그리기, 그래프, 애니메이션, 대형게임, 지도 ...
- 웹 표준
- 비트맵 방식으로 처리됨으로 매우 빠르다.

구현 : </canvas>
*지원되지 않는 브라우저가 있을 수 있기 때문에 안의 내용에는 "지원되지 않습니다."라고 작성하기
1. 캔버스 영역설정
2. 캔버스 DOM객체를 가져온다.
3. DOM객체 속에서 context객체를 가져온다.
4. context 객체를 이용해서 그린다.
> 경로를 모아서 한번에 그린다.
> 바로 그린다.

- 속성(프로퍼티)
> width, height, style
> getContext('2d')
* 그리기 도구를 가져온다.
* 3d도 있음

- context 객체의 속성(프로퍼티)
> moveTo() : 이동
> strokeStyle= : 선의 색상
> fillStyle =: 채우기 색상
> lineWidth= : 선의 두께 (정수값 입력)
> canvas.width : 캔버스의 폭
> canvas.height : 캔버스의 높이

경로를 이용해서 그리기
> beginPath() : 빈 경로를 가져와서 새로 시작(한번 더 실행 시 기존의 경로가 초기화 됨)
> closePath() : 처음으로 돌아가며 경로를 닫아준다.
> stroke() : 외곽선만 그린다. (마지막)
> fill() : 채워서 그린다. (마지막)

도형 그리기
> lineTo() : 선 그리기
> rect(시작x좌표,시작y좌표,폭,높이) : 사각형
> arc(원의중심x좌표,원의중심y좌표,반지름의길이,시작각도,끝각도,그리는방향) : 원, 원호
* 시작각 : 3시방향이 0, 360도(1바퀴) 2파이(2*Math.Pi), 단위는 파이
* 방향 : true : 역방향, false: 시계방향
> strokeRect() : 사각형을 그린다.
> fillRect() : 사각형을 채워서 그린다.
> fillArc() : 원을 채워서 그린다.
> clearRect() : 사각형의 영역을 지운다.
> clearArc() : 원, 원호의 영역을 지운다.

문자열 그리기
- 텍스트는 경로와 무관하게 바로 그려진다.
> strokeText("str", x , y [,maxWidth]) : 텍스트를 그린다.
> fillText("str",x좌표,y좌표) : 텍스를 채워서 그린다.
> font : 글씨체, 글자 크기
> textAlign : 글자의 정렬
> strokeStyle : 선의 색상

이미지 그리기
1. 이미지 객체를 만든다.
var img = new Image();
2.  이미지 소스를 부여한다.
img.src = "images/elsa.png";
3. 이미지가 로드되면 실행할 명령을 부여한다.
img.onload = function(){
context.drawImage(img,0,0,canvas.width,canvas.height);
}

> drawImage(img객체, x, y [, w, h]) : 이미지를 그린다.
> drawImage(img객체, sx, sy, sw, .sh, dx, dy, dw, dh) : 소스에서 좌표값을 설정 후 그릴 영역을 설정 


[Tip]
this : 자기자신을 가르키는 key / 함수 내에서 사용시 함수 자신이 아닌 객체 자체를 뜻한다.
스타일을 태그 안에서 인라인 방식으로 이벤트 스타일을 지정할 수도 있습니다.


셀렉트된 value 가져오기
var ori = document.getElementById('orientation');
var index = ori.selectedIndex;
var orientation = ori.options[index].value;

[주요 메서드]

document.write(" ") : html태그를 작성할 수 있다.(줄바꿈 미적용)
prompt("표시값", "초기값") : 문자열을 입력받아서 리턴해준다. 미입력시 "" 반환, 취소 또는 강제종료시 null 반환 (초기값 생략가능)
*prompt로 반환받는 값은 값에 상관없이 문자열이다. 다른 타입으로 반환받으려면 형변환 해주어야 한다.
confirm() : 확인다이얼로그 (true 또는 false값 반환)
alert() : 경고다이얼로그
console.log(" ") : (콘솔 작업시)콘솔로 출력
parseInt( ) : 데이터를 숫자로 형변환
parseFloat( ) : 데이터를 실수로 형변환
typeOf 데이터 : 데이터타입을 반환
document.querySelectorAll('명령어') : 문서 내 명령어 전체 선택
*배열과 비슷한 형태로 반환
eval("문자열") : 수식형태의 문자열을 계산하여 실수 값으로 반환
ifFinite( ) : 숫자면 true, 문자열 false 반환
isNaN( ) : 문자열 true, 숫자면 false 반환
System.exite(0) : 프로그램 종료
toFixed(2) : 소수점 2자리까지 표시
location.href='주소' : 해당 주소의 페이지로 이동한다.

객체의 상위개념으로 scr(소스 파일)이 있다. 해당 파일을 불러오는 것으로 같은 내용을 반복적으로 적용할 수 있다.

[특수문자(Escape sequence)]
특수문자는 반드시 \(역슬래시)와 함께 사용

\n : 개행문자
\t : tab 출력
\b : 커서를 앞으로 한칸 이동
\r : 해당 줄의 처음으로 이동
\", \' \\: " or ' or \ 출력

[라이브러리와 프레임워크]

라이브러리 : 완성품
프레임워크 : 인터페이스

자바스크립트 라이브러리
jQuery 다운로드 받기
혹은 CDN를 사용/스크립트 소스를 사용
$() jQuery의 적용태그

[Tip]
parameter : 매개변수(값을 전달해주는 변수)
argument : 입력 값

* JSP의 QueryString을 JavaScript에서 받아 사용하기
1. 넘어온 QueryString을 받아 변수에 저장
* String JSP변수명 = request.getParameter("파라미터명");
2. JS에 해당 변수를 저장
var JS변수명 = '<%= JSP의변수명%>';
3. JS의변수명에 단어가 일치할 경우(넘겨준 값) alert 출력
if(JS의변수명 == 'true로설정할 값'){
alert("출력할 메세지"); }