<컬렉션 프레임웍(collections framework)>
컬렉션(collection) : 여러 객체(데이터)를 모아 놓은 것을 의미
프레임웍(framework) : 표준화, 정형화된 체계적인 프로그래밍 방식

컬렉션 프레임웍(collections framework)
- 컬렉션(다수의 객체)을 다루기 위한 표준화된 프로그래밍 방식
- 컬렉션을 쉽고 편리하게 다룰 수 있는 다양한 클래스를 제공
- 자료구조를 제네릭기법으로 구현한 컬렉션 클래스들이다.
- 객체들만 저장이 가능한 가변크기를 제공하는 클래스들을 제공
* java.util패키지에 포함. JDK1.2부터 제공

**전체**
ArrayList는 배열기반의 List, 이를 이용해 Stack을 이용 배열은 추가, 삭제기능이 약하기에 LinkedList 연결기반이 있으며 이는 Queue로 사용할 수 있다.
배열의 뛰어난 검색기능을 활용하여 HashMap이다. (배열과 LinkedList의 장점결합)
LinkedList의 연결기반을 활용한 TreeMap이 있으며, 이는 검색, 범위검색, 정렬기능을 향상 시켰다.(중위순회하면 정렬됨)
HashSet과 TreeMap의 Key부분만 발췌하여 만든것이 HashSet과 TreeSet이 된다.
HashMap에서 파일의 읽기와 쓰기가 용이해지는 Properties도 있다.
순서유지 기능을 향상시킨 것으론 LinkedHashMap, LinkedHashSet이 있다.

<컬렉션 클래스(collection class)>
다수의 데이터를 저장할 수 있는 클래스(ex, Vector, ArrayList, HashSet)
default로 10개의 공간이 있으며 초과될 때 5개씩 추가되어 자동적으로 공간이 생성된다.

- 컬렉션 프레임웍의 핵심 인터페이스
List(목록) : 순서가 있는 데이터의 집합, 중복허용, 배열을 가변화 할 수 있도록 구현 // ArrayList, LinkedList, Stack, Vector 등
Set(집합) : 순서를 유지하지 않는 데이터의 집합. 중복비허용 // HashSet, TreeSet 등
Map(표) : 키(key)와 값(value)의 쌍(pair)으로 이루어진 데이터의 집합 순서는 유지되지 않으며, 키는 중복을 허용하지 않고, 값은 중복을 허용한다. // HashMap, TreeMap, Hashtable, Properties 등

- Collection 인터페이스의 주요 메서드
> boolean add(Object o) or boolean addAll(Collection c) : 지정된 객체(o) 또는 Collection(c)의 객체들을 Collection에 추가
> void clear( ) : Collection의 모든 객체 삭제
> boolean contains(Object o) or boolean containsAll(Collection c) : 지정된 객체(o) 또는 Collection의 객체들이 Collection에 포함되어 있는지 확인
> boolean equals(Object o) : 동일한 Collection인지 비교
> int hashCode( ) : Collection의 hashCode를 반환
> boolean isEmpty( ) : Collection이 비어있는지 확인
> Iterator iterator( ) : Collection의 Iterator를 얻어서 반환
> boolean remove(Object o) : 지정된 객체 삭제
> boolean removeAll(Collection c) : 지정된 Collection에 포함된 객체들을 삭제
> boolean retainAll(Collection c) : 지정된 Collection에 포함된 객체만을 남기고 다른 객체들을 삭제, 이 작업으로 인해 Collection에 변화가 있으면 true 그렇지 않으면 false
> int size( ) : Collection에 저장된 객체 수 반환
> Object[ ] toArray( ) : Collection에 저장된 객체를 객체비열(Object[ ])로 반환
> Object[ ] toArray(Object[ ] a) : 지정된 배열에 Collection의 객체를 저장해서 반환

- Collections 컬렉션을 채우기 위한 static메서드
> fill( ) : 채우기
> binarySearch(v, 위치) : 검색 후 인덱스 반환
> synchronized*( ) : 컬렉션 동기화
*List syncList - Collections.synchronizedList(new ArrayList( . . .));
> unmodifiable*( ) : 읽기전용 컬렉션으로 만들기
> singleton*( ) : 싱글톤 컬렉션 만들기 // 객체 1개만 저장(Set은 singleton으로 끝남 singletonset이 아님)
> checked*( ); : 한 종류의 객체만 저장하는 컬렉션 만들기
* List checkedList = checkedList(list, String.class) ; // String타입만 저장가능
> addAll(v, value) : 데이터 추가(가변인자)
> rotate(v, 이동할 수치) : 반시계방향으로 수치만큼 이동(회전)
> swap(v, 자릿수, 자릿수) : 자리 교환
> shuffle(v) : 임의 자리배치
> sort( ) : 정렬
> sort(v, reverseOrder( )) : 역순 정렬 reverse(v)와 동일
> max( ), min( ) : 최댓값, 최소값
> nCopies(v.size( ), value) : 해당 컬렉션의 동일한 사이즈의 컬렉션을 생성 후 value로 채운다
> disjoint(v1, v2) : 두 객체를 비교 후 공통요소가 없으면 true/ 있으면 false
> copy( v1, v2) : v2의 value를 v1에 복사
> repLaceAll(v, 변경전 값, 변경후 값) : 변경 전 값을 변경 후 값으로 치환
> enumeration(v) : iterator와 사용방법 및 결과 동일

<List인터페이스(ArrayList, LinkedList)>

- List 인터페이스의 주요 메서드
> void add(int index, Object element) or boolean addAll(int index, Collection c) : 지정된 위치(index)에 객체(element) 또는 컬렉션에 포함된 객체들을 추가
> Object get(int index) : 지정된 위치(index)에 있는 객체를 반환
> int indexOf(Object o) : 지정된 객체의 위치(index)를 반환(정방향 검색)
> int lastIndexOf(Object o) : 지정된 객체의 위치(index)를 반환(역방향 검색)
> Listlterator listlterator( )
> Listlterator listlterator(int index) : List의 객체에 접근할 수 있는 Listlterrator를 반환
> Object remove(int index) : 지정된 위치(index)에 있는 객체를 삭제하고 삭제된 객체 반환
> Object set(int index, Object element) : 지정된 위치(index)에 객체(element)를 저장
> void sort(Comparator c) : 지정된 비교자(Comparator)로 List를 정렬
> List subList(int formIndex, int toIndex) : 지정된 범위(formIndex부터 toIndex)에 있는 객체 반환

<ArrayList>
ArrayList는 기존의 Vector를 개선한 것으로 구현원리와 기능적으로 동일
Vector와의 차이는 속도가 조금 더 빠르고, 자체 동기화 처리의 유무이다. (동기화는 설정이 가능하다)
List인터페이스를 구현하므로, 저장순서가 유지되고 중복을 허용한다
검색할 때 null값이 있을 수 있고, null이 요소의 개수에 포함된다.
데이터의 저장공간으로 배열을 사용한다.(배열기반)

- ArrayList의 생성자
> ArrayList( ) : 기본생성자
> ArrayList(Collection c) : Collection 객체를 ArrayList로 생성
> ArrayList(int initialCapacity) : 배열의 길이를 설정

- Arrays의 주요메서드
> void trimToSize( ) : 빈공간 제거
*중간에 저장된 객체를 삭제하는 경우 남은 공간을 다시 채워주기 위해 데이터가 이동하는 과정이 있음

> toString( ) : 배열의 출력
static String toString(타입[] a)

> copyOf( ), copyOfrange( ) : 배열의 복사
Arrays.copyOf(복사대상, 길이);
Arrays.copyOfRange(복사대상, 부터, 까지);

> fill( ), setAll( ) : 배열 채우기
Arrays.fill(채울대상, 값);
Arrays.setAll(채울대상, (i) -> (int)(math.random( )*5)+1); //람다식

> sort( ), binarySearch( ) : 배열의 정렬과 검색
Arrays.sort(대상 배열);
Arrays.binarySearch(찾을 배열, 찾을 값);
*binarySearch( )는 이진탐색이기에 정렬필수
*순차검색 : 순서대로 하나씩 검색
*이진검색 : 정렬된 값을 양분하여 찾을 값과 비교하면서 검색범위를 좁혀감

> deepToString( ) : 다차원 배열의 출력
Arrays.deepToString(다차원배열);

> deepEquals( ) : 다차원 배열의 비교
Arrays.deepEquals(비교할 다차원배열1, 비교할 다차원배열2);

> asList(Object...a) : 배열을 List로 변환 (가변 매개변수) // 읽기전용
Arrays.asList(1,2,3,4,5);

> parallel*( ), spliterator( ), stream( ) :람다와 스트림


- 배열의 장단점
장점 : 배열은 구조가 간단하고 데이터를 읽는 데 걸리는 시간(접근시간, access time)이 짧다.
단점 : 크기를 변경할 수 없다.
비순차적인 데이터의 추가, 삭제에 시간이 많이 걸린다.

<LinkedList (배열의 단점을 보완)>
배열과 달리 LinkedList는 불연속적으로 존재하는 데이터를 연결(Link)
장점
데이터의 삭제 : 단 한번의 참조변경만으로 가능
데이터의 추가 : 한번의 Node객체 생성과 두 번의 참조변경만으로 가능
단점
데이터 접근성이 나쁨

<doubly linked list - 이중 연결리스트, 접근성 향상(Linked Lsit의 개선)>

<doubly circular linked list - 이중 원형 연결리스트>

<스택과 큐(Stack & Queue)>
스택 : LIFO구조. 마지막에 저장된 것을 제일 먼저 꺼낸다.(Last In First Out) * ArrayList
큐 : FIFO구조. 제일 먼저 저장한 것을 제일 먼저 꺼낸다.(First In First Out)* LinkedList

<Stack 클래스 (Collection 인터페이스의 메서드 사용 가능)>
- Stack클래스의 주요메서드
> Object peek( ) : Stack의 맨 위(나중)에 저장된 객체를 반환. pop( )과 달리 Stack에서 객체를 꺼내지는 않음.(비었을 경우 EmptyStackException)
> Object pop( ) : Stack의 맨 위에 저장된 객체를 꺼낸다.
> Object push(Object item) : Stack에 객체(item)를 저장
> int search(Object o) : Stack에서 주어진 객체(o)를 찾아서 그 위치를 반환. 못찾으면 -1(배열과 달리 0이 아닌 1부터 시작)

<Queue *인터페이스* (Collection 인터페이스의 메서드 사용 가능/LinkedList에서 구현함  )>

- 예외 미발생(선호)
> boolean offer(Object o) : Queue에 객체를 저장. 성공 true, 실패 false
> Object poll( ) : Queue에서 객체를 꺼내서 반환. 비어있을 경우 null
> Object peek( ) : 삭제없이 요소를 읽어온다. Queue가 비었을 경우 null

- 예외 발생
> boolean add(Object o) : 지정된 객체를 Queue에 추가. 성공하면 true, 저장공간이 부족하면 lllegalStateException발생
> Object remove( ) : Queue에서 객체를 꺼내 반환.비어있을 경우 NosuchElementException
> Object element( ) : 삭제없이 요소를 읽는다. peek와 달리 Queue가 비었을 때 NoSuchElementException

<Set 인터페이스 : HashSet TreeSet>
Collection과 메서드가 동일하다.
집합과 관련된 메서드가 많으며 전부 true와 false로 반환하고 이는 Collection에 변화가 있으면 ture 그렇지 않으면 false를 반환

HashSet : Set인터페이스를 구현한 대표적인 컬렉션 클래스
순서를 유지하려면 LinkedHashSet클래스를 사용
TreeSet : 범위 검색과 정렬에 유리한 컬렉션 클래스
HashSet보다 데이터 추가, 삭제에 시간이 더 소요됨

- HashSet 생성자(*컬렉션의 메서드 사용가능)

HashSet( )
HashSet (Collection c) : 생성자
HashSet (int initialCapacity)
HashSet (int initialCapacity, float loadFactor) : 초기용량(loadFactor는 생략가능, 용량 확장 시기 결정 0~1)

- Set은 순서를 유지하지 않기 때문에 정렬불가, 정렬을 하려면 Set을 List로 저장 후 정렬
*대부분의 컬렉션 자손들은 생성자에 다른 컬렉션 개체를 받도록 되어있어서 다른 클래스로의 변환이 간단하다

- HashSet은 객체를 저장하기 전에 기존에 같은 객체가 있는지 확인
같은 객체가 없으면 저장, 있으면 저장하지 않는다.
boolean add(Object o)는 저장할 객체의 equals( )와 hashCode( )를 호출(**equals( ), hashCode( )가 오버라이딩 되어 있어야함**)
* equals( )오버라이딩
public boolean equals(Object obj){
if(!(obj instanceof Class명)) return false;
Class명 tmp = (클래스명)obj;
return iv1.equals(tmp.iv1) && iv2==tmp.iv2;
* 객체 자신과 매개변수와 비교
public int hashCode( ){
return Objects.hash(iv1, iv2);

- TreeSet 범위탐색 정렬
이진 탐색 트리(binary search tree)로 구현. 범위탐색과 정렬에 유리(*자동 정렬)
이진 트리는 모든 노드가 촤대 2개의 하위 노드를 갖음
부모보다 작은 값은 왼쪽, 큰 값은 오른쪽에 저장
데이터가 많아질 수록 추가, 삭제에 시간이 더 걸림(비교횟수 증가)
각 요소(node)가 나무(tree)형태로 연결(LinkedList의 변형)
class TreeNode {
TreenNode left; // 왼쪽 자식노드
Object element; // 저장할 객체
TreeNode right; // 오른쪽 자식노드

- TreeSet 데이터 저장과정
TreeSet에 7,4,9,1,5의 순서로 데이터를 저장하면
루트부터 트리를 따라 내려가며 값을 비교. 작으면 왼쪽 크면 오른쪽에 저장하는 과정을 거친다

- TreeSet 생성자
TreeSet( ) : 기본 생성자
TreeSet(Collection c) : 주어진 컬렉션을 저장하는 TreeSet을 생성
TreeSet(Comparator comp) : 주어진 정렬기준으로 정렬하는 TreeSet을 생성

- TreeSet 메서드(*컬렉션 인터페이스의 메서드 사용가능)
> Object first( ) : 정렬된 순서에서 첫 번째 객체를 반환(가장 작음)
> Object last( ) : 정렬된 순서에서 마지막 객체를 반환(가장 큼)
> Object ceiling(Object o) : 지정된 객체와 같은 객체를 반환, 없으면 작은 값을 가진 객체 중 제일 가까운 값의 객체를 반환. 없으면 null
> Object floor(Object o) : 지정된 객체와 같은 객체를 반환, 없으면 작은 값을 가진 객체 중 제일 가까운 값의 객체를 반환. 없으면 null
> Object higher(Object o) : 지정된 객체보다 큰 값을 가진 객체 중 제일 가까운 값의 객체를 반환. 없으면 null
> Object lower(Object o) : 지정된 객체보다 작은 값을 가진 객체 중 가장 가까운 값의 객체를 반환. 없으면 null
> SotedSet subSet(Object fromElement, Object toElement) : 범위 검색(fromElement와 toElement사이)의 결과를 반환.(끝 범위인 toElement는 범위에 포함되지 않음)
> SotedSet headSet(Object toElement) : 지정된 객체보다 작은 값의 객체들을 반환
> SotedSet tailSet(Object fromElement) : 지정된 객체보다 큰 값의 객체들을 반환

- 트리 순회(tree traversal)
이진 트리의 모든 노드를 한번씩 읽는 것

<Map인터페이스>

- Map 인터페이스의 주요 메서드
> boolean containsKey(Object key) : 지정된 key객체와 일치하는 Map의 key객체가 있는지 확인
> boolean containsValue(Object value) : 지정된 value객체와 일치하는 Map의 value객체가 있는지 확인
> Set entrySey( ) : Map에 저장되어 있는 key-value쌍을 Map.Entry타입의 객체로 저장한 Set으로 반환
> Object get(Object key) : 지정한 key객체에 대응하는 value객체를 찾아서 반환
> Set keySet( ) : Map에 저장된 모든 key객체를 반환
>  Object put(Object key, Object value) : Map에 value객체를 key객체에 연결(mapping)하여 저장한다.
> void putAll(Map t) : 지정된 Map의 모든 key-value쌍을 추가한다.
> Collection values( ) : Map에 저장된 모든 valu객체를 반환

<HashMap과 Hashtable>
Map인터페이스를 구현, 데이터를 키와 값의 쌍으로 저장
HashMap은 Hashtable의 개선버전(동기화 차이)

<HashMap>
Map인터페이스를 구현한 대표적인 컬렉션 클래스
순서를 유지하려면 LinkedHashMap클래스를 사용
<TreeMap>
범위 검색과 정렬에 유리한 컬렉션 클래스
HashMap보다 데이터 추가, 삭제에 시간이 더 걸림

- HashMap의 키(key)와 값(value)
해싱(hashing)기법으로 데이터를 저장. 데이터가 많아도 검색이 빠르다
Map인터페이스를 구현. 데이터를 키와 값의 쌍으로 저장
Key : 컬렉션 내의 키(key)중에서 유일해야함
value : 키(key)와 달리 데이터의 중복을 허용

HashMap map = new HashMap( );
map.put("Key", "value");

Entry[ ] table;
class Entry{
Object key;
Object value; }

- 해싱(hashing)
해쉬함수(hash function)로 해시테이블(hashtable)에 데이터를 저장/검색
Hashtable은 배열과 LinkedList가 조합된 형태(배열의 접근성, LinkedList의 변경유리를 조합)

- HashMap 생성자
> HashMap( ) : 기본 생성자
> HashMap(int initialCapacity)
> HashMap(int initialCapacity, float loadFactor) : 초기용량(loadFactor는 생략가능, 용량 확장 시기 결정 0~1)

- HashMap 주요 메서드
> HashMap(Map m) : 다른 Map을 HashMap으로 변환
> Object put(Object key, Object value) : 데이터 저장
> void putAll(Map m) : Map의 데이터를 저장
> Object remove(Object key) : 해당 데이터을 삭제
> Object replace(Object key, Object value)
> boolean replace(Object key, Object oldValue, Object newValue) : 지정된 데이터 변경
> Set entrySet( ) : key&value의 쌍을 반환
> Set keySet( ) : HashMap에 있는 모든 키를 담은 Set 컬렉션 객체를 리턴 해준다.
> collection values( ) : value을 반환
> Object get(Object key) : 해당 key의 value반환
> Object getOrDefault(Object key, Object defaultValue) : 해당 key의 값이 없을 경우 > Object defauktValue에 입력된 데이터를 반환
> boolean containsKey(Object key) : 해당 Key 데이터의 유무 확인
> boolean containsValue(Object value) : 해당 value 데이터의 유무 확인
> int size( ) : Map의 길이 반환
> boolean isEmpty( ) : Map이 비었는지 반환
> void clear( ) : Map 내부 데이터 삭제
> Object clone( ) : Map데이터 복사
*Map 인터페이스의 내부에는 Entry 인터페이스가 정의되어 있다.

- 데이터 내 중복된 수치 확인
1. 최초 데이터는 value 1로 저장
2. 이후 중복 데이터 확인시 value값에 +1하여 저장

<Iterator, ListIterator, Enumeration>
컬렉션에 저장된 데이터를 접근하는데 사용되는 인터페이스
* Enumeration는 Iterator의 구버전
* ListIterator는 Iterator의 접근성을 향상(양방향) 

- Iterator 사용
요소가 순서대로 저장된 컬렉션에 저장된 요소들을 읽어오는 방법을 표준화 한것
컬렉션에 iterator( )를 호출해서 Iterator를 구현한 객체를 얻어서 사용
List list = new ArrayList( );//다른컬렉션으로 변경할땐 생성자만 변경하면 된다.
Iterator it = list.iterator( );
while(it.hasNext( )){
System.out.println(it.next( ));}
*Iterator는 일회용이라 사용 후 다시 객체생성이 필요

- Iterator의 주요 메서드
> boolean hasNext( ) : 읽어 올 요소가 남아있는지 확인한다. 있으면 true, 없으면 false
> Object next( ) : 다음 요소를 읽어 온다. next( )를 호출하기 전에 hasNext( )를 호출해서 읽어올 요소가 있는지 확인하는 것이 안전하다.
> void remove( ) : next( )로 읽어 온 요소를 삭제한다. next( )를 호출한 다음에 remove( )를 호출해야한다.(선택적 기능)
> void forEachRemaining(Consumer<? super E> action) : 컬렉션에 남아있는 요소들에 대해 지정된 작업(action)을 수행한다. 람다식을 사용하는 디폴트 메서드(JDK1.8~)

- Map과 Iterator
Map에는 iterator( )가 없다. keySet( ), entrySet( ), values( )를 호출해서 사용
Map map = new HashMap( );
Iterator it = Map.entrySet( ).iterator( );

<Comparator, Comparable>
객체 정렬에 필요한 메서드(정렬기준 제공)를 정의한 인터페이스
* Comparable : 기본 정렬기준을 구현하는데 사용
* Comparator : 기본 정렬기준 외에 다른 기준으로 정렬하고자할 때 사용

<Comparator, Comparable의 주요 메서드>
- int compare(Object o1, Object o2) : 두 객체 비교
(양수=왼쪽이 큼, 0=같다, 음수 = 오른쪽이 큼)

- int compareTo(Object o) : 주어진 객체(o)를 자신(this)과 비교
*추상메서드의 구현 예시
public int compareTo(Integer anotherInteger){
int v1 = this.vlaue;
int v2 = anotherInteger.value;
return (v1<v2 ? -1 : (v1==v2 ? 0 : 1));
*역순 정렬시 비교대상의 순서를 변경하거나 -1을 곱한다.
*정렬 방법은 불변이므로 신경x 기준만 제공해주면 됨