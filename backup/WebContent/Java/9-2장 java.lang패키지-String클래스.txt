<String클래스>
String클래스 = 데이터(char[]) + 메서드(문자열 관련)
내용을 변경할 수 없는 불변(immutable) 클래스
덧셈 연산자(+)를 이용한 문자열 결합은 성능이 떨어짐
문자열의 결합이나 변경이 잦다면, 내용의 변경이 가능한 StringBuffer 혹은 StringBulider를 사용
문자열 생성시 String리터럴 과 String객체 타입으로 생성할 수 있다.

- String 리터럴과 객체타입
1. String 리터럴 : 자바 내부적으로 '러터럴 테이블'로 관리되어지며, 동일한 리터럴은 공유하여 사용한다.
* String str1 = "abc"

2. String 생성자 : new String( ) 등으로 생성된 String 객체, 같은 문자열이어도 내부주소는 다르다.
* String str2 = new Sting("abc")

* 리터럴로 값을 넣은 문자열들은 같은 주소값을 가지지만 new연산자를 이용한 객체생성시 매번 다른 객체가 생성됨
* 등가 비교 연산자 (==)는 주소 비교임 문자열 비교시에는 equals임을 잊지말자
* 문자열 리터럴
문자열 리터럴은 프로그램 실행시 자동으로 생성된다.(constant pool에 저장)

<빈 문자열 (" ", empty string)>
내용이 없는 문자열. 크기가 0인 char형 배열을 저장하는 문자열 (null과 다르다)
String str = " " ; // str을 빈 문자열로 초기화
크기가 0인 배열을 생성하는 것은 어느 타입이나 가능
char[ ] chArr = new char[0]; // 길이가 0인 char 배열
int[ ] iArr = { }; //길이가 0인 int배열

- 문자(char)와 문자열(String)의 초기화
> 변수 선언 시
String s : null 값으로 저장됨
char c : '\u0000' 값으로 저장됨

> 빈 문자열로 초기화한다.
String s = " "; // 빈 문자열로 초기화
char c = ' '; // 공백으로 초기화

<String클래스의 생성자>
1. 기본 생성자
* String str2 = new Sting("abc")

2. 배열을 사용한 생성자
* String(char[ ] value) : 주어진 문자열(value)을 갖는 String인스턴스를 생성한다.
char[ ] c = {'H', 'e', 'l', 'l', 'o'};
String s = new String(c); // s = "Hello"
*반대로 전환시 toCharArray( ) 사용

3. StringBuffer를 사용한 생성자
* String(StringBuffer buf) : StringBuffer인스턴스가 갖고 있는 문자열과 같은 내용의 String객체를 생성한다. (StringBuffer -> String 변환)
StringBuffer sb = new StringBuffer("Hello");
String s = new String(sb); // s = "Hello"
* 반대의 경우 StringBuffer의 생성자를 사용한다.

* String의 정의에 따른 구분
String을 null로 정의 : 객체형태로 정의
String을 ""(공백문자)로 정의 : 기본형으로 정의

<String클래스의 주요 메서드>
- String .replace(index, x) : 지정한 위치(index)에 있는 문자를 x로 변환 후 반환
String s1= "Heelo";
String s2 = s.replace(2, "l"); // s2 = "Hello"l 

- char .charAt(int index) : 지정한 위치(index)에 있는 문자를 알려준다.(index의 시작은 0)
String s = "Hello";
String n = "0123456";
char c = s.charAt(1);
char c2 = n.charAt(1); // c = 'e', c2 = '1'

- char[ ] .toCharArray() : 문자열을 문자배열(char[ ])로 변환해서 반환한다.

- int .compareTO(String str) : 문자열(str)과 사전순서로 비교한다. 같으면 0을, 사전순으로 이전이면 음수, 이후면 양수를 반환한다.(정렬 시 사용)
int i = "aaa".compareTo("aaa");
int i2 = "aaa".compareTo("bbb");
int i3 = "bbb".compareTo("aaa"); // i=0, i2=-1, i3=1

- String .concat(String str) : 현재 String 뒤에 문자열(str)을 추가하여 새로운 String 반환
String s = "Hello";
String s2 = s.concat(" World"); // s2="Hello World"

- boolean .contains(CharSequence s) : 지정된 문자열(s)이 포함되었는지 검사한다.
String s = "abcdefg";
boolean b = s.contains("bc"); // b= true
*CharSequence는 캐릭터타입을 활용하는 클래스들을 인터페이스로 묶어둔 것(CharBuffer, Segment, String, StringBuffer, StringBuilder)

- boolean .endsWith(String suffix) : 지정된 문자열(suffix)로 끝나는지 검사한다.(*반대의 경우 stratsWith( ) 사용)
String file = "Hello.txt";
boolean b = file.endsWith("txt");// b=ture

- boolean .equals(Object obj) : 매개변수로 받은 문자열(obj)과  String인스턴스의 문자열을 비교한다. obj가 String이 아니거나 문자열이 다르면 false를 반환한다. (String의 equals는 기본적으로 오버라이딩이 되어있다.)
String s = "Hello";
boolean b = s.equals("Hello");
boolean b2 = s.equals("hello");// b=ture, b2=false

- boolean .equalsIgnoreCase(String str) : 문자열과 String인스턴스의 문자열을 대소문자 구분없이 비교한다.
String s = "Hello";
boolean b = s.equalsIgnoreCase("HELLO");
boolean b2 = s.equalsIgnoreCase("heLLo"); // b=true, b2=true

- int .indexOf(int ch) : 주어진 문자(ch)가 문자열에 존재하는지 확인하여 위치(index)를 알려준다. 없다면 -1을 반환한다.(index의 시작은 0)
String s = "Hello";
int idx1 = s.indexOf('o');
int idx2 = s.indexOf('k'); // idx1=4, idx2=-1

- int .indexOf(int ch, int pos) : 주어진 문자(ch)가 문자열 어디에 위치(index)하는지 지정된 위치(pos)부터 확인하여 알려준다. 없다면 -1을 반환한다.(index의 시작은 0), (지정된 위치 이전 문자는 무시)
String s = "Hello";
int idx1 = s.indexOf('e', 0);
int idx2 = s.indexOf('e', 2); // idx1=1, idx2=-1

- int .indexOf(String str) : 주어진 문자열이 존재하는지 확인하여 그 위치(index)를 알려준다. 없으면 -1을 반환한다.(index의 시작은 0)
String s = "ABCDEFG";
int idx = s.indexOf("CD"); // idx = 2

- int .lastIndexOf(int ch) : 지정된 문자 또는 문자코드를 문자열의 오른쪽 끝에서부터 찾아서 위치(index)를 알려준다. 못찾으면 -1을 반환한다.
String s = "java.lang.Object";
int idx1 = s.lastIndexOf('.'); // idx1=9

- int .lastIndexOf(String str) : 지정된 문자열을 인스턴스의 문자열 끝에서 부터 찾아서 위치(index)를 알려준다. 못찾으면 -1을 반환한다.
String s = "java.lang.java";
int idx1 = s.lastIndexOf("java");
int idx2 = s.indexOf("java"); // idx1=10, idx2=0

- int .length( ) : 문자열의 길이를 반환
String s = "Hello";
int length = s.length( ); // length=5

- String[ ] .split(String regex) : 문자열을 지정된 분리자(regex)로 나누어 문자열 배열에 담아 반환한다.
String animals = "dog, cat, bear";
String[ ] arr = animakls.split( ", "); // arr[0]="dog", arr[1]="cat", arr[2]="bear"
*regex은 정규식을 대입한다

- String[ ] .split(String regex, int limit) : 문자열을 지정된 분리자(regex)로 나누어 문자열배열에 담아 반환한다. 단, 문자열 전체를 지정된 수(limit)로 자른다.
String animals = "dog, cat, bear";
String[ ] arr = animakls.split(", ", 2); // arr[0]="dog", arr[1]="cat, bear"

- boolean .startsWith(String prefix) : 주어진 문자열(prefix)로 시작하는지 검사한다.
String s = "java.lang.Object";
boolean b = s.startsWith("java");
boolean b2 = s.startsWith("lang"); // b=true, b2=false

- String .substring(int begin, int end) : 주어진 시작위치(begin)부터 끝 위치(end)범위에 포함된 문자열을 얻는다. 이 때 시작위치의 문자는 범위에 포함되지만, 끝 위치의 문자는 포함되지 않는다.(begin<=x<end), (int end 값은 생략가능)
String s = "java.lang.Object";
String c = s.substring(10);
String p = s.substring(5, 9); // c="Object", p="lang"

- String .toLowerCase( ) : String인스턴스에 저장되어 있는 모든 문자열을 소문자로 변환하여 반환한다.
String s = "Hello";
String s1 = s.toLowerCase( ); // s1="hello"

- String .toUpperCase( ) : String인스턴스에 저장되어 있는 모든 문자열을 대문자로 변환하여 반환한다.
String s = "Hello";
String s1 = s.toUpperCase( ); // s1="HELLO"

- String .trim( ) : 문자열의 왼쪽 끝과 오른쪽 끝에 있는 공백을 없앤 결과를 반환한다. 이 때 문자열 중간에 있는 공백은 제거되지 않는다.
String s = "  Hello World  ";
String s1 = s.trim( ); // s1="Hello World"

- static String.valueOf(Object o) : 지정된 값을 문자열로 변환하여 반환한다. 참조변수의 경우, toSting( )을 호출한 결과를 반환한다.
String b = String.valueOf(true); // b="true"
String c = String.valueOf('a'); // c="a"
String i = String.valueOf(100); // i="100"
String l = String.valueOf(100L); // l="100"
String f = String.valueOf(10f); // f="10.0"
String d = String.valueOf(10.0); // d="10.0"
java.util.Data dd = new java.util.Data( );
String data = String.valueOf(dd); // data="Wed Jan 27 21:26:29 KST 2016"

- static String.join("구분자", 배열명 ) : 여러 문자열 사이에 구분자를 넣어서 결합한다.

<문자열과 기본형 간의 데이터타입 변환>
- 숫자를 문자열로 변환
int i = 100;
String str1 = i = "";
String str2 = =String.valueOf(i);

- 문자열을 숫자로 바꾸는 방법
int i = Integer.parseInt("100");
int i2 = Integer.valueOf("100");
Integer i2 = Integer.valueOf("100");

- 문자열을 기본형으로 바꾸는 방법
래퍼클래스.parse기본클래스(String s)
래퍼클래스.valueOf(String s)
*같은 방법이나 valueOf(String s)가 더 간단한 방법이다