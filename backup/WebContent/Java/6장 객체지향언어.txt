<객체지향언어(Object-Oriented Programing)>
프로그래밍 언어+객체지향개념 규칙

- 객체지향언어의 특성
1. 캡슐화
2. 상속
3. 추상화
4. 다형성[중요]

- 클래스의 정의
객체를 정의해 놓은 것

- 클래스의 용도
클래스는 객체를 생성하는데 사용

- 객체의 정의
실제로 존재하는 것. 사물 또는 개념

- 객체의 용도
객체가 가지고 있는 기능과 속성을 사용하는 것
객체 : 모든 인스턴스를 대표하는 일반적 용어
속성(변수) + 기능(메서드)
인스턴스 : 특정클래스로부터 생성된 객체(Class.인스턴스)

<변수의 종류>
[클래스영역]
- 클래스 변수(Class Variable) : 클래스가 메모리에 올라갈 때(항상 사용가능)
- 인스턴스 변수(Instance Variable) : 인스턴스가 생성되었을 때(객체 생성 후 사용가능)

[그 외 영역(메서드, 생성자, 초기화 블럭 내부)]
- 지역 변수(Local Variable) : 변수 선언문이 선행되었을 때
*객체 사용시 클래스변수는 Class.Variable 으로 구분

<메서드>
문장들을 { }로 묶어놓은 것 / Class영역에서만 정의 가능

- 메서드 구성 : 선언부와 구현부로 이루어져있다.
[선언부] 반환타입(없을 경우 void 그 외 return 필수) 메서드이름 (타입 변수명, 등등) {
[구현부] 메서드 호출시 수행될 코드 }

- 메서드의 장점
1. 코드의 중복을 줄일 수 있다.
2. 코드의 관리가 쉽다.
3. 코드를 재사용할 수 있다.
4. 코드가 간결해서 이해하기 쉬워진다.

- 메서드의 구분
1. Static 메서드(Class매서드)
객체생성 없이 'Class.메서드이름()'으로 호출(항상 사용가능)
인스턴스 멤버(iv, im)와 관련없는 작업을 하는 메서드
메서드 내에서 인스턴스 멤버(iv, im) 사용불가

2. 인스턴스 메서드
인스턴스 생성후, '참조변수.메서드이름()'으로 호출(객체 생성 후 사용가능)
인스턴스 멤버(iv,im)와 관련된 작업을 하는 메서드
메서드 내에서 인스턴스 변수(iv) 사용가능

- 매개변수의 종류
기본형 매개변수 : 객체의 값만 제공(읽기만 가능)
참조형 매개변수 : 객체를 제공(읽기/쓰기 가능)

- 오버로딩(Overloading)
한 클래스 안에 같은 이름의 메서드 여러 개 정의하는 것(하나의 이름으로 다양한 기능을 적용)

> 오버로딩의 조건
1. 메서드 이름이 같아야 한다.
2. 매개변수의 개수 또는 타입이 달라야 한다.
3. 반환 타입은 영향없다.

- 참조변수 This
인스턴스 자신을 가리키는 참조변수(인스턴스의 주소가 저장되어 있다.
모든 인스턴스 메서드에 지역변수로 숨겨진 채로 존재한다.
인스턴스 메서드(생성자 포함)에서 사용가능
지역변수(lv)와 인스턴스변수(iv)를 구별할 때 사용
*같은 클래스 안에 있으면 생략 가능(lv와 iv의 이름이 같다면 생략 불가)

<생성자(Constructor)>
인스턴스 변수 (IV) 초기화 메서드

- 생성자의 특징
이름과 클래스 이름이 같아야 한다.
대입명령이기에 리턴값이 없다.(void 안붙임)
모든 클래스는 반드시 1개 이상의 생성자를 가져야한다. 

- 생성자의 정의방법
기본 생성자 // 클래스이름(){}
매개변수가 없는 생성자
생성자가 하나도 없을 때만 자동 추가
* 기본 생성자는 항상 추가해 둘 것 
* 생성자가 하나라도 있으면 직접 추가해야함

- 생성자 : This( )
생성자에서 다른 생성자를 호출할 때 사용
다른 생성자 호출시 첫 줄에서만 사용가능

<변수의 초기화>
지역변수(lv)는 사용 전 반드시 수동 초기화
멤버변수(iv, cv)의 초기화 방법
1.자동 초기화(0 혹은 null)

2.간단 초기화 // 명시적 초기화 (=)
*참조형 변수의 값은 null 혹은 객체주소

3.복잡 초기화 // 초기화 블럭 {} or 생성자
인스턴스 변수(iv)  : 생성자 or {}
클래스 변수(cv) : static{}

- 멤버변수의 초기화 시점
클래스 변수(cv) : 클래스가 처음 로딩될 때 단 한번
인스턴스 변수(iv) : 인스턴스가 생성될 때 마다 

- 멤버변수의 초기화 순서
클래스 변수(cv) > 인스턴스 변수(iv)
자동 초기화 > 간단 초기화 > 복잡 초기화

* Static의 사용
속성(멤버 변수) 중에서 공통 속성에 Static 사용
인스턴스 멤버(iv, im)을 사용하지 않는 메서드에 Static 사용

* 하나의 소스파일에 여러 클래스 작성하기(대소문자 구분)
1. Public Class가 있는 경우 소스파일의 이름은 반드시 Public Class와 일치
2. Publuc Class가 없는 경우 소스파일의 이름은 어떤 Class명으로 가능
* Run Congigurations에서 수동지정가능