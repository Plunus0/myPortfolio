이클립스 단축키
Windows > Preferences > General > Keys
ctrl+shift+L 단축키 전체 목록
ctrl+ +, - 폰트 크기 증가/감소
ctrl+D 한줄 삭제
ctrl+Z 이전 작업으로 돌아가기
ctrl+shift+ - : 창 분할 / 토글키
alt+up, down 행단위 이동
ctrl+alt+down 행단위 복사
alt+shift+A 멀티컬럼 편집모드 진입
ctrl+shift+o 자동으로 import문 추가
tap, shift+tap 들여쓰기, 내어쓰기
ctrl+i 자동 들여쓰기
// 한줄 주석
/* ~ */ 범위 주석
ctrl+/ 주석 처리/해제
ctrl+space 자동완성(템플릿 등록)
*템플릿 수정
Windows > Preferences > Java > Editor > Templates 수정 후 No 누를 것
*입력 중 자동완성
Windows > Preferences > Java > Editor > Content Assist > Auto Activation (모든 알파벳 입력 시 자동완성을 편하게 도와줌)


Scanner 클래스
화면으로부터 데이터를 입력받는 기능을 제공
Scanner 사용법
1. import문 추가
import java.util.*;
2. Scanner객체의 생성
Scanner scanner = new Scanner(System.in);
3. Scanner객체를 사용
int num = scanner.nextInt(); // 화면에서 입력받은 정수를 num에 저장
String input = scanner.nextLine();//화면에서 입력받은 내용을 input에 저장
int num = Integer.parseInt(input);//문자열(input)을 숫자(num)로 변환

String클래스
String클래스는 char[ ](문자열 배열)와 메서드(기능)를 결합한 것
String클래스는 내용을 변경할 수 없다.(내용은 변경되지 않고, 다른 주소로 새로 생성되어 연결)

String클래스의 주요 메서드
[Char]  (변수명)charAt(int index) : 문자열에서 해당 위치(index)에 있는 문자를 반환한다.
[int]  (변수명).length() : 문자열의 길이를 반환한다.
[String]  (변수명).substring(int from, int to) : 문자열의 index범위 내(from~to)문자들을 반환
[boolean] equals(Object obt) : 문자열의 내용이 같은지 확인
Char[ ] toCharArray() : 문자열을 문자배열(char[ ])로 변환해서 반환한다.

Arrays클래스

배열의 비교와 출력 - equals(), toString()
Arrays.toSting () : 배열의 모든 요소 출력 (1차원배열)
Arrays.deeptoSting () : 배열의 모든 요소 출력 (다차원 배열)
Arrays.equals(배 열1, 배열2) : 배열을 비교 (1차원 배열)
Arrays.deepEquals(배열1, 배열2) : 배열을 비교 (다차원 배열)
배열의 복사 - copyOf(), copyOfRange()
Arrays.copyOf(배열, 복사할 요소의 범위) : 배열을 필요한 범위만큼 복사(몇번째 까지)
Arrays.copyOfRange(배열, from, to) : 배열을 필요한 범위만큼 복사(from~to)
배열의 정렬 - sort()
Arrays.sort(배열); : 배열을 오름차순 정렬

Object클래스
모든 클래스의 최고 조상. 오직 11개의 메서드만을 가지고 있다.

<제어자가 protected이므로 오버라이딩을 통해 public으로 변경해야함>
protected Object clone( ) : 객체 자신의 복사본을 반환한다.
protected void finalize( ) : 객체가 소멸될 때 까지 가비지 컬렉터에 의해 자동적으로 호출된다. 이 때 수행되어야하는 코드가 있을 때 오버라이딩한다.(거의 사용안함)

public boolean equals(Object obj) : 객체 자신과 객체 obj가 같은 객체인지 알려준다.
public Class getClass( ) : 객체 자신의 클래스 정보를 담고 있는 Class인스턴스를 반환한다.
public int hashCode( ) : 객체 자신의 해시코드를 반환한다.
public String toString( ) : 객체 자신의 정보를 문자열로 반환한다.

<notify( ), wait( )등은 쓰레드와 관련된 메서드>
public void notify( ) : 객체 자신을 사용하려고 기다리는 쓰레드를 하나만 깨운다.
public void notifyAll( ) : 객체 자신을 사용하려고 기다리는 모든 쓰레드를 깨운다.
public void wait( )
public void wait(long timeout)
public void wait(long timeout, int nanos) :
다른 쓰레드가 notify( )나 notifyAll( )을 호출할 때까지 현재 쓰레드를 무한히 또는 지정된 시간(timeout, nanos)동안 기다리게 한다.(timeout은 천 분의 1초, nanos는 10^9분의 1초)

equals(Object obj)
객체 자신(this)과 주어진 객체(obj)를 비교한다. 참과 거짓으로 반환
Object클래스의 equals( )는 객체의 주소를 비교(참조변수 값 비교)

<Object의 equals>
public boolean equals(Object obj) {
return ( this == obj ) }

<equals 오버라이딩 예시>
public boolean equals(Object obj) {
 if ( ! ( obj instanceof ClassName) )
      return false;
Class V = (Class)obj; //형변환
return this.IV.equals(V.IV) && this.IV==V.IV }

*cv는 모든 객체가 공통이기에 iv값을 가지고 비교하는게 좋음
**equals( )를 오버라이딩하면, hashCode( )도 오버라이딩 해야 한다. (주소->IV)**
**eqauls ( )의 결과가 true인 두 객체의 해시코드는 같아야 하기 때문**

해시코드 hashCode( )
객체의 해시코드(hash code)를 반환하는 메서드
Object클래스의 hashCode( )는 객체의 주소를 int로 변환해서 반환
public native int hashCode ( ) ;
*네이티브 메서드 : OS의 메서드(c언어)
*메서드 내용이 없다.
*System.identityHashCode(Object obj)는 Object클래스의 hashCode( )와 동일

<hashCode 오버라이딩 예시>
public int hashCode( ) {
return Objects.hash(IV1, IV2, ...) ; }

*이클립스에선 Source 메뉴에서 hashCode() and equals() 를 누르면 자동으로 오버라이딩 해준다.

toString( ), toString( )의 오버라이딩
toString( ) : 객체를 문자열(string)으로 변환하기 위한 메서드
<Object의 toSting>
public String toString( ) {
 return getClass( ).getName( )+"@"+Integer.toHexString(hashCode( )); }
*Object의 기본적인 toSting메서드는 실용적이지 못해 객체가 가진 IV의 값들을 출력하도록 오버라이딩한다.
<toString 오버라이딩 예시>
public String toString( ) { return " IV : " + IV ; }

String클래스
String클래스 = 데이터(char[]) + 메서드(문자열 관련)
내용을 변경할 수 없는 불변(immutable) 클래스
덧셈 연산자(+)를 이용한 문자열 결합은 성능이 떨어짐
문자열의 결합이나 변경이 잦다면, 내용의 변경이 가능한 StringBuffer를 사용
String str = "abc" 와 String str = new Sting('abc")의 비교

리터럴로 값을 넣은 abc는 같은 주소값을 가지지만 new연산자를 이용한 객체생성시 매번 다른 객체가 생성됨
등가 비교 연산자 (==)는 주소 비교임 문자열 비교시에는 equals임을 잊지말자

문자열 리터럴
문자열 리터럴은 프로그램 실행시 자동으로 생성된다.(constant pool에 저장)

빈 문자열 (" ", empty string)
내용이 없는 문자열. 크기가 0인 char형 배열을 저장하는 문자열
String str = " " ; //str을 빈 문자열로 초기화
크기가 0인 배열을 생성하는 것은 어느 타입이나 가능
char[ ] chArr = new char[0];//길이가 0인 char 배열
int[ ] iArr = { }; //길이가 0인 int배열
문자(char)와 문자열(String)의 초기화
<기본>
String s = null;
char c = '\u0000 ;
<변경>
String s = " "; // 빈 문자열로 초기화
char c = ' '; // 공백으로 초기화

String str1 = " ";
String str2 = " ";
String str3 = " ";

String클래스의 생성자와 메서드

<생성자>
String(String s) : 주어진 문자열(s)을 갖는 String인스턴스를 생성한다.
String = new String("Hello"); // s = "Hello"

String(char[ ] value) : 주어진 문자열(value)을 갖는 String인스턴스를 생성한다.
char[ ] c = {'H', 'e', 'l', 'l', 'o'};
String s = new String(c); // s = "Hello"
*반대로 전환시 tocharArray( ) 사용

String(StringBuffer buf) : StringBuffer인스턴스가 갖고 있는 문자열과 같은 내용의 String인스턴스를 생성한다.(StringBuffer -> String 변환/반대의 경우 StringBuffer의 생성자 사용)
StringBuffer sb = new StringBuffer("Hello");
String s = new String(sb); // s = "Hello"

<메서드>
char charAt(int index) : 지정한 위치(index)에 있는 문자를 알려준다.(index의 시작은 0)
String s = "Hello";
String n = "0123456";
char c = s.charAt(1);
char c2 = n.charAt(1); // c = 'e', c2 = '1'

int compareTO(String str) : 문자열(str)과 사전순서로 비교한다. 같으면 0을, 사전순으로 이전이면 음수, 이후면 양수를 반환한다.(정렬 시 사용)
int i = "aaa".compareTo("aaa");
int i2 = "aaa".compareTo("bbb");
int i3 = "bbb".compareTo("aaa"); // i=0, i2=-1, i3=1

String concat(String str) : 문자열(str)을 뒤에 덧붙인다.
String s = "Hello";
String s2 = s.concat(" World"); // s2="Hello World"

boolean contains(CharSequence s) : 지정된 문자열(s)이 포함되었는지 검사한다.
String s = "abcdefg";
boolean b = s.contains("bc"); // b= true
*CharSequence는 캐릭터타입을 활용하는 클래스들을 인터페이스로 묶어둔 것(CharBuffer, Segment, String, StringBuffer, StringBuilder)

boolean endsWith(String suffix) : 지정된 문자열(suffix)로 끝나는지 검사한다.(*반대의 경우 stratsWith( ) 사용)
String file = "Hello.txt";
boolean b = file.endsWith("txt");// b=ture

boolean equals(Object obj) : 매개벼수로 받은 문자열(obj)과  String인스턴스의 문자열을 비교한다. obj가 String이 아니거나 문자열이 다르면 false를 반환한다.
String s = "Hello";
boolean b = s.equals("Hello");
boolean b2 = s.equals("hello");// b=ture, b2=false

boolean equalsIgnoreCase(String str) : 문자열과 String인스턴스의 문자열을 대소문자 구분없이 비교한다.
String s = "Hello";
boolean b = s.equalsIgnoreCase("HELLO");
boolean b2 = s.equalsIgnoreCase("heLLo"); // b=true, b2=true

int indexOf(int ch) : 주어진 문자(ch)가 문자열에 존재하는지 확인하여 위치(index)를 알려준다. 못찾으면 -1을 반환한다.(index의 시작은 0)
String s = "Hello";
int idx1 = s.indexOf('o');
int idx2 = s.indexOf('k'); // idx1=4, idx2=-1

int indexOf(int ch, int pos) : 주어진 문자(ch)가 문자열에 존재하는지 지정된 위치(pos)부터 확인하여 위치(index)를 알려준다. 못찾으면 -1을 반환한다.(index의 시작은 0), (지정된 위치 이전 문자는 무시)
String s = "Hello";
int idx1 = s.indexOf('e', 0);
int idx2 = s.indexOf('e', 2); // idx1=1, idx2=-1

int indexOf(String str)
주어진 문자열이 존재하는지 확인하여 그 위치(index)를 알려준다. 없으면 -1을 반환한다.(index의 시작은 0)
String s = "ABCDEFG";
int idx = s.indexOf("CD"); // idx = 2

int lastIndexOf(int ch) : 지정된 문자 또는 문자코드를 문자열의 오른쪽 끝에서부터 찾아서 위치(index)를 알려준다. 못찾으면 -1을 반환한다.
String s = "java.lang.Object";
int idx1 = s.lastIndexOf('.');
int idx2 = s.indexOf('.'); // idx1=9, idx2=4

int lastIndexOf(String str) : 지정된 문자열을 인스턴스의 문자열 끝에서 부터 찾아서 위치(index)를 알려준다. 못찾으면 -1을 반환한다.
String s = "java.lang.java";
int idx1 = s.lastIndexOf("java");
int idx2 = s.indexOf("java"); // idx1=10, idx2=0

int length( ) : 문자열의 길이를 알려준다.
String s = "Hello";
int length = s.length( ); // length=5

String[ ] split(String regex) : 문자열을 지정된 분리자(regex)로 나누어 문자열 배열에 담아 반환한다.
String animals = "dog, cat, bear";
String[ ] arr = animakls.split( ", "); // arr[0]="dog", arr[1]="cat", arr[2]="bear"
*regex은 정규식을 대입한다

String[ ] split(String regex, int limit) : 문자열을 지정된 분리자(regex)로 나누어 문자열배열에 담아 반환한다. 단, 문자열 전체를 지정된 수(limit)로 자른다.
String animals = "dog, cat, bear";
String[ ] arr = animakls.split(", ", 2); // arr[0]="dog", arr[1]="cat, bear"

boolean startsWith(String prefix) : 주어진 문자열(prefix)로 시작하는지 검사한다.
String s = "java.lang.Object";
boolean b = s.startsWith("java");
boolean b2 = s.startsWith("lang"); // b=true, b2=false

String substring(int begin)
String substring(int begin, int end) : 주어진 시작위치(begin)부터 끝 위치(end)범위에 포함된 문자열을 얻는다. 이 때 시작위치의 문자는 범위에 포함되지만, 끝 위치의 문자는 포함되지 않는다.(begin<=x<end)
String s = "java.lang.Object";
String c = s.substring(10);
String p = s.substring(5, 9); // c="Object", p="lang"

String toLowerCase( ) : String인스턴스에 저장되어 있는 모든 문자열을 소문자로 변환하여 반환한다.
String s = "Hello";
String s1 = s.toLowerCase( ); // s1="hello"

String toUpperCase( ) : String인스턴스에 저장되어 있는 모든 문자열을 대문자로 변환하여 반환한다.
String s = "Hello";
String s1 = s.toUpperCase( ); // s1="HELLO"

String trim( ) : 문자열의 왼쪽 끝과 오른쪽 끝에 있는 공백을 없앤 결과를 반환한다. 이 때 문자열 중간에 있는 공백은 제거되지 않는다.
String s = "  Hello World  ";
String s1 = s.trim( ); // s1="Hello World"

static String valueOf(boolean b)
static String valueOf(char c)
static String valueOf(int i)
static String valueOf(long l)
static String valueOf(float f)
static String valueOf(double d)
static String valueOf(Object o) : 지정된 값을 문자열로 변환하여 반환한다. 참조변수의 경우, toSting( )을 호출한 결과를 반환한다.
String b = String.valueOf(true);
String c = String.valueOf('a');
String i = String.valueOf(100);
String l = String.valueOf(100L);
String f = String.valueOf(10f);
String d = String.valueOf(10.0);
java.util.Data dd = new java.util.Data( );
String data = String.valueOf(dd); // b="true", c="a", i="100", l="100", f="10.0", d="10.0", data="Wed Jan 27 21:26:29 KST 2016"

문자열 결합 join( ) StringJoiner
join( ) 여러 문자열 사이에 구분자를 넣어서 결합한다.

문자열과 기본형 간의 변환
숫자를 문자열로 변환
int i = 100;
String str1 = i = "";
String str2 = =String.valueOf(i);

문자열을 숫자로 바꾸는 방법
int i = Integer.parseInt("100");
int i2 = Integer.valueOf("100");
Integer i2 = Integer.valueOf("100");

문자열 -> 기본형
래퍼클래스.parse기본클래스(String s)
래퍼클래스.valueOf(String s)
*같은 방법이나 valueOf(String s)가 더 간단한 방법이다

StringBuffer 클래스
String처럼 문자형 배열을(char[ ])을 내부적으로 가지고있다.
그러나 String과 달리 내용을 변경할 수 있다.(mutable)

StringBuffer 생성자
배열은 길이 변경불가. 공간이 부족하면 새로운 배열 생성
StringBuffer는 저장할 문자열의 길이를 고려해서 적절한 크기로 먼저 생성해야한다.
public StringBuffer(int length)
*최초 길이는 지정한 문자열+16

StringBuffer 변경
StringBuffer는 String과 달리 내용 변경이 가능

*append ( ) : 끝에 문자열 추가
delete ( ) : 삭제
insert ( ) : 삽입
위 3개 메서드들의 반환타입은 StringBuffer이기에 코드를 축약할 수 있다.
sb.append("123").append("ZZ");

StringBuffer 비교
StringBuffer는 equals( )가 오버라이딩 되어 있지 않다.(주소비교)
StringBuffer을 String으로 변환 후 equals( )로 비교한다.
참조변수.toString( );

StringBuffer의 생성자와 메서드
StringBuffer( ) : 16문자를 담을 수 있는 버퍼를 가진 StringBuffer 인스턴스를 생성한다.
StringBuffer sb = StringBuffer( ); // sb = ""

StringBuffer(int length) : 지정된 개수의 문자를 담을 수 있는 버퍼를 가진 StringBuffer 인스턴스를 생성한다.
StringBuffer sb = new StringBuffer(10); // sb=""

StringBuffer(String str) : 지정된 문자열 값(str)을 갖는 StringBuffer 인스턴스를 생성한다.
StringBuffer sb = new StringBuffer("Hi"); // sb="Hi"

StringBuffer append(기본형타입 참조변수)
매개변수로 입력된 값을 문자열로 변환 후 StringBuffer인스턴스가 저장된 문자열의 뒤에 덧붙인다.
StringBuffer타입의참조변수.append(기본형타입 참조변수);

int capacity( ) : StringBuffer인스턴스의 버퍼크기를 알려준다. length( )는 버퍼에 담긴 문자열의 길이를 알려준다.
대상참조변수.capacity( );

char charAt(int index) : 지정된 위치(index)에 있는 문자를 반환한다.
char c = sb.charAt(2) // c='c'

StringBuffer delete(int start, int end) : 시작위치(start)부터 끝 위치(end)사이에 있는 문자를 제거한다. 단 끝 위치의 문자는 제외
sb.delete(3, 6);

StringBuffer deletecharAt(int index) : 지정된 위치(index)의 문자를 제거한다.
sb.deletecharAt(int index);

StringBuffer insert(int pos, 기본타입 v) : 두번째 매개변수로 받은 값을 문자열로 변환하여 지정된 위치(pos)에 추가한다. pos는 0부터 시작
sb.insert(4,'.');

int length( ) : StringBuffer인스턴스에 저장되어 있는 문자열의 길이를 반환한다.
sb.length( );

StringBuffer repalce(int start, int end, String str) : 지정된 범위(start~end)의 문자들을 주어진 문자열로 바꾼다. (start <= x < end)
sb.repalce(3, 6, "AB");

StringBuffer reverse( ) : StringBuffer인스턴스에 저장되어있는 문자열의 순서를 거꾸로 나열한다.
sb.reverse( );

void setCharAt(int index, char ch) : 지정된 위치의 문자를 주어진 문자(ch)로 바꾼다.
sb.setCharAt(5, 'o');

void setLength(int newLength) : 지정된 길이로 문자열의 길이를 변경한다. 길이를 늘리는 경우 빈공간을 널문자 '\u0000'로 채운다.
sb.setLength(5);

String toString( ) : StringBuffer 인스턴스의 문자열을 String으로 반환
sb.toString( );

String substring(int start)
String substring(int start, int end) : 지정된 범위의 문자열을 뽑아서 String으로 반환한다. 시작위치만 입력할 경우 모든 문자열까지 반환
sb.substring(3, 5);

래퍼 클래스 (wrapper)
8개의 기본형을 객체로 다뤄야할 때 사용하는 클래스
Boolean / Character / Byte / Short / Integer / Long / Float / Double

Number클래스
모든 숫자 래퍼클래스의 조상(추상클래스)

문자열을 숫자로 변환하기
문자열을 숫자로 변환하는 다양한 방법
int i = new Integer("100").intValue( );
int i2 = Integer.parseInt("100");
Integer i3 = Integer.valueOf("100");
Integer i4 = new Integer("100");
*대부분 문자열을 받는 생성자가 있음

래퍼클래스를 문자열로 변경
toString( ) 사용

n진법의 문자열을 숫자로 변환하기(뒤에 매개변수가 없으면 기본적으로 10진수로 변환)
int i = Integer.parseInt("100", 2) // 2진수
int i = Integer.parseInt("100", 8) // 8진수
int i = Integer.parseInt("100", 16) // 16진수

메서드

Date와 Calendar간의 변환
Date의 메서드는 대부분 deprocated되었지만 여전히 사용
1. Calrendar를 Date로 변환
Calendar cal = Calendar.getInstance( );
Date d = new Date(cal.getTimeInMillis( ) ) ;

2. Date를 Calrendar로 변환
Date d = new Date( );
Calendar cal = Calendar.getInstance( );
cal.setTime(d)

SimpleDateFormat

날짜와 시간을 다양한 형식으로 출력
Date today = new Date( );
SimpleDateFormat df = new SompleDateFormat("yyyy-MM-dd");
String result = df.format(today);

<날짜 기호>
G : 연대(BC,AD)
y : 연도
M : 월(1~12or1월~12월)
w : 년의 몇 번째 주(1~53)
W : 월의 몇 번째 주(1~5)
D : 년의 몇 번째 일(1~366)
d : 월의 몇 번째 일(1~31)
F : 월의 몇 번째 요일(1~5)
E : 요일

특정 형식으로 되어 있는 문자열을 날짜와 시간으로 변환
DateFormat df = new SimpleDateFormat("yyyy년 MM월 dd일");

DateFormat df = new SimpleDateFormat("yyyy/MM/dd");

Date d = df.parse("2015년 11월 23일");
String result = df2.format(d) ;

<시간 기호>
a : 오전/오후(AM, PM)
H : 시간(0~23)
k : 시간(1~24)
K : 시간(0~11)
h : 시간(1~12)
m : 분(0~59)
s : 초(0~59)
S : 천분의 일초(0~999)
z : Time zone(General time zone) // GMT+9:00
Z : Time zone(RFC 822 time zone) // +0900
' : escape문자(특수문자 표현)

instanceof 연산자
참조변수의 형변환 가능여부 확인에 사용. 가능하면 true반환
형변환 전에 반드시 instanceof로 확인해야 함
*조상에 대해서도 true 또한 반환(형변환이 가능하기 때문에)
system.out.println(Arrays.toString(변수명));
배열의 모든요소를 [ 값, 값, 값 ...]으로 출력
Math.round() : 실수를 소수점 첫 째자리에서 반올림한 정수를 반환(필요시 10의n자리를 곱하고 다시 double타입의 10의 n자리로 나눠서 값 도출)
Math.random() : 난수 생성
equals() : 문자열의 비교
scanner.nextLine() : 화면에서 한줄을 입력받음
scanner.nextInt() : 정수를 화면에서 입력받음
Integer.parseInt(내용) : 문자를 숫자로 변환
System.out.print(내용) : 내용 출력
System.out.println(내용) : 내용 출력 후 줄바꿈
System.out.printf(내용) : 내용 출력(형식 지정가능)
*지시자(JavaAPI > Formatter에서 추가 확인 가능)
<정수>
%b : boolean형식으로 출력
%d : 10진수(decimal)로 출력
%o : 8진수(octal)로 출력
%x : 16진수(hexa-decimal)로 출력
*지시자 앞에 #을 붙이면 접두사도 같이 출력
<실수>
%f : 부동 소수점(floating-point)으로 출력
*지시자 앞에 소수점 n자리 붙일 경우 해당 자리만큼 출력
%e : 지수(exponent)로 출력
%g : 부동 소수점 혹은 지수 중 간략한 방식으로 출력
%2d 
2자리보다 작으면 여백을 추가해서 2자리를 확보 합니다. 예 _1 (_는 0x20, 스페이스, 여백을 의미)
2자리보다 크면 그대로 출력됩니다. 예 "12345"
%02d 
2자리보다 작으면 '0'을 추가해서 2자리를 확보 합니다. 예 01
2자리보다 크면 그대로 출력됩니다. 예 "12345"
%-2d (왼쪽 정렬)
2자리보다 작으면 여백을 추가해서 2자리를 확보 합니다. 예 1_ (_는 0x20, 스페이스, 여백을 의미)
2자리보다 크면 그대로 출력됩니다. 예 "12345"
%+2d
양수인경우 '+'를 붙여줌
<문자>
%c : 문자(character)로 출력
%s : 문자열(string)로 출력
"%s", Integer.toBinaryString(내용) : 2진수로 출력
<개행문자>
%n : 개행문자(줄바꿈)
*예시 : ("age:%d year:%d%n", 14, 2017);

Collection 인터페이스의 메서드

boolean add(Object o)
boolean addAll(Collection c) : 지정된 객체(o) 또는 Collection(c)의 객체들을 Collection에 추가
void clear( ) : Collection의 모든 객체 삭제
boolean contains(Object o)
boolean containsAll(Collection c) : 지정된 객체(o) 또는 Collection의 객체들이 Collection에 포함되어 있는지 확인
boolean equals(Object o) : 동일한 Collection인지 비교
int hashCode( ) : Collection의 hashCode를 반환
boolean isEmpty( ) : Collection이 비어있는지 확인
Iterator iterator( ) : Collection의 Iterator를 얻어서 반환
boolean remove(Object o) : 지정된 객체 삭제
boolean removeAll(Collection c) : 지정된 Collection에 포함된 객체들을 삭제
boolean retainAll(Collection c) : 지정된 Collection에 포함된 객체만을 남기고 다른 객체들을 삭제, 이 작업으로 인해 Collection에 변화가 있으면 true 그렇지 않으면 false
int size( ) : Collection에 저장된 객체 수 반환
Object[ ] toArray( ) : Collection에 저장된 객체를 객체비열(Object[ ])로 반환
Object[ ] toArray(Object[ ] a) : 지정된 배열에 Collection의 객체를 저장해서 반환

List인터페이스

void add(int index, Object element)
boolean addAll(int index, Collection c) : 지정된 위치(index)에 객체(element) 또는 컬렉션에 포함된 객체들을 추가
Object get(int index) : 지정된 위치(index)에 있는 객체를 반환
int indexOf(Object o) : 지정된 객체의 위치(index)를 반환(정방향 검색)
int lastIndexOf(Object o) : 지정된 객체의 위치(index)를 반환(역방향 검색)
Listlterator listlterator( )
Listlterator listlterator(int index) : List의 객체에 접근할 수 있는 Listlterrator를 반환
Object remove(int index) : 지정된 위치(index)에 있는 객체를 삭제하고 삭제된 객체 반환
Object set(int index, Object element) : 지정된 위치(index)에 객체(element)를 저장
void sort(Comparator c) : 지정된 비교자(Comparator)로 List를 정렬
List subList(int formIndex, int toIndex) : 지정된 범위(formIndex부터 toIndex)에 있는 객체 반환

*자주쓰이는 조건식
자주쓰이는 조건식
90<=x&&x<=100 : 정수 x가 90이상 100이하일 때
x<0||x>100 : 정수 x가 0보다 작거나 100보다 클 때
x%3==0&&x%2!=0 : 정수 x가 3의 배수지만, 2의 배수는 아닐 때
ch=='y'||ch=='Y' : 문자 ch가 'y' 또는 'Y'일 때
ch==' '||ch=='\t'||ch=='%n' : 문자 ch가 공백이거나 탭 또는 개행 문자일 때
'A'<=ch&&ch<='Z' : 문자 ch가 대문자일 때
'a'<=ch&&ch<='z' : 문자 ch가 소문자일 때
'0'<=ch&&ch<='9' : 문자 ch가 숫자일 때
str.equals("yes") : 문자열 str의 내용이 "yes"일 때(대소문자 구분)
str.equalsIgnoreCase("yes") : 문자열 str의 내용이 "yes"일 때(대소문자 구분x)

[구구단코드]
for(int i=2; i<=9; i++) {
    for(int j=1; j<=9; j++)
        system.out.println(i+"*"+j"="+(i*j));

[숫자의 각 자릿수를 더하기]
for(num=12345; num>0; num=num/10){
   system.out.println(num%10);
   sum += num %10; }
10으로 나머지 연산을 하면 마지막자리를 얻는다.
정수타입의 숫자를 10으로 나누면 맨 마지막 숫자는 소수점이 되어 생략됨
결합하여 반복하면 각 자리수들이 추출되며 해당 값들을 변수에 누적하여 덧셈

for(int i=0; i< 변수명.length; i++){
system.out.println(변수명[i]); }
배열의 요소를 순서대로 하나씩 출력

임의의 정수 만들기
Math.random() - 0.0과 1.0사이의 임의의 double값을 반환
[범위] 0.0<=Math.random()<1.0
[활용]
1. 각 변에 n을 곱한다.(n=원하는 개별값의 갯수)
2. 각 변을 int형으로 변환한다.(소수점 이하 버림)
3. 각 변에 최저로 얻을 값을 더한다.

*달력 만들기
1. 구하고자 하는 연도, 월을 변수로 만든다.(입력받아도 되고, 직접 설정해줘도 됨)
2. 1일의 요일, 해당 월의 끝 일자를 변수로 만들어 초기화시켜준다.
3. 해당 월의 시작일(sDay)과 끝일(eDay)을 계산할 객체를 각각 생성해준다.
시작일은 1일, 끝일은 익월의 -1일
4. 끝일의 날짜를 변수에 저장
5. 1일의 요일이 무슨 요일인지 확인 후 반환
Start_day_of_week = sDay.get(Calendar.DAY_OF_WEEK);
6. 해당 월의 1일이 어느요일인지에 따라서 공백의 갯수를 설정 후 출력(일요일 시작일때)
for(int i=1; i<Start_day_of_week; i++)
System.out.print( "   " );
7. 나머지 날짜를 출력한다.
for(int i=1, n=Start_day_of_week ; i<=eDay; i++, n++) { system.out.print(( i < 10)? "  "+i : " "+i); // 한자리 숫자 출력 모양 맞추기
if(n%7==0) System.out.println( ); // 일주일 입력시 다음줄에 출력)

*배열에는 향상된 for문 사용이 가능하다.
for(출력타입 tmp : 배열이 저장된 변수)
배열이 저장된 변수를 한번씩 반환