조건문과 반복문 (제어문)
조건문 if, switch
조건을 만족할때만 {}를 수행(0~1번)
반복문 for, while
조건을 만족하는 동안 {}를 수행(0~n번)

블럭 { }
여러 문장을 하나로 묶어주는 것

임의의 정수 만들기
Math.random() - 0.0과 1.0사이의 임의의 double값을 반환
[범위] 0.0<=Math.random()<1.0
[활용]
1. 각 변에 n을 곱한다.(n=원하는 개별값의 갯수)
2. 각 변을 int형으로 변환한다.(소수점 이하 버림)
3. 각 변에 최저로 얻을 값을 더한다.

조건문
if - else if문
둘 중의 하나 - 조건식이 참일 때와 거짓일 때로 나눠서 처리(else if, else문은 생략 가능)
if (조건식1) { }
조건식이 참(true)일 때, 블럭 {}안의 문장들을 수행한다.
else if (조건식2)
조건식1이 거짓(false)이고 조건식2가 참(true)일 때, 블럭 {}안의 문장들을 수행한다.
else {} 위 조건식이 거짓(false)일 때, 블럭 {}안의 문장들을 수행한다

중첩 if문 - if문 안의 if문
if (조건식1) {
               if (조건식2) { }}
조건식의 1과 조건식2가 모두 true일 때 수행

Switch문
처리해야 하는 경우의 수가 많을 때 유용한 조건문(조건식이 true와 false가 아니어도 사용 가능)
switch (조건식) {
case 값1 : //조건식의 결과가 값1과 같을 경우 수행
case 값2 : //조건식의 결과가 값2와 같을 경우 수행
break; // switch문을 벗어남 (없을 경우 끝까지 감)
default : //조건식의 결과와 일치하는 case문이 없을 경우 수행
}
switch문의 제약조건
1. switch문의 조건식 결과는 정수 또는 문자열이어야 한다.
2. case문의 값은 정수 또는 문자열이어야 한다.

자주쓰이는 조건식
90<=x&&x<=100 : 정수 x가 90이상 100이하일 때
x<0||x>100 : 정수 x가 0보다 작거나 100보다 클 때
x%3==0&&x%2!=0 : 정수 x가 3의 배수지만, 2의 배수는 아닐 때
ch=='y'||ch=='Y' : 문자 ch가 'y' 또는 'Y'일 때
ch==' '||ch=='\t'||ch=='%n' : 문자 ch가 공백이거나 탭 또는 개행 문자일 때
'A'<=ch&&ch<='Z' : 문자 ch가 대문자일 때
'a'<=ch&&ch<='z' : 문자 ch가 소문자일 때
'0'<=ch&&ch<='9' : 문자 ch가 숫자일 때
str.equals("yes") : 문자열 str의 내용이 "yes"일 때(대소문자 구분)
str.equalsIgnoreCase("yes") : 문자열 str의 내용이 "yes"일 때(대소문자 구분x)

반복문
for문
조건을 만족하는 동안 블럭 { }을 반복 - 반복횟수를 알 때 적합
for(초기화;조건식;증감식){ 수행될문장 }
for(int i=1; i<=5; i++) {수행될 문장}
*for( ; ; )와 같이 조건식이 항상 참(true)일 경우 무한반복됨

중첩 for문
flr문 내에 또 다른 for문을 포함시킬 수 있다.(while문과 100% 변경 가능)
[구구단코드]
for(int i=2; i<=9; i++) {
    for(int j=1; j<=9; j++)
        system.out.println(i+"*"+j"="+(i*j));

While문
조건을 만족시키는 동안 블럭 { }을 반복 - 반복횟수를 모르때 적합(for문과 100% 변경 가능, for문과 다르게 무한반복시 ture조건 생략 불가)
(초기화)
While (조건식) { 실행될 내용, (증감식) }

[숫자의 각 자릿수를 더하기]
for(num=12345; num>0; num=num/10){
   system.out.println(num%10);
   sum += num %10; }
10으로 나머지 연산을 하면 마지막자리를 얻는다.
정수타입의 숫자를 10으로 나누면 맨 마지막 숫자는 소수점이 되어 생략됨
결합하여 반복하면 각 자리수들이 추출되며 해당 값들을 변수에 누적하여 덧셈

do-while문
블럭 { }을 최소한 한 번 이상 반복 - 사용자 입력 받을 때 유용
do { //조건식의 연산결과가 참일 때 수행
} while (조건식); // 세미콜론(;)잊지않도록 주의

*반복문이 제대로 수행되지 않을 시 각 내용을 프린트로 확인하여 중간과정을 점검

break문
자신이 포함된 하나의 반복문을 벗어난다.

continue문
자신이 포함된 반복문의 끝으로 이동 - 다음 반복으로 넘어감(전체 반복 중 특정조건시 반복을 건너뛸 때 유용)

이름붙은 반복문
반복문에 이름을 붙여서 하나 이상의 반복문을 버어날 수 있다.
Loop1 : for( ) {
         break Loop1 ;
}