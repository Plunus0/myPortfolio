프로세스와 쓰레드(process&thread)
프로세스 : 실행 중인 프로그램, 자원(resources)과 쓰레드로 구성
쓰레드 : 프로세스 내에서 실제 작업을 수행
모든 프로세스는 최소한 하나의 쓰레드를 가지고 있다.
하나의 새로운 프로세스를 생성하는 것보다 하나의 새로운 쓰레드를 생성하는 것이 더 적은 비용이 든다.

멀티쓰레드의 장단점
장점 : 시스템 자원을 보다 효율적으로 사용할 수 있다.
사용자에 대한 응답성(responseness)이 향상된다.
작업이 분리되어 코드가 간결해 진다.
단점 : 동기화(synchronization)에 주의해야 한다.
교착상태(dead-lock)가 발생하지 않도록 주의해야 한다.
각 쓰레드가 효율적으로 고르게 실행될 수 있게 해야 한다.

쓰레드의 구현과 실행
Thread클래스를 상속 ( extends Thread )
Runnable 인터페이스를 구현 (implements Runnable )
public void run( )
*쓰레드가 수행할 작업인 run 메서드를 작성

Thread t2 = new Thread(new Mythread2( ) );
t2.start( );
*쓰레드를 구현한 클래스를 t2에 저장

*쓰레드를 생성한 후에 start로 호출해야지만 새로운 스택이 생기며 run메서드를 멀티쓰레드로 기능을 실행

main쓰레드
main메서드의 코드를 수행하는 쓰레드
쓰레드는 '사용자 쓰레드'와 '데몬 쓰레드' 두 종류가 있다.
main쓰레드가 종료되도 실행중인 사용자 쓰레드가 하나라도 있으면 프로그램이 종료되지 않는다.

쓰레드의 I/O블락킹(blocking)
입출력시 특이사항에 의한 작업중단 현상
멀티쓰레드를 이용하여 이러한 현상을 최소화

쓰레드의 우선순위(priority of thread)
작업의 중요도에 따라 쓰레드의 우선순위를 다르게 하여 특정 쓰레드가 더 많은 작업시간을 갖게 할 수 있다. (1~10까지 설정할 수 있으나 작업완료할 확률이 높을 뿐 반드시 그렇게 되는건 아니다)

쓰레드그룹
서로 관련된 쓰레드를 그룹으로 묶어서 다루기 위한 것
모든 쓰레드는 반드시 하나의 쓰레드 그룹에 포함되어 있어야 한다.
쓰레드 그룹을 지정하지 않고 생성한 쓰레드는 'main쓰레드 그룹'에 속한다.
자신을 생성한 쓰레드(부모 쓰레드)의 그룹과 우선순위를 상속받는다.

쓰레드 그룹의 메서드
ThreadGroup(String name) : 지정된 이름의 새로운 쓰레드 그룹을 생성
ThreadGroup(ThreadGroup parent.String name) : 지정된 쓰레드 그룹에 포함되는 새로운 쓰레드 그룹을 생성
int activeCount( ) : 쓰레드 그룹에 포함된 활성상태에 있는 쓰레드의 수를 반환
int activeGroupCount( ) : 쓰레드 그룹에 포함된 활성상태에 있는 쓰레드 그룹의 수를 반환
void checkAccess( ) : 현재 실행중인 쓰레드가 쓰레드 그룹을 변경할 권한이 있는지 체크
void destroy( ) : 쓰레드 그룹과 하위 쓰레드 그룹까지 모두 삭제. 단, 비어있어야 삭제가능
int enumerate(Thread[ ] lits)
int enumerate(Thread[ ] list, boolean recurse)
int enumerate(ThreadGroup[ ] list)
int enumerate(ThreadGroup[ ] list, boolean recurse) : 쓰레드 그룹에 속한 쓰레드 또는 하위 쓰레드 그룹의 목록을 지정된 배열에 담고 그 개수를 반환. 두번째 매개변수인 recurse의 값을 true로 하면 쓰레드 그룹에 속한 하위 쓰레드 그룹에 쓰레드 또는 쓰레드 그룹까지 배열에 담는다.
int getMaxPriority( ) : 쓰레드 그룹의 최대우선순위를 반환
String getName( ) : 쓰레드 그룹의 이름을 반환
ThreadGroup getParent( ) : 쓰레드 그룹의 상위 쓰레드 그룹을 반환
void interrupt( ) :  쓰레드 그룹에 속한 모든 쓰레드를 interrupt
boolean isDaemon( ) : 쓰레드 그룹이 데몬 쓰레드 그룹인지 확인
void setDaemon(boolean on) : 쓰레드를 데몬 쓰레드로 또는 사용자 쓰레드로 변경 매개변수 on을 true로 지정하면 데몬쓰레드가 된다.
*데몬쓰레드 지정은 반드시 start( ) 호출 전에 실행되어야 한다.
boolean isDestroyed( ) : 쓰레드 그룹이 삭제되었는지 확인
void list( ) : 쓰레드 그룹에 속한 쓰레드와 하위 쓰레드 그룹에 대한 정보를 출력
boolean parentOf(ThreadGroup g) : 지정된 쓰레드 그룹의 상위 쓰레드 그룹인지 확인. 쓰레드 그룹을 데몬 쓰레드 그룹으로 설정/해제
void setMaxPriority(int pri) : 쓰레드 그룹의 최대 우선순위를 설정

데몬 쓰레드(daemon Thread)
일반 쓰레드(non-daemon Thread)의 작업을 돕는 보조적인 역할을 수행
일반 쓰레드가 모두 종료되면 자동적으로 종료
가비지 컬렉터, 자동저장, 화면 자동갱신 등에 사용된다.
무한루프와 조건문을 이용해서 실행 후 대기하다가 특정조건이 만족되면 작업을 수행하고 다시 대기하도록 작성

public void run( ) {
while(true) {
try {
Thread.sleep(3 * 1000); } // 3초 마다
catch(InterruptedException e) { } // autoSave의 값이 true이면 autoSave( )를 호출
if(autoSave) {
autoSave( ); } } }

쓰레드의 상태
NEW : 쓰레드가 생성되고 아직 start( )가 호출되지 않은 상태
RUNNABLE : 실행 중 또는 실행 가능한 상태
BLOCKED : 동기화블럭에 의해서 일시정지된 상태(lock이 풀릴 때까지 기다리는 상태)
WAITING, TIMED_WAITING : 쓰레드의 작업이 종료되지는 않았지만 실행가능하지 않은(unrunnable) 일시정지상태. TIMED_WAITING은 일시정지시간이 지정된 경우를 의미
TERMINATED : 쓰레드의 작업이 종료된 상태

쓰레드의 실행제어 메서드
static void sleep(long millis)
static void sleep(long millis, int nanos) : 지정된 시간(천분의 일초 단위)동안 쓰레드를 일시정지 시킨다. 지정한 시간이 지나고 나면 자동적으로 다시 실행대기상태가 된다.
void join( )
void join(long millis)
void join(long millis, int nanos) : 지정된 시간동안 쓰레드가 실행되도록 한다. 지정된 시간이 지나거나 작업이 종료되면 join을 호출한 쓰레드로 다시 돌아와 실행을 계속한다.
void interrupt( ) : sleep( )이나 join( )에 의해 일시정지상태인 쓰레드를 깨워서 실행대기상태로 만든다. 해당 쓰레드에서는 Interrupted Exception이 발생함으로써 일시정지 상태를 벗어나게 된다.
void stop( ) : 쓰레드를 즉시 종료시킨다.
void suspend( ) : suspend( )에 의해 일시정지상태에 있는 쓰레드를 실행대기상태로 만든다.
static void yield( ) : 실행 중에 자신에게 주어진 실행시간을 다른 쓰레드에게 양보(yield)하고 자신은 실행대기상태가 된다.
*static이 붙은 메서드는 쓰레드 자기자신한테만 호출이 가능

sleep( )
현재 쓰레드를 지정된 시간동안 멈추게 한다.
특정 쓰레드를 지정해서 멈추게 하는 것은 불가능하다.(자기 자신만 적용가능)
반드시 예외처리를 해야한다.(InterruptException이 발생하면 깨어남)
try { Thread.sleep(1, 500000); }
catch(InterruptedException e) { }
*예외처리 예시(예외처리 몸통은 넣지않아도 됨)
>메번 예외처리가 필수이다보니 sleep가 들어간 메서드로 새로 만들어 사용함
void delay(long millis) {
try { Thread.sleep(millis); }
catch(InterruptedException e) { } }

interrupt( )
대기상태(WAITING)인 쓰레드를 실행대기 상태(RUNNABLE)로 만든다.
void interrupt( ) : 쓰레드의 interrupted상태를 false에서 true로 변경
boolean isInterrupted( ) : 쓰레드의 interrupted상태를 변환
static boolean interruptted( ) : 현재 쓰레드의 interrupted상태를 알려주고, false로 초기화

suspend( ), resume( ), stop( )
쓰레드의 실행을 일시정지, 재개, 완전정지 시킨다.
해당 메서드들은 교착상태에 빠지기 쉬워서 deprecated되었다.(가능한 사용하지 말것)
void suspend( ) : 쓰레드를 일시정지 시킨다.
void resume( ) : suspend( )에 의해 일시정지된 쓰레드를 실행대기상태로 만든다.
void stop( ) : 쓰레드를 즉시 종료시킨다.

join( )
지정된 시간동안 특정 쓰레드가 작업하는 것을 기다린다.
void join( ) : 작업이 모두 끝날 때까지
void joim(long millis) : 천분의 일초동안
void join(long millis, int nanos) : 천분의 일초 + 나노초 동안

쓰레드의 동기화(synchronization)
멀티 쓰레드 프로세스에서는 다른 쓰레드의 작업에 영향을 미칠 수 있다.
진행중인 작업이 다른 쓰레드에게 간섭받지 않게 하려면 '동기화'가 필요
동기화하려면 간섭받지 않아야 하는 문장들을 '임계 영역'으로 설정
임계영역은 락(lock)을 얻은 단 하나의 쓰레드만 출입가능(객체 1개에 락1개)
*쓰레드 동시작업으로 인한 오류 방지

synchronized를 이용한 동기화
1. 메서드 전체를 임계 영역으로 지정
public synchronized void calsSum( ) { ... }
*1번에 1쓰레드 최소화 시키기
2. 특정한 영역을 임계 영역으로 지정
synchronized(갹체의 참조변수) { ... }
*관련 iv는 private를 설정해주지 않으면 의미가 없다
*읽을 때, 쓸때 전부 동기화를 걸어줘야함

wait( )과 notify( )
동기화의 효율을 높이기 위해 wait( ), notify( )를 사용
Object클래스에 정의되어 있으며, 동기화 블록 내에서만 사용할 수 있다.
wait( ) : 객체의 lock을 풀고 쓰레드를 해당 객체의 waiting pool에 넣는다
notify( ) : waiting pool에서 대기중인 쓰레드 중의 하나를 깨운다
notifyAll( ) : waiting pool에서 대기중인 모든 쓰레드를 깨운다