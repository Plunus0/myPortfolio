<Object클래스>
java.lang 패키지에 속해있다.
모든 클래스의 최고 조상이며 오직 11개의 메서드만을 가지고 있다.

- Object클래스의 메서드
> protected Object clone( ) : 객체 자신의 복사본을 반환한다.
> protected void finalize( ) : 객체가 소멸될 때 까지 가비지 컬렉터에 의해 자동적으로 호출된다. 이 때 수행되어야하는 코드가 있을 때 오버라이딩한다.(거의 사용안함)
* 제어자가 protected이므로 오버라이딩을 통해 public으로 변경하여 사용

> public boolean equals(Object obj) : 객체 자신(this)과 주어진 객체(obj)를 비교한다. boolean값 리턴
* Object클래스의 equals( )는 객체의 주소를 비교(참조변수 값 비교)
* Object클래스의 equals( ) 예시
public boolean equals(Object obj) {
return ( this == obj ) }
* equals 오버라이딩 예시
public boolean equals(Object obj) {
   if ( ! ( obj instanceof ClassName) )
      return false;
Class V = (Class)obj; // 형변환
return this.IV.equals(V.IV) && this.IV==V.IV }
*cv는 모든 객체가 공통이기에 iv값을 가지고 비교하는게 좋음
*eqauls( )의 결과가 true인 두 객체의 해시코드는 같아야 하기 때문에 두 메서드는 같이 오버라이딩 해준다.(주소 -> IV)

> public int hashCode( ) : 객체의 해시코드(hashcode)를 반환하는 메서드, Object클래스의 hashCode( )는 객체의 주소를 int로 변환해서 반환
* hashcode 예시
public native int hashCode ( ) ;
*네이티브 메서드 : OS의 메서드(c언어)
*메서드 내용이 없는것이 특징
*System.identityHashCode(Object obj)는 Object클래스의 hashCode( )와 동일하다
* hashCode 오버라이딩 예시
public int hashCode( ) {
   return Objects.hash(IV1, IV2, ...) ; }
*이클립스는 자동으로 오버라이딩 해주는 메뉴가 있음. (Source > hashCode( ) and equals( )) 

> public String toString( ) : 객체 자신의 정보를 문자열로 반환
* Object의 toSting( ) 예시
public String toString( ) {
 return getClass( ).getName( )+"@"+Integer.toHexString(hashCode( )); }
*Object의 기본적인 toSting메서드는 실용적이지 못해 객체가 가진 IV의 값들을 출력하도록 오버라이딩한다.
* toString( )의 오버라이딩 : 객체를 문자열(string)으로 변환하기 위한 메서드
<toString 오버라이딩 예시>
public String toString( ) { return " IV : " + IV ; }

> public Class getClass( ) : 객체 자신의 클래스 정보를 담고 있는 Class인스턴스를 반환

* 쓰레드 관련 메서드
> public void notify( ) : 현 객체에 대해 대기중인 하나의 쓰레드를 깨운다.
> public void notifyAll( ) : 현 객체에 대해 대기중인 모든 쓰레드를 깨운다.
> public void wait(long timeout, int nanos) :
다른 쓰레드가 notify( )나 notifyAll( )을 호출할 때까지 현재 쓰레드를 무한히 또는 지정된 시간(timeout, nanos)동안 기다리게 한다.
* timeout, nanos는 생략가능
* timeout은 1,000 분의 1초, nanos는 10^9분의 1초

<String클래스>
String클래스 = 데이터(char[]) + 메서드(문자열 관련)
내용을 변경할 수 없는 불변(immutable) 클래스
덧셈 연산자(+)를 이용한 문자열 결합은 성능이 떨어짐
문자열의 결합이나 변경이 잦다면, 내용의 변경이 가능한 StringBuffer 혹은 StringBulider를 사용
문자열 생성시 String리터럴 과 String객체 타입으로 생성할 수 있다.

- String 리터럴과 객체타입
1. String 리터럴 : 자바 내부적으로 '러터럴 테이블'로 관리되어지며, 동일한 리터럴은 공유하여 사용한다.
* String str1 = "abc"

2. String 생성자 : new String( ) 등으로 생성된 String 객체, 같은 문자열이어도 내부주소는 다르다.
* String str2 = new Sting("abc")

* 리터럴로 값을 넣은 문자열들은 같은 주소값을 가지지만 new연산자를 이용한 객체생성시 매번 다른 객체가 생성됨
* 등가 비교 연산자 (==)는 주소 비교임 문자열 비교시에는 equals임을 잊지말자
* 문자열 리터럴
문자열 리터럴은 프로그램 실행시 자동으로 생성된다.(constant pool에 저장)

<빈 문자열 (" ", empty string)>
내용이 없는 문자열. 크기가 0인 char형 배열을 저장하는 문자열 (null과 다르다)
String str = " " ; // str을 빈 문자열로 초기화
크기가 0인 배열을 생성하는 것은 어느 타입이나 가능
char[ ] chArr = new char[0]; // 길이가 0인 char 배열
int[ ] iArr = { }; //길이가 0인 int배열

- 문자(char)와 문자열(String)의 초기화
> 변수 선언 시
String s : null 값으로 저장됨
char c : '\u0000' 값으로 저장됨

> 빈 문자열로 초기화한다.
String s = " "; // 빈 문자열로 초기화
char c = ' '; // 공백으로 초기화

<String클래스의 생성자>
1. 기본 생성자
* String str2 = new Sting("abc")

2. 배열을 사용한 생성자
* String(char[ ] value) : 주어진 문자열(value)을 갖는 String인스턴스를 생성한다.
char[ ] c = {'H', 'e', 'l', 'l', 'o'};
String s = new String(c); // s = "Hello"
*반대로 전환시 tocharArray( ) 사용

3. StringBuffer를 사용한 생성자
* String(StringBuffer buf) : StringBuffer인스턴스가 갖고 있는 문자열과 같은 내용의 String객체를 생성한다. (StringBuffer -> String 변환)
StringBuffer sb = new StringBuffer("Hello");
String s = new String(sb); // s = "Hello"
* 반대의 경우 StringBuffer의 생성자를 사용한다.

<String클래스의 주요 메서드>
char charAt(int index) : 지정한 위치(index)에 있는 문자를 알려준다.(index의 시작은 0)
String s = "Hello";
String n = "0123456";
char c = s.charAt(1);
char c2 = n.charAt(1); // c = 'e', c2 = '1'

int compareTO(String str) : 문자열(str)과 사전순서로 비교한다. 같으면 0을, 사전순으로 이전이면 음수, 이후면 양수를 반환한다.(정렬 시 사용)
int i = "aaa".compareTo("aaa");
int i2 = "aaa".compareTo("bbb");
int i3 = "bbb".compareTo("aaa"); // i=0, i2=-1, i3=1

String concat(String str) : 문자열(str)을 뒤에 덧붙인다.
String s = "Hello";
String s2 = s.concat(" World"); // s2="Hello World"

boolean contains(CharSequence s) : 지정된 문자열(s)이 포함되었는지 검사한다.
String s = "abcdefg";
boolean b = s.contains("bc"); // b= true
*CharSequence는 캐릭터타입을 활용하는 클래스들을 인터페이스로 묶어둔 것(CharBuffer, Segment, String, StringBuffer, StringBuilder)

boolean endsWith(String suffix) : 지정된 문자열(suffix)로 끝나는지 검사한다.(*반대의 경우 stratsWith( ) 사용)
String file = "Hello.txt";
boolean b = file.endsWith("txt");// b=ture

boolean equals(Object obj) : 매개벼수로 받은 문자열(obj)과  String인스턴스의 문자열을 비교한다. obj가 String이 아니거나 문자열이 다르면 false를 반환한다.
String s = "Hello";
boolean b = s.equals("Hello");
boolean b2 = s.equals("hello");// b=ture, b2=false

boolean equalsIgnoreCase(String str) : 문자열과 String인스턴스의 문자열을 대소문자 구분없이 비교한다.
String s = "Hello";
boolean b = s.equalsIgnoreCase("HELLO");
boolean b2 = s.equalsIgnoreCase("heLLo"); // b=true, b2=true

int indexOf(int ch) : 주어진 문자(ch)가 문자열에 존재하는지 확인하여 위치(index)를 알려준다. 못찾으면 -1을 반환한다.(index의 시작은 0)
String s = "Hello";
int idx1 = s.indexOf('o');
int idx2 = s.indexOf('k'); // idx1=4, idx2=-1

int indexOf(int ch, int pos) : 주어진 문자(ch)가 문자열에 존재하는지 지정된 위치(pos)부터 확인하여 위치(index)를 알려준다. 못찾으면 -1을 반환한다.(index의 시작은 0), (지정된 위치 이전 문자는 무시)
String s = "Hello";
int idx1 = s.indexOf('e', 0);
int idx2 = s.indexOf('e', 2); // idx1=1, idx2=-1

int indexOf(String str)
주어진 문자열이 존재하는지 확인하여 그 위치(index)를 알려준다. 없으면 -1을 반환한다.(index의 시작은 0)
String s = "ABCDEFG";
int idx = s.indexOf("CD"); // idx = 2

int lastIndexOf(int ch) : 지정된 문자 또는 문자코드를 문자열의 오른쪽 끝에서부터 찾아서 위치(index)를 알려준다. 못찾으면 -1을 반환한다.
String s = "java.lang.Object";
int idx1 = s.lastIndexOf('.');
int idx2 = s.indexOf('.'); // idx1=9, idx2=4

int lastIndexOf(String str) : 지정된 문자열을 인스턴스의 문자열 끝에서 부터 찾아서 위치(index)를 알려준다. 못찾으면 -1을 반환한다.
String s = "java.lang.java";
int idx1 = s.lastIndexOf("java");
int idx2 = s.indexOf("java"); // idx1=10, idx2=0

int length( ) : 문자열의 길이를 알려준다.
String s = "Hello";
int length = s.length( ); // length=5

String[ ] split(String regex) : 문자열을 지정된 분리자(regex)로 나누어 문자열 배열에 담아 반환한다.
String animals = "dog, cat, bear";
String[ ] arr = animakls.split( ", "); // arr[0]="dog", arr[1]="cat", arr[2]="bear"
*regex은 정규식을 대입한다

String[ ] split(String regex, int limit) : 문자열을 지정된 분리자(regex)로 나누어 문자열배열에 담아 반환한다. 단, 문자열 전체를 지정된 수(limit)로 자른다.
String animals = "dog, cat, bear";
String[ ] arr = animakls.split(", ", 2); // arr[0]="dog", arr[1]="cat, bear"

boolean startsWith(String prefix) : 주어진 문자열(prefix)로 시작하는지 검사한다.
String s = "java.lang.Object";
boolean b = s.startsWith("java");
boolean b2 = s.startsWith("lang"); // b=true, b2=false

String substring(int begin)
String substring(int begin, int end) : 주어진 시작위치(begin)부터 끝 위치(end)범위에 포함된 문자열을 얻는다. 이 때 시작위치의 문자는 범위에 포함되지만, 끝 위치의 문자는 포함되지 않는다.(begin<=x<end)
String s = "java.lang.Object";
String c = s.substring(10);
String p = s.substring(5, 9); // c="Object", p="lang"

String toLowerCase( ) : String인스턴스에 저장되어 있는 모든 문자열을 소문자로 변환하여 반환한다.
String s = "Hello";
String s1 = s.toLowerCase( ); // s1="hello"

String toUpperCase( ) : String인스턴스에 저장되어 있는 모든 문자열을 대문자로 변환하여 반환한다.
String s = "Hello";
String s1 = s.toUpperCase( ); // s1="HELLO"

String trim( ) : 문자열의 왼쪽 끝과 오른쪽 끝에 있는 공백을 없앤 결과를 반환한다. 이 때 문자열 중간에 있는 공백은 제거되지 않는다.
String s = "  Hello World  ";
String s1 = s.trim( ); // s1="Hello World"

static String valueOf(boolean b)
static String valueOf(char c)
static String valueOf(int i)
static String valueOf(long l)
static String valueOf(float f)
static String valueOf(double d)
static String valueOf(Object o) : 지정된 값을 문자열로 변환하여 반환한다. 참조변수의 경우, toSting( )을 호출한 결과를 반환한다.
String b = String.valueOf(true);
String c = String.valueOf('a');
String i = String.valueOf(100);
String l = String.valueOf(100L);
String f = String.valueOf(10f);
String d = String.valueOf(10.0);
java.util.Data dd = new java.util.Data( );
String data = String.valueOf(dd); // b="true", c="a", i="100", l="100", f="10.0", d="10.0", data="Wed Jan 27 21:26:29 KST 2016"

문자열 결합 join( ) StringJoiner
join( ) 여러 문자열 사이에 구분자를 넣어서 결합한다.

문자열과 기본형 간의 변환
숫자를 문자열로 변환
int i = 100;
String str1 = i = "";
String str2 = =String.valueOf(i);

문자열을 숫자로 바꾸는 방법
int i = Integer.parseInt("100");
int i2 = Integer.valueOf("100");
Integer i2 = Integer.valueOf("100");

문자열 -> 기본형
래퍼클래스.parse기본클래스(String s)
래퍼클래스.valueOf(String s)
*같은 방법이나 valueOf(String s)가 더 간단한 방법이다

StringBuffer 클래스
String처럼 문자형 배열을(char[ ])을 내부적으로 가지고있다.
그러나 String과 달리 내용을 변경할 수 있다.(mutable)

StringBuffer 생성자
배열은 길이 변경불가. 공간이 부족하면 새로운 배열 생성
StringBuffer는 저장할 문자열의 길이를 고려해서 적절한 크기로 먼저 생성해야한다.
public StringBuffer(int length)
*최초 길이는 지정한 문자열+16

StringBuffer 변경
StringBuffer는 String과 달리 내용 변경이 가능

*append ( ) : 끝에 문자열 추가
delete ( ) : 삭제
insert ( ) : 삽입
위 3개 메서드들의 반환타입은 StringBuffer이기에 코드를 축약할 수 있다.
sb.append("123").append("ZZ");

StringBuffer 비교
StringBuffer는 equals( )가 오버라이딩 되어 있지 않다.(주소비교)
StringBuffer을 String으로 변환 후 equals( )로 비교한다.
참조변수.toString( );

StringBuffer의 생성자와 메서드
StringBuffer( ) : 16문자를 담을 수 있는 버퍼를 가진 StringBuffer 인스턴스를 생성한다.
StringBuffer sb = StringBuffer( ); // sb = ""

StringBuffer(int length) : 지정된 개수의 문자를 담을 수 있는 버퍼를 가진 StringBuffer 인스턴스를 생성한다.
StringBuffer sb = new StringBuffer(10); // sb=""

StringBuffer(String str) : 지정된 문자열 값(str)을 갖는 StringBuffer 인스턴스를 생성한다.
StringBuffer sb = new StringBuffer("Hi"); // sb="Hi"

StringBuffer append(기본형타입 참조변수)
매개변수로 입력된 값을 문자열로 변환 후 StringBuffer인스턴스가 저장된 문자열의 뒤에 덧붙인다.
StringBuffer타입의참조변수.append(기본형타입 참조변수);

int capacity( ) : StringBuffer인스턴스의 버퍼크기를 알려준다. length( )는 버퍼에 담긴 문자열의 길이를 알려준다.
대상참조변수.capacity( );

char charAt(int index) : 지정된 위치(index)에 있는 문자를 반환한다.
char c = sb.charAt(2) // c='c'

StringBuffer delete(int start, int end) : 시작위치(start)부터 끝 위치(end)사이에 있는 문자를 제거한다. 단 끝 위치의 문자는 제외
sb.delete(3, 6);

StringBuffer deletecharAt(int index) : 지정된 위치(index)의 문자를 제거한다.
sb.deletecharAt(int index);

StringBuffer insert(int pos, 기본타입 v) : 두번째 매개변수로 받은 값을 문자열로 변환하여 지정된 위치(pos)에 추가한다. pos는 0부터 시작
sb.insert(4,'.');

int length( ) : StringBuffer인스턴스에 저장되어 있는 문자열의 길이를 반환한다.
sb.length( );

StringBuffer repalce(int start, int end, String str) : 지정된 범위(start~end)의 문자들을 주어진 문자열로 바꾼다. (start <= x < end)
sb.repalce(3, 6, "AB");

StringBuffer reverse( ) : StringBuffer인스턴스에 저장되어있는 문자열의 순서를 거꾸로 나열한다.
sb.reverse( );

void setCharAt(int index, char ch) : 지정된 위치의 문자를 주어진 문자(ch)로 바꾼다.
sb.setCharAt(5, 'o');

void setLength(int newLength) : 지정된 길이로 문자열의 길이를 변경한다. 길이를 늘리는 경우 빈공간을 널문자 '\u0000'로 채운다.
sb.setLength(5);

String toString( ) : StringBuffer 인스턴스의 문자열을 String으로 반환
sb.toString( );

String substring(int start)
String substring(int start, int end) : 지정된 범위의 문자열을 뽑아서 String으로 반환한다. 시작위치만 입력할 경우 모든 문자열까지 반환
sb.substring(3, 5);

래퍼 클래스 (wrapper)
8개의 기본형을 객체로 다뤄야할 때 사용하는 클래스
Boolean / Character / Byte / Short / Integer / Long / Float / Double

Number클래스
모든 숫자 래퍼클래스의 조상(추상클래스)

문자열을 숫자로 변환하기
문자열을 숫자로 변환하는 다양한 방법
int i = new Integer("100").intValue( );
int i2 = Integer.parseInt("100");
Integer i3 = Integer.valueOf("100");
Integer i4 = new Integer("100");
*대부분 문자열을 받는 생성자가 있음

래퍼클래스를 문자열로 변경
toString( ) 사용

n진법의 문자열을 숫자로 변환하기(뒤에 매개변수가 없으면 기본적으로 10진수로 변환)
int i = Integer.parseInt("100", 2) // 2진수
int i = Integer.parseInt("100", 8) // 8진수
int i = Integer.parseInt("100", 16) // 16진수

오토박싱&언박싱
JDK 1.5이전에는 기본형과 참조형간의 연산이 불가능
Integer intg = (Integer)i;
Object obj = (Object)i;
Long lng = 100L;
등의 코드를 자동으로 컴파일해서 적용해줌