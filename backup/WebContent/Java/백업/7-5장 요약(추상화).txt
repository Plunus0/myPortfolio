추상 클래스(abstract class)
미완성 설계도 = 미완성 메서드를 갖고 있는 클래스
다른 클래스 작성에 도움을 주기 위한 것. 인스턴스 생성불가
상속을 통해 추상 메서드를 완성해야. 인스턴스 생성가능(강제로 완성시켜야함)
추상 클래스도 생성자가 있어야 한다.

추상 메서드(abstract method)
미완성 메서드. 구현부(몸통, {})가 없는 메서드
꼭 필요하지만 자손마다 다르게 구현될 것으로 예상되는 경우
추상 메서드 호출가능(호출할 때는 선언부만 필요)
*오버라이딩과 비슷하나 강제성이 다르다

추상클래스의 작성
여러 클래스에 공통적으로 사용될 수 있는 추상클래스를 바로 작성하거나 기존 클래스의 공통 부분을 뽑아서 추상 클래스를 만든다.
*추상클래스를 단계별로 작성해 나가면 오버라이딩보다 효과적으로 관리 가능

추상클래스의 장점
추상화된 코드는 구체화된 코드보다 유연하다. 변경에 유리

인터페이스(interface) / 클래스와 동등한 개념
추상 메서드의 집합(변수, iv, cv 불가)
구현된 것이 전혀 없는 설계도.껍데기(모든 멤버가 public)

문법
interface 인터페이스이름 {
public static final 타입 상수이름 = 값;
public abstract 메서드이름(매개변수목록); }

*인터페이스 내 모든 상수의 접근제어자는 public, static final 이다.(생략가능)
*인터페이스 내 모든 메서드의 접근제어자는 public, abstract 이다.(생략가능)

인터페이스의 조상은 인터페이스만 가능(Object가 최고 조상 아님)
다중 상속이 가능(추상메서드는 충돌해도 구현부가 없기에 충돌 문제 없음)

인터페이스의 구현
인터페이스에 정의된 추상 메서드를 완성하는 것

class 클래스이름 implements 인터페이스이름 { 
//인터페이스에 정의된 추상메서드를 모두 구현해야 한다. }
*일부만 구현하는 경우 class앞에 abstract를 붙여 추상클래스화 해야함

인터페이스의 장점
두 대상(객체) 간의 '연결, 대화, 소통'을 돕는 '중간 역할'을 한다.
선언(설계)와 구현을 분리시킬 수 있게 한다.
인터페이스 덕분에 B가 변경되어도 A는 안바꿀 수 있게 된다.(느슨한 결합)
개발 시간을 단축할 수 있다.
변경에 유리한 유연한 설계가 가능하다.
표준화가 가능하다.
서로 관계없는 클래스들을 관계를 맺어줄 수 있다.

디폴트 메서드와 static 메서드
인터페이스에 디폴트 메서드, static메서드 추가 가능(JDK1.8부터)
인터페이스에 새로운 메서드(추상 메서드)를 추가하기 어려움(해결책 => 디폴트 메서드(default method)
디폴트 메서드는 인스턴스 메서드(인터페이스 원칙 위반)
디폴트 메서드가 기존의 메서드와 충돌할 때의 해결책
1. 여러 인터페이스의 디폴트 메서드 간의 충돌
-인터페이스를 구현한 클래스에서 디폴트 메서드를 오버라이딩해야 한다.
2. 디폴트 메서드와 조상 클래스의 메서드 간의 충돌
-조상 클래스의 메서드가 상속되고, 디폴트 메서드는 무시된다.