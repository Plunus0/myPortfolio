제어자(modifier) 형용사
클래스와 클래스의 멤버(멤버변수, 메서드)에 부가적인 의미 부여
접근 제어자 : public, protected, (default), private
그 외 : static, final, abstract, native, transient, synchronized, volatile, strictfp

하나의 대상에 여러 제어자를 같이 사용가능(접근 제어자는 하나만)

접근제어자(access modifier)
private : 같은 클래스 내에서만 접근이 가능하다.
(default) : 같은 패키지 내에서만 접근이 가능하다.
protected : 같은 패키지 내에서, 그리고 다른 패키지의 자손클래스에서 접근이 가능하다.
public : 접근 제한이 전혀 없다.
*class앞에는 public과 (default)만 작성가능

캡슐화와 접근 제어자

접근 제어자를 사용하는 이유
외부로부터 데이터를 보호하기 위해서(메서드를 통한 간접 접근허용)
외부에는 불필요한, 내부적으로만 사용되는, 부분을 감추기 위해서

그 외
static - 클래스의, 공통적인
멤버변수
모든 인스턴스에 공통적으로 사용되는 클래스 변수가 된다.
클래스 변수는 인스턴스를 생성하지 않고도 사용 가능하다.
클래스가 메모리에 로드될 때 생성된다.
메서드
인스턴스를 생성하지 않고도 호출이 가능한 static메서드가 된다.
static메서드 내에서는 인스턴스멤버들을 직접 사용할 수 없다.

final - 마지막의, 변경될 수 없는
클래스
변경될 수 없는 클래스, 확장될 수 없는 클래스가 된다.
그래서 final로 지정된 클래스는 다른 클래스의 조상이 될 수 없다.
메서드
변경될 수 없는 메서드, final로 지정된 메서드는 오버라이딩을 통해 재정의 될 수 없다.
멤버변수/지역변수
변수 앞에 final이 붙으면, 값을 변경할 수 없는 상수가 된다.

abstract - 추상의, 미완성의
클래스
클래스 내에 추상 메서드가 선언되어 있음을 의미한다
메서드
선언부만 작성하고 구현부는 작성하지 않은 추상 메서드임을 알린다.
*추상클래스의 인스턴스 생성불가
*추상클래스를 상속받아서 완전한 클래스를 만든 후에 객체 생성가능