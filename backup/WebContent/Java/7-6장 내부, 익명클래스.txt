<내부 클래스(inner class)>
클래스 안의 클래스
class A {
   class B { }
}
* B의 외부클래스 A / A의 내부클래스 B

- 내부 클래스의 장점
내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다.
코드의 복잡성을 줄일 수 있다.(캡슐화)

- 내부 클래스의 종류와 특징
내부 클래스의 종류와 유효범위는 변수와 동일

- 인스턴스 클래스 : 외부 클래스의 멤버변수 선언위치에 선언하며, 외부 클래스의 인스턴스멤버처럼 다루어진다. 주로 외부 클래스의 인스턴스관련된 작업에 사용될 목적으로 선언된다.
- 스태틱 클래스 : 외부 클래스의 멤버변수 선언위치에 선언하며, 외부 클래스의 static멤버처럼 다루어진다. 주로 외부 클래스의 static멤버, 특히 static메서드에서 사용될 목적으로 선언된다.
- 지역 클래스 : 외부 클래스의 메서드나 초기화블럭 안에 선언하며, 선언된 영역 내부에서만 사용될 수 있다.
익명 클래스 : 클래스의 선언과 객체의 생성을 동시에 하는 이름없는 클래스(일회용)

- 내부 클래스의 제어자와 접근성
내부 클래스의 제어자는 변수에 사용 가능한 제어자와 동일
*static멤버는 static 클래스에서만 정의가능하다.
*static 내부 클래스에서는 외부 클래스의 인스턴스 멤버에 접근할 수 없다.
*static내부 클래스가 아닌 경우에도 상수의 final static은 허용(지역 내부 클래스는 메서드 내에서만 사용)

- 내부클래스에서는 외부클래스의 private멤버도 접근 가능하다.

- 메서드 내부클래스의 객체가 메서드 내 지역변수보다 더 오래 존재할 수 있기 때문에 지역변수는 사용이 불가능, 상수는 사용 가능
* JDK 1.8부터 상수에 final 생략가능하나 변수지만 상수 취급을함(다만 추후 값이 바뀔 경우 오류 발생)

- 외부클래스 변수 호출
외부클래스명.this.변수명
내부클래스 변수 호출
this.변수명

<익명 클래스(anonymous class)>
이름이 없는 일회용 클래스, 정의와 생성을 동시에
new 조상클래스이름() { }
또는
new 구현인터페이스이름() { }