<스트림(Stream)>
다양한 데이터 소스(컬렉션, 배열)를 표준화된 방법으로 다루기 위한 것
1. 스트림만들기
2. 중간연산(0~n번)
연산결과가 스트림인 연산
3. 최종연산(1번)
연산결과가 스트림이 아닌 연산(스트림의 요소를 소모)
* List<Integer> list = Arrays.asList(1, 2, 3, 4, 5) ;

- 스트림 생성방법
Stream<Integer> intStream = list.stream( ) ;
Stream<String> strStream = Stream.of(new String [ ] {"a", "b", "c"}) ;
Stream<Integer> evenStream = Stream.iterate(0, n->n+2);
Stream<Double> randomStream = Stream.generate(Math : : random) ;
IntStream intStream = new random( ).ints(5) ;

* 예제
String[ ] strArr = {"dd","aaa","CC","cc","b"};
Stream<String> stream = Stream.of(StrArr); // 문자열 배열이 소스인 스트림
Stream<String> filteredStream = stream.filter( ); // 걸러내기(중간연산)
Stream<String> distinctedStream = stream.distinct( ); // 중복제거(중간연산)
Stream<String> sortedStream = stream.sort( ); // 정렬(중간연산)
Stream<String> limitedStream = stream.limit(5); //스트림 자르기(중간연산)
int total = stream.count( ); // 요소 개수 세기(최종연산)

- 스트림(Stream)의 특징
스트림은 데이터 소스로부터 데이터를 읽기만할 뿐 변경하지 않는다.
스트림은 Iterator처럼 일회용이다.(필요하면 다시 스트림을 생성해야 함)
최종 연산 전까지 중간연산이 수행되지 않는다. - 지연된 연산
스트림은 작업을 내부 반복으로 처리한다.
스트림의 작업을 병렬로 처리 - 병렬스트림
parallel( ) : 병렬 스트림으로 전환(속성만 변경)
기본형 스트림이 있다 IntStream, LingStream, DoubleStream, 등등
* 오토박싱&언박싱의 비효율이 제거됨(Stream<Integer>대신 사용)
* 숫자와 관련된 유용한 메서드를 Stream<T>보다 더 많이 제공(sum( ), average( ) ... )

<스트림 만들기>
- 컬렉션
Collection인터페이스의 stream( )으로 컬렉션을 스트림으로 변환
Stream<E> stream( ) // Collection인터페이스의 메서드

* 배열
Stream<T> Stream.of(T...values) // 가변인자
Stream<T> Stream.of(T[ ]) // 배열
Stream<T> Arrays.stream(T[ ])
Stream<T> Arrays.stream(T[ ] array, int startInclusive, int endExclusive) // from~to

* 기본형 배열
IntStream IntStream.of(int...values) // 가변인자
IntStream IntStream.of(int[ ]) // 배열
IntStream Arrays.stream(int[ ])
IntStream Arrays.stream(int[ ] array, int startInclusive, int endExclusive) // from~to

* 난수
IntStreamintStream = new Random( ). ints ( ); //무한스트림
IntStream intStream = new Random( ). ints(5) ; // 크기가 5인 난수 스트림을 반환
intStream.limit(5).forEach(System.out : : println) ; // 5개의 요소만 출력

* 난수의 범위
Integer.MIN_VALUE <= ints( ) <= Integer.MAX_VALUE
Long.MIN_VALUE <= longs( ) <= Long.MAX_VALUE
0.0 <= doubles( ) < 1.0

* 지정된 범위의 난수를 요소로 갖는 스트림을 생성하는 메서드(Random클래스)
[무한스트림]
IntStream ints(int begin, int end)
LongStream longs(long begin, long end)
DoubleStream doubles(double begin, double end)
[유한 스트림]
IntStream ints(long streamSize, int begin, int end)
LongStream longs(long streamSize, long begin, long end)
DoubleStream doubles(long streamSize, double begin, double end)

* 특정 범위의 정수
IntStream intStream = IntStream.range(int begin, int end) ; // 끝을 미포함
IntStream intStream = IntStream.rangeClosed(int begin, int end) ; // 끝을 포함

<람다식 iterate( ), generate( )>
static <T> Stream<T> iterate(T seed, UnaryOperator<T> f) // 이전 요소에 종속적
static <T> Steam<T> generate(Supplier<T> s) // 이전 요소에 독립적

- iterate( ) 는 이전요소를 seed로 해서 다음요소를 계산한다
Steam<Integer> evenStream = Stream.iterate(0, n->n+2); // 0, 2, 4, 6 ... [무한스트림]

- generate( )는 seed를 사용하지 않는다.
Stream<Double> randomStream = Stream.generate(Math::random);
Stream<Integer> oneStream = Stream.generate( ()->1);

<파일과 빈 스트림>
파일을 소스로 하는 스트림 생성하기
Stream<Path> Files.list(Path dir) // Path는 파일 또는 디렉토리

Stream<String> Files.lines(Path path)
Stream<String> Files.lines(Path path, Charset cs)
Stream<String> lines( ) // BufferedReader클래스의 메서드

- 비어있는 스트림 생성
Stream emptyStream = Stream.empty( ); // 빈 스트림
long count = emptyStream.count( ); // count의 값은 0

<스트림의 연산>
스트림이 제공하는 기능 - 중간 연산과 최종 연산

- 스트림의 연산 : 중간 연산 메서드
> Stream<T> distinct( ) : 중복을 제거
> Stream<T> filter(Predicate<T> predicate) : 조건에 안맞는 요소 제외
> Stream<T> limit(long maxSize) : 스트림의 maxSize까지 잘라내기
> Stream<T> skip(long n) : 스트림의 n개 건너뛰기
> Stream<T> peek(Consumer<T> action) : 스트림의 요소에 peek 작업수행
> Stream<T> sorted( ) // reversed( ) : (역순)정렬
> Stream<T> sorted(Comparator<T> comparator) : 스트림의 요소를 정렬
>
Stream<R> // map(Function<T,R> mapper)
DoubleStream // mapToDouble(ToDoubleFunction<T> mapper)
IntStream // mapToInt(ToIntFunction<T> mapper)
LongStream // mapToLong(ToLongFunction<T> mapper)

Stream<R> // flatMap(Function<T,Stream<R>> mapper)
DoubleStream // flatMapToDouble(Function<T,DoubleStream> m) 
IntStream // flatMapToInt(Function<T,IntStream> m)
LongStream // flatMapToLong(Function<T,LongStream> m) : 스트림의 요소를 변환한다.

- 스트림의 연산 : 최종 연산 메서드
>
void forEach(Consumer<? super T> action)
void forEachOrdered(consumer<? super T> action)//병렬스트림일 경우 순서유지기능 : 각 요소에 지정된 작업 수행
> long count( ) : 스트림의 요소의 개수 반환
>
Optional<T> max(Comparator<? super T> comparator)
Optional<T> min(Comparator<? super T> comparator) : 스트림의 최대값/최소값을 반환
>
Optional<T> findAny( ) // 아무거나 하나(병렬스트림)
Optional<T> findFirst( ) // 첫번째(직렬스트림) : 스트림의 요소 하나를 반환(filter와 같이 쓰임)
>
boolean allMatch(Predicate<T> p) // 모두
boolean anyMatch(Predicate<T> p) // 최소 하나
boolean noneMatch(Predicate<T> p) // 모두 만족하지 않는지 : 주어진 조건을 모든 요소가 만족시키는지, 만족시키지 않는지 확인
>
Object[ ] toArray( )
A[ ] toArray(IntFunction<A[ ] generator) : 스트림의 모든 요소를 배열로 반환
>
Optional<T> reduce(BinaryOperator<T> accumulator)
T reduce(T identity, BinaryOperator<T> accumulator)
U reduce(U identity, BiFunction<U,T,U> accumulator, BinaryOperator<U> combiner)
: 스트림의 요소를 하나씩 줄여가면서(리듀싱) 계산한다
>
R collect(Collector<T,A,R> collector)
R collect(Supplier<R> supplier, BiConsumer<R,T> accumulator, BiConsumer<R,R> combiner) : 스트림의 요소를 수집한다. 주로 요소를 그룹화하거나 분할한 결과를 컬렉션에 담아 반환하는데 사용된다.

- 스트림의 요소 변환하기 : map( )
Stream<R> map(Function<? super T, ? extends R> mapper) // Stream<T> -> Stream<R>

- 스트림의 요소를 소비하지 않고 엿보기 : peek( )
Stream<T> peek(Consumer<? super T> action)  중간 연산(스트림을 소비x) // 중간 작업결과 확인

- 스트림의 스트림을 스트림으로 변환 - flatMap( )
Stream<String[ ]> strArrStream = Stream.of(new String[ ]{"abc", "def", "ghi"}, new String[ ]{"ABC", "GHI", "JKLMN"});
->
Stream<Stream<String>> strStrStream = strArrStream.map(Arrays :: stream);
// 단순 map을 사용 시 Stream 내부의 Stream이 됨
->
Stream<String> strStrStream = strArrStream.faltMap(Arrays :: stream); // Arrays.stream(T[ ])
//스트림 내부의 다차원 배열을 꺼내 1차원 배열로 만듬

" " : 공백하나
" +" : 하나 이상의 공백

<Optional<T>>
T 타입 객체의 래퍼클래스
null을 직접다루는것은 예외를 발생시킬 수 있으므로 간접적으로 null을 다루기 위함
public final class Optional<T>{ private final T value ; ... } // T타입의 참조변수(모든 종류의 객체 저장가능(null)

- Optional<T>객체 생성
String str = "abc";
Optional<String> optVal = Optional.of(str);
Optional<String> optVal = Optional.of("abc");
Optional<String> optVal = Optional.of(null); // NullPointerException발생
** Optional<String> optVal = Optional.ofNullable(null);// OK
* null대신 빈 Optional<T> 객체를 사용하자
Optional<String> optVal = Optional.<String>empty( ); //빈 객체로 초기화
Object[ ] objArr = new Object[0] // 크기가 0인 배열로 초기화하기

- Optional<T>객체의 값 가져오기
String str1 = optVal.get( ); // null이면 예외발생
String str2 = optVal.orElse(""); // null이면 ""반환
String str3 = optVal.orElseGet(String :: new) //람다식 사용가능 ( ) -> new String( )
String str4 = optVal.orElseThrow(NullPointerException :: new); // null이면 예외발생

* isPresent( ) : Optional객체의 값이 null이면 false, 아니면 true를 반환

<OptionalInt, OptionalLong, OptionalDouble>
기본형 값을 감싸는 래퍼클래스(성능개선)

- OptionalInt~의 값 가져오기
OptionalInt : int getAsInt( )
OptionalLong : long getAsLong( )
OptionalDouble : double getAsDouble( )

- 빈 Optional 객체와의 비교
OptionalInt opt = OptionalInt.of(0);
OptionalInt opt2 = OptopnalInt.empty( ); // 예외발생
opt와 opt2는 value는 0으로 같다

System.out.println(opt.isPresent( )); // true
System.out.println(opt2.isPresent( )); // false
System.out.println(opt.equals(opt2)); // false

<스트림의 최종연산>
스트림의 모든 요소에 지정된 작업을 수행
forEach( ) // 병렬스트림인 경우 순서보장 안됨
forEachOrdered( ) :  // 병렬스트림에도 순서보장

- 조건 검사
boolean allMatch(Predicate<? super T> predicate) // 모든 요소가 조건을 만족시키면 true
anyMatch(Predicate<? super T> predicate) // 한 요소라도 조건을 만족시키면 true
noneMaatch(Predicate<? super T> predicate) // 모든 요소가 조건을 만족시키지 않으면 true

- Collector를 매개변수로 하는 스트림의 최종연산
*reduce( ) : 스트림 전체를 작업
*collect( ) : 스트림 내부 요소를 그룹별로 나눠서 작업

- collect( )
Collector를 구현한 클래스의 객체를 매개변수로 받음

- Collector는 수집에 필요한 메서드를 정의해놓은 인터페이스
public interface Collector<T, A, R>{//T(요소)를 A에 누적 후 R로 결과 반환
Supplier<A> supplier( ); // StringBuilder :: new 누적할 곳
BiConsumer<A, T> accumulator( ); // (sb, s) -> sb.append(s) 누적 방법
BinaryOperator<A> combiner( ); // (sb1,sb2) -> sb1.append(sb2) 결합방법(병렬)
Function<A, R> finisher( ); // sb -> sb.toString( ) 최종변환
Set<Characteristics> characteristics( ); // 컬렉터의 특성이 담긴 Set을 반환
... }

- Collectors클래스는 다양한 기능의 컬렉터를 제공(Collector를 구현한 클래스)
변환 : mapping( ), toList( ), toSet( ), toMap( ), toCollection( ), ...
통계 : counting( ), summingInt( ), averagingInt( ), maxBy( ), minBy( ), summarizingInt( ), ...
문자열 결합 : joining( )
리듀싱 : reducing( )
그룹화와 분할 : groupingBy( ), partitioningBy( ), collectingAndThen( )

- 스트림을 컬렉션, 배열로 변환
스트림을 컬렉션으로 변환 : (Collectors에서 제공)
toList( ), toSet( ), toMap( ), toCollection( )

- 스트림을 배열로 변환 : (Stream에서 제공)
toArray( )
매개변수가 없는 toArray( )의 경우 Object[ ] 배열로 반환
원하는 배열에 반환하려면 매개변수를 꼭 입력해야함

- 스트림의 통계정보 제공(collect제공) - counting( ), simmingInt( ), maxBy( ), minBy( ) ...

> long count = stuStream.coint( ) ; // 전체 카운팅
> long coint = stuStream.collect(counting( )) ; // 그룹별 카운팅 가능

> long totalScore = stuStream.mapToInt(Student :: getTotalScore).sum( ) ; // IntStream의 sum( ) 전체 카운팅
> long totalScore = stuStream.collect(summingInt(Student :: getTotalScore)); // 그룹별 카운팅 가능

> OptionalInt topScore = studentStream.mapToInt(Student :: getTotalScore).max( ); // 전체 중 최대값
> Optional<Stident> topStudent = stuStream.max(comparator.comparingInt(Student :: getTotalScore)); //
> Optional<Student> topStudent = stuStream.collect(maxBy(Comparator.comparingInt(Student :: getTotalScore))); // 비교기준을 두어 그룹 중 최대값 확인 가능

- 스트림을 리듀싱 - reducing( ) // Collectors 제공
reduce( ) 는 전체요소에 대한 리듀싱, reducing( )을 그룹별로 리듀싱이 가능

>
Collector reducing(BInaryOperator<T> op)
Collector reducing(T identity, BinaryOperator<T> op)
Collector reducing(U identity, Function<T,U> mapper, BinaryOperator<U> op // map-reduce 변환작업이 필요할때 사용

>
IntStream intStream = new Random( ).ints(1,46).distinct( ), limit(6);
OptionalInt max = intStream.reduce(integer :: max) // 전체 리듀싱
Optional<Integer> max = intStream.boxed( ).collect(reducing(Integer :: max)); // 그룹별 리듀싱이 가능

>
long sum = intStream.reduce( 0 , (a,b) -> a+b); // 초기값 0과 누적해서 수행할 작업
long sum = intStream.boxed( ).collect(reducing(0,(a,b)->a+b));

int grandTotal = stuStream.map(Student :: getTotalScore).reduce(0, Integer :: sum);
int grandTotal = stuStream.collect(reducing(0,Student :: getTotalScore,Integer :: sum));

- 문자열 스트림의 요소를 모두 연결 - joining( ) // Collectors 제공
String studentNames - stuStream.mpa(Student :: getName).collect(joining( ) ) ;
String studentNames = stuStream.map(Student :: getName).collect(Joining(",")); // 구분자
String studentNames = stuStream.map(Student :: getName).collect(Joining(",", "[", "]")); // 구분자 추가
String studentNames = stuStream.collect(joining(",")); // Student의 toString으로 결합

<스트림의 그룹화와 분할>
- partitioningBy( ) // Collectors 제공
스트림을 2분할한다.

- 사용방법
> Collector partitioningBy(Predicate predicate)
> Collector partitoningBy(predicate predicate, Collector downstream)
<예시>
Map<Boolean, List<Student>> stuBySex = stuStream.collect(partitioningBy(Student :: isMale)) ; // 학생들을 성별로 분할
List(Student>maleStudent=stuBySex.get(true);//Map에서 남학생 List을 얻는다 (여학생은 false)

Map<Boolean,Long>stuNumBySex=stuStream.collect(partitioningBy(Student :: isMale,counting( ))); // 분할+통계
System.out.println(stuNumBySex.get(true)); // 남학생 Long

Map<Boolean, Optional<Student>> topScoreBySex=stuStream.collect(partitioningBy(Student :: isMale, maxBy(comparingInt(Student :: getScore)))); // 분할+통계
System.out.println(topScoreBySex.get(true)); // 남학생 1등 Optional

Map<Boolean,Map<Boolean,List<Student>>>failedStuBySex=stuStream.collect(partitioningBy(Student :: isMale,partitioningBy(s -> s.getScore( ) < 150))); // 성별로 분할 후 기준 성적으로 분할
List<Student>failedMaleStu=failedStuBySex.get(ture).get(true);

- groupingBy( ) // Collectors 제공 
스트림을 n분할 한다.

- 사용방법
> Collector groupingBy(Function classifier)
> Collector groupingBy(Function classifier, Collector downstream)
> Collector groupingBy(Function classifier, Supplier mapFactory, Collector downstream)

Map<Integer,List<Student>>stuByBan=stuStream.collect(groupingBy(Student ::getBan,toList())); // 반별 그룹화, toList생략가능

Map<Integer,Map<Integer,List<Student>>>stuByHakAndBan=stuStream.collect(groupingBy(Stydent :: getHak, groupingBy(Student : getBan))); // 다중그룹화(학년별 그룹, 반별 그룹)

Map(Integer, Map<Integer,Set<student.Level>>>stuByHakAndBan=sutSteam.collect(groupingBy(student :: getHak, groupingBy(Student :: getBan, mapping(s->{List<Student>->Set<Student>Level>
if (s.getScore( ) >= 200) return Student.Level.HIGH; else if(s.getScore( ) >= 100) return Student.Level.MID; else return Student.Level.LOW;} toSet( )) )) );
//학년, 반별로 다중 그룹화 후 성적등급을 Level로 변환

마지막에 Optional :: get을 주어서 Optional안의 객체를 꺼내서 반환할 경우 앞에 Optional이 없어짐

<스트림의 변환(이미지표 참조)>
1. 스트림 -> 기본형스트림
Stream<T> ->
IntStream : mapToInt(ToIntFunction<T> mapper)
LongStream : mapToLong(ToLongFunction<T> mapper)
DoubleStream : mapToDouble(ToDoubleFunction<T> mapper)

2. 기본형스트림 -> 스트림
IntStream -> Stream<Integer> : boxed( )
LongStream -> Stream<Long> : boxed( )
DoubleStream -> Stream<Double> : boxed( )
또는 Stream<U> : mapToObj(DoubleFunction<U> mapper)

3. 기본형스트림 -> 기본형스트림
IntStream -> LongStream : asLongStream( )
DoubleStream -> LongStream : asLongStream( )
LongStream -> DoubleStream : asDoubleStream( )

4. 스트림 -> 부분스트림
Stream<T> -> Stream<T> : skip(long n)
IntaStream -> IntStream : limit(long maxSize)

5. 두 개의 스트림 -> 스트림
Stream<T>, Stream<T> -> Stream<T> : concat(Stream<T> a, Stream<T> b)
IntStream<T>, IntStream<T> -> IntStream<T> : concat(IntStream<T> a, IntStream<T> b)
LongStream<T>, LongStream<T> -> LongStream<T> : concat(LongStream<T> a, LongStream<T> b)
DoubleStream<T>, DoubleStream<T> -> DoubleStream<T> : concat(DoubleStream<T> a, DoubleStream<T> b)

6. 스트림의 스트림 -> 스트림
Stream<Stream<T>> -> Stream<T> : flatMap(Function mapper)
Stream<IntStream<T>> -> IntStream : flatMapToInt(Function mapper)
Stream<LongStream<T>> -> LongStream : flatMapToLong(Function mapper)
Stream<DoubleStream<T>> -> DoubleStream : flatMapToDouble(Function mapper)

7. 스트림 <-> 병렬 스트림 (동일한 변환메서드)
Stream<T> <-> Stream<T>
IntStream <-> IntStream
LongStream <-> LongStream
DoubleStream <-> DoubleStream
: parallel( ) [스트림 -> 병렬스트림], sequential( ) [병렬스트림 -> 스트림]

8. 스트림 -> 컬렉션 (동일한 변환메서드)
Stream<T> ->
IntStream ->
LongStream ->
DoubleStream ->
-> Collection<T> : collect(Collectors, toCollection(Supplier factory))
-> List<T> : collect(Collectors.toList( ))
-> Set<T> : collect(Collectors.toSet( ))

9. 컬렉션 -> 스트림
Collection<T>, List<T>, Set<T> -> Stream<T> : stream( )

10. 스트림 -> Map
Stream<T> ->
IntStream ->
LongStream ->
DoubleStream ->
-> Map<K, V> :
collect(Collectors.toMap(Function key, Function value))
collect(Collectors.toMap(Function k, Function v, BinaryOperator))
collect(Collectors.toMap(Function k, Function v, BinaryOperator merge, Supplier mapSupplier))

11. 스트림 -> 배열
Stream<T> -> T[ ] : toArray(IntFunction<A[ ]> generator)
Stream<T> -> Object[ ]
IntStream -> int[ ]
LongStream -> long[ ]
DoubleStream -> double[ ]
: toArray( )