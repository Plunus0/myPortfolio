[MySQL]
스프레드시트는 마우스를 사용하여 데이터를 관리하지만 MySQL은 코드를 사용하여 데이터를 관리한다.
무료 오픈소스

MySQL Client는 SLI(MySQL Monitor)와 GUI(MySQL Workbench)로 구분되어 있다. GUI기반은 GUI에 소비되는 자원이 있어서 SLI방식보다 속도가 느리다. (하지만 작업이 편하다.)

MySQL작동시 서버 작동유무를 반드시 확인한다.
MySQL 설치 후 내컴퓨터-속성-고급시스템설정-환경변수-시스템변수-Path에 주소를 추가하는 설정을 해야한다.
* C:\Program Files\MySQL\MySQL Server 8.0\bin)

워크벤치 실행시 Edit - Preferences - Appearance 에서 Fonts를 Korean으로 설정

[SQL : Structured Query Language]
관계형 데이터베이스들의 주류를 차지하는 언어

[설치 및 사용방법]
1. bitnami WAMP 설치
2. 직접 설치
https://dev.mysql.com/downloads/mysql/
3. codeanywhere 이용

MySQL은 다중접속을 지원하기에 최초 기본사용자 root라는 이름이다. 최초에 해당 비밀번호를 설정할 수 있다.
* SET PASSWORD = PASSWORD('새비밀번호') : 추후 비밀번호 재설정 및 오류발생시 새 비밀번호를 설정

[실행방법]
MySQL은 윈도우에서는 CMD창에서 설치되어있는 폴더를 찾아 MySQL을 실행해야한다.

[SQL 스키마의 구성요소]
테이블, 제약조건, 뷰, 도메인

[SQL용어]
> 시스템 카탈로그 : 스키마들의 모음으로 DB내 모든 메타데이터 관리
* INFORMATION_SCHMA
> 스키마(schema) : 스키마 : 메타데이터
* 동일 DB에 있는 "관련된" 테이블 및 구성요소들(구성 : 테이블,제약조건,뷰,도메인)
> 릴레이션(relation) : 테이블 : 파일
> 속성(attribute) : 열, column, 필드, y축, 세로축, 데이터의 타입/구조
> 튜플(tuple) : 행, row, 레코드, x축, 가로축, 데이터의 내용/값

[SQL의 명령어의 종류]
- DDL(정의) : CREATE, DROP, ALTER, INDEX, VIEW(가상테이블)
- DML(조작) : INSERT, SELECT/QUERY, UPDATA, DELETE
- DCL(제어) : GRANT, REVOKE

* 오라클만 해당
데이터 변경 작업 완료시 실행 : commit:
작업 취소시 : rollback

- DML의 종류
> INSERT : 생성 // CREATE, 참조 무결성의 원칙 준수
> SELECT : 검색 // READ
> UPDATE : 수정 // UPDATE
> DELETE : 삭제 // DELETE

*질의: SELECT 문 사용
SELECT-FROM[-WHERE-GROUP BY-ORDER BY]로 구성
WHERE절: 조건을 나타내며, 일치, 범위(비교, BETWEEN), 패턴 (LIKE) 등을 지정할 수 있음
집계: GROUP BY 동반 (SUM, COUNT, MIN, MAX, MEDIAN, STDEV) / HAVING: 그룹 선택 조건 지정
조인 연산: 내부 조인, 외부 조인(LEFT OUTER, RIGHT OUTER, FULL OUTER) 등
하위 질의: 질의 내에 있는 또 다른 질의
상호 연관 질의: EXISTS 활용

* 하위 질의
하나의 SQL안에 다른 SQL문이 중첩된 질의를 뜻함
소괄호를 통해 조건의 실행순서를 조절할 수 있다.

스칼라 하위 질의 : SELECT 하위질의
-단일값 반환

[시퀀스 SEQUENCE] (오라클에서만 가능)
- 자동번호 생성기, AUTO_INCREMENT와 비슷한 개념이나 좀 더 구체적이고 세부적인 설정이 가능한 시퀀스를 생성하여 쓰기도 한다.

- 사용방법
CREATE SEQUENCE 시퀀스이름 START WITH 1 INCREMENT BY 1 ...;
* 시퀀스이름은 어떤 테이블의 어떤 항목에 쓰이는 시퀀스인지 자세히 적어주면 좋다
* 최소 설정은 시작번호와 증가단위이다. 그 외 추가가 가능하다.

- 설정
START WITH : 시작 번호
INCREMENT BY : 증가 단위
MAX VALUE : 최대 생성 값
MIN VALUE : 최소 생성 값

[뷰 VIEW]
- 임시테이블의 성격으로 정보보호, 데이터의 독립성, 작업의 단순화, 효율성 증대의 목적을 갖는다. (변수 혹은 함수같은 느낌)
- 뷰를 토대로 뷰를 만들 수 있으며, 테이블이 원형인 뷰에서는 데이터 입력이 가능하지만 뷰를 가공한 2차 뷰와 2개의 테이블이 섞인 뷰에서는 데이터 입력이 불가능하다.
- 여러개의 테이블을 조인한 뷰는 어느 한쪽의 PRIMARY KEY가 포함되어야 한다.
- 그룹함수를 사용한 뷰에서 나온 데이터는 입력되지 않는다. (가동된 데이터는 입력불가)

- 사용방법
CREATE VIEW 뷰이름 AS
   SELECT ...

- 구조 수정방법
ALTER VIEW 뷰이름(컬럼명, 컬럼명, ...)
   SELECT ...

인라인 뷰(inline view): FROM 하위 질의
-view형태로 반환
-상호연관 하위질의로는 사용되지 못함

중첩 질의(nested query): WHERE 하위 질의
-술어와 같이 사용되며 결과를 한정시키기 위해 사용된다. 상관 혹은 비상관 형태이다.

[Table : 표]
데이터들을 정리해놓은 그룹

[제약조건 : 도메인 설정]
- PRIMARY KEY(컬럼명) : 후보키(CANDIDATE KEY) 중 하나를 고유 식별키를 지정한다. (pk)
* CANDIDATE KEY 및 PRIMARY KEY의 값은 고유해야한다.
* 고유식별키가 되지 못한 KEY는 대체키(ALTERNATE KEY)가 된다.
* 2개 이상의 KEY를 조합하여 식별 키를 만드는 것을 복합키(COMPOSITE KEY)라고 한다.
- NOT NULL : 해당 데이터는 공란을 허용하지 않음 (nn)
- NULL : 공란을 허용
- UNIQUE : 유일한 값 (uq)
- AUTO_INCREMENT : 데이터 생성시 최종값으로부터 값을 자동적으로 증가시킴 (ai) 해당 컬럼은 PK로 사용하기 위한것이지 출력하기 위한것이 아님을 인지하자
- DEFAULT 수치 : 기본적으로 입력되어있을 값
- FOREIGN KEY : 외래키 설정
- BIN : 바이너리 값
- UN : 0을 포함한 양수

[DataBase : 데이터베이스 / 스키마]
연관된 Table들을 정리해놓은 그룹

- DataBase만들기
1. new model로 테이블(표) 생성 후 속성(제한사항)등을 추가
2. ER다이어그램을 통해 관계도를 만든다. (저장하기)
3. 제작한 ER다이어그램을 바탕으로 메뉴바 Database탭에서 Forward Engineer를 통해 데이터를 생성한다.

[DataBase server : 데이터베이스 서버]
데이터베이스/스키마 들을 정리해놓은 그룹

[데이터타입]
데이터타입뒤에 ( )로 출력이나 입력에 제한을 둘 수 있다. 없으면 최대값으로 자동지정

- 데이터타입의 종류(http://www.techonthenet.com/mysql/datatypes.php)
정수 : tyinyint, smallint, int//21억 , bigint
고정소수형 : decimal(5, 2)//5자리 중 소숫점 2자리, numeric
부동소수형 : float, double
문자 : char(n)//고정자리, varchar(n)//최소 : 입력값의 자릿수 최대 : n자릿수, text, enum('str1','str2', ...)//목록형 
날짜/시간 : year//년도, date//연월일, time//시간, datetime//연월일시, timestamp//현재시스템의 날짜
SERIAL

[사용방법]
- 로그인
> bin : mysql이 설치된 폴더
> ./mysql : 실행중인 프로그램(mysql)
> -u : user의 약자, 뒤에 사용자명을 작성(최상위 관리자 root)
> -p : password 입력
> -h : host의 약자 인터넷을 통해 외부와 연결할 경우 설정이 필요하다.
(default = 127.0.0.1 == localhost)

[주요 질의문]
- SELECT * FROM USER_TABLES : 데이터 사전에서 USER의 테이블을 가져온다. (테이블 생성 후 제대로 생성됐는지 확인)

- SELECT * FROM USER_SEQUENCES : 시퀀스만 모아놓은 데이터 모음

- CREATE DATABASE 데이터베이스명 : 데이터베이스를 생성한다.

- RENAME TABLE 변경전테이블명 TO 변경후테이블명 : 테이블명을 변경

- ALTER TABLE 테이블명 : 이후 add, drop, change를 붙일 수 있다. (TABLE 대신 VIEW 수정도 가능하다)
* ADD COLUMN column명 데이터 타입 [null | not null and default] after 위치column : 테이블에 신규 column을 추가한다.
* DROP COLUMN column명 : 테이블의 column을 삭제
* CHANGE COLUMN 수정전column명 수정후column명 데이터타입 [null | not null | default] : 테이블 column의 속성을 수정한다.(구조가 변하지 않아도 전부 RESET되므로 반드시 전체 입력해줘야한다.)

- DESC 테이블명 : 데이터테이블의 설정정보를 출력

- DESC 뷰명 : 뷰의 설정정보를 출력

- DROP DATABASE 데이터베이스명 : 데이터베이스를 삭제한다.

- DROP VIEW 뷰명 : 뷰를 삭제한다.

- SHOW DATABASES(or SCHEMAS) : 현재 생성된 데이터베이스들을 보여준다.

- SHOW TABLE : 현재 생성된 테이블들을 보여준다.

- USE 테이블명 : 이후 명령어들은 해당 테이블을 대상으로 사용한다.

- CREATE TABLE 테이블명(생성할컬럼명 데이터타입(길이) 제약조건 ...) : 내용을 기반으로 테이블을 생성한다.

- INSERT INTO 테이블명 (컬럼, 컬럼 ...) VALUES(값, 값, ...) : 데이터테이블의 입력할 열에 값을 입력한다. 다중 입력시 쉼표로 구분 (*빠진게 없다면 컬럼명은 생략 가능)

- INSERT INTO 뷰명 (컬럼, 컬럼 ...) VALUES(값, 값, ...) : 테이블과 마찬가지로 데이터를 입력할 수 있다 VIEW에 데이터를 넣을 경우 해당 값은 VIEW뿐만이 아닌 원본 TABLE에도 입력된다. 원본 TABLE의 제약조건, 규칙, 외래키 등을 계승하므로 입력 시 주의해야한다.

- UPDATE 테이블명 SET 수정할열1=값1, 수정할열2=값2 ... WHERE 지정열=지정값 : 데이터테이블 중 해당 키값의 해당열의 내용을 수정한다. 다중수정이 가능하다. (WHERE 누락시 전체 내용이 변경된다.)

- DELETE FORM 테이블명 WHERE KEY로등록된열이름=키값 : 데이터테이블 중 해당 키값의 전체 내용을 삭제한다. (WHERE 누락시 테이블 전체가 삭제된다.)

- SELECT * FROM 테이블명 : 데이터테이블을 사용자가 볼 수 있도록 전체출력
* SELECT와 FROM 사이의 *표시는 column전체 라는 의미이다. 선별해서 출력을 할 경우 *대신 column명을 적어준다. 다중 작성시 쉼표로 구분
* 출력하는 column명을 바꿔서 출력하고 싶을 경우 column명 AS '표기 명' 으로 작성(AS는 생략가능)
* 출력할 문장을 전부 생성 후 출력COLUMN명에 ROWNUM을 추가하여 자동적으로 번호를 부여하여 출력할 수 있다. 다만 출력 데이터에 한해 일시적인 순차번호가 부여되니 주의해야한다. (추후 Web등에서 사용은 가능하다 해당 번호를 유지하기 위해선 QueryString 등의 방법으로 해당값을 넘겨준다.)
> DISTINCT : 중복제거
> WHERE 선택열 = '값' : 해당하는 데이터테이블에서 선택열의 데이터타입 중 값이 일치하는 데이터를 반환 (2개 이상의 조건문 입력시 조건질의를 참고한다.)
> GROUP BY 컬럼 : 튜플 결과를 부분집합 (혹은 그룹)으로 나눔
- 그룹 속성을 지정해야하며, 해당 그룹 속성에 대해 같은 값을 갖는 튜플을 그룹핑함
- 각 그룹에 대해 집계 함수를 독립적으로 적용함
- 그룹 속성의 순서는 반드시 SELECT절과 동일한 순서로 나타나야함
- 주로 함수와 같이 쓰이며, HAVING과 묶인다.
> HAVING 조건식 ALTER : 그룹 선택조건 명시 SUB( ), COUNT(*), AVG( ), MAX( ), MIN( ), GROUP_CONCAT( ) 등 함수를 사용하는 경우가 많다.
> ORDER BY 선택열, 선택열 ... ASC(내림차순)/DESC(오름차순) : 선택열을 내림차순 방식으로 정렬
> LIMIT 양수 : 데이터테이블 출력시 제한된 수치만큼만 출력된다.

* 그룹질의
두개 이상의 SELECT 문을 이용한 질의
조건 1. 각 SELECT문은 개별실행이 가능해야한다.
조건 2. 컬럼의 순서가 일치해야한다.
SELECT ~~ UNION[ALL] SELECT
UNION : 중복제외
UNION ALL : 중복포함

* 다중 조건 지정
CASE WHEN
-기본문법
CASE
WHEN <조건> THEN <값>
WHEN <조건> THEN <값>
...
ELSE <값>
END [AS <컬럼명>]

* 조건질의 특수연산자
= , <, >, <=, >=, !=, <> : 비교연산자
and &&, or ||, not ! : 복합조건 연산자
BETWEEN value1 AND value2 : 범위지정 연산자(value1과 value2의 사이)
LIKE %value% : value가 포함된 값 (%사용가능)
IN(value1,value2) : value1, value2 들이 들어간 값 (정확한 값)
NOT IN(value1,value2) : value1, value2 들이 들어가지 않은 값 (정확한 값)
IS NULL, IS NOT NULL : null값의 유무 확인

* 산술연산자(읽기전용으로만 출력되며 AS로 별칭 부여가 가능하다.)
+, -, div(정수), /, %(mod)

* JOIN
- SELECT 구문 + LEFT JOIN 연결할테이블명 ON 연결받아출력될테이블명.연결할column명=연결될테이블명.column명 : 데이터테이블에서 연결할 column명을 지정하여 관련있는 테이블과 연결하여 출력한다. (LEFT는 연결될 테이블의 시작위치)

- 테이블 이름이 길어질 경우 AS '별칭' 등을 활용할 수 있다. 또한 AS는 생략될 수도 있다.

- 내부조인 (INNER JOIN)
공통적인 것을 출력 (공란이 없다)
1.
SELECT : 속성들
FROM : 테이블1, 테이블2
WHERE : 조인조건 AND 검색조건
* 테이블1, 테이블2 사이의 INNER JOIN은 생략할 수 있다.
2.
SELECT : 속성들
FROM : 테이블1 INNER JOIN 테이블2, ON 조인조건(테이블1.컬럼 = 테이블2.컬럼)
WHERE : 검색조건
* INNER JOIN을 생략할 수 없다.

- 외부조인 (OUTER JOIN)
기존 테이블은 모두출력 + 외부는 조건에 맞는것만 출력 (공란이 있어도 출력)
SELECT : 속성들
FROM : 테이블1 (LEFT/RIGHT/FULL)OUTER JOIN 테이블2 ON 조인조건
WHERE : 검색조건

- 셀프조인
자기 자신을 조인한다.
반드시 다른 별명을 두어서 사용해야 한다.

[함수]
문자, 숫자, 날짜와 시간에 대한 함수

- 문자
> CHR(정수) : 정수 아스키코드를 문자로 변환
> ASCII('알파벳') : 대상 알파벳 문자의 아스키코드 값을 반환
> CHAR_LENGTH( ) : 문자열 길이
> LENGTH(문자열) : 대상 문자열의 글자 수를 반환
> concat(x, y) : 문자의 결합(3개 이상도 가능하다.)
> insert (x, a, b, y) : x의 a번 문자부터 b 갯수만큼 y문자열로 대체
> LOWER('문자') : 대상 문자열을 모두 소문자로 변환
> UPPER('문자') : 대상 문자열을 모두 대문자로 변환
> left(x, a) : x의 문자에서 왼쪽부터 a개만큼 반환
> right(x, a) x의 문자에서 오른쪽부터 a개만큼 반환
> substring(x, a, b) : x의 a번 문자부터 b개만큼 반환
> reverse(x) : x를 역순으로 반환
> INITCAP('알파벳 문자열') : 문자열의 첫번째 알파벳을 대문자로 변환
> REPLACE('문자열','변경전문자','변경후문자') : 대상 문자열의 지정한 문자를 원하는 문자로 변경
> INSTR('문자열','찾고자하는 문자열',n,k) : 문자열 중 n번째 문자부터 시작하여 찾고자 하는 문자열이 k번째 나타나는 문자열 위치 반환
> LPAD('대상문자',지정할 자릿수,'지정할 문자') : 대상 문자열의 왼쪽부터 지정한 자릿수까지 지정한 문자로 채움
> RPAD('대상문자',지정할 자릿수,'지정할 문자') : 대상 문자열의 오른쪽부터 지정한 자릿수까지 지정한 문자로 채움
> LTRIM('문자열','제거할 문자열') : 대상 문자열의 왼쪽부터 지정한 문자들을 제거
> RTRIM('문자열','제거할 문자열') : 대상 문자열의 오른쪽부터 지정한 문자들을 제거
- TRIM('제거할 문자열'FROM'문자열') : 대상 문자열의 양쪽에서 지정된 문자를 삭제(문자열만 넣으면 기본값으로 공백제거)

- 숫자
출력시 FROM없이 SELECT문만 사용하여 사용할 수 있다.
> ABS(x) : x의 절대값
> CEIL(x) : x보다 크거나 같은 최소의 정수
> FLOOR(x) : x보다 작거나 같은 최소의 정수
> TRUNCATE(x, y) : x의 y번째 자릿수 이하를 버림 (-1은 양수 1의자리)
> ROUND(x, y) : x의 y번째 자릿수를 반올림 (-1은 양수 1의자리)
> MOD(x, y) : x를 y로 나눈 나머지 값
> PI( ) : 원주율
> POWR(x, y) : x의 y제곱 값 계산
> RAND( ) : 랜덤
> SQRT(x) : x의 제곱근 값 계산(숫자는 양수)
> SIGN(x) : x가 음수이면 -1, 0이면 0, 양수이면 1
> SUM( ) : 합계
> AVG( ) : 평균
> COUNT( ) : 갯수
> MAX( ) : 최대값
> MEDIAN( ) : 중간값
> MIN( ) : 최소값
- LN(x) : x의 자연로그 값 반환
- LOG(x, n) : 밑을 x으로 한 n의 로그 값을 계산
*Dual : 오라클에서 제공하는 특수한 테이블로, 표현식을 평가하거나 함수를 호출할 때 사용함

* 와일드문자(와일드 카드 사용시 Like로 사용한다.)
TRUE : 문법오류를 없애기 위한 문자

+ : 문자열을 연결
ex) '골프' + '바이블' : '골프 바이블'

% : 0개 이상의 문자열과 일치 (없어도 되고 있어도 됨)
ex) '%축구$' : 축구를 포함하는 문자열

[ ] : 한 개의 문자와 일치
ex) '[0-5]%' : 0~5사이 숫자로 시작하는 문자열

[^] : 한 개의 문자와 불일치
ex) '[^0-5]%' : 0~5 사이 숫자로 시작하지 않는 문자열

_ : 특정 위치의 한 개의 문자와 일치 (해당 칸에 문자가 없으면 불가능)
ex) '_구%' : 두 번째 위치에 '구'가 들어가는 문자열

- 날짜 함수
> ADDDATE(x, INTERVAL y단위) : x에 y단위 시간을 더한 날짜를 반환
> ADDTIME(x, y) : x와 y시간을 더한 시간
> NOW( ) : 현재 날짜와 시간 반환
> DATE(x) : 날짜(연, 월, 일) ..
> DATEDIFF(x, y) : x, y의 날짜 차이
> CURRENT_DATE( ) : 현재 날짜 0000-00-00
> CURRENT_TIME( ) : 현재 시간 00:00:00
> DAYOFWEEK( ) : 요일을 반환(1~7)
> TO_DATE(char, datetime) : 문자형(char) 데이터를 date형으로 반환
ex) TO_DATE('2020-09-14','yyyy-mm-dd')=2020-09-14
> TO_CHAR(TO_DATE('2020-09-14','yyyy-mm-dd'), datetime) : Date형 데이터를 문자열(VARCHAR2)로 반환
> ADD_MONTHS(TO_DATE('2020-09-14','yyyy-mm-dd'), 숫자) : 날짜에 지정한 달을 더해 Date형으로 반환(1:다음 달, -1:이전 달)
> LAST_DAY(TO_DATE('2020-09-14','yyyy-mm-dd')) : 날짜에 달의 마지막 날을 Date형으로 반환
SYSDATE : DBMS 시스템상의 당일 날짜를 DATE형으로 반환하는 인자가 없는 함수

*datetime의 주요인자
d : 요일 순서(1~7, 월=1)
day : 요일(월요일~일요일)
dy : 요일의 약자(월~일)
dd : 1달 중 날짜(1~31)
ddd : 1년 중 날짜(1~365)
hh, hh12 : 12시간(1~12)
hh24 : 24시간(0~23)
mi : 분(0~59)
mm : 월 순서(01~12, January=01)
mon : 월 이름 약어(Jan~Dec)
month : 월 이름(January~December)
ss : 초(0~59)
yyyy : 4자리 연도
yyy,yy,y : 4자리 연도 중 마지막 3, 2, 1자리

- 날짜 단위
> INTERVAL [SECOND | MINUTE | HOUR | DAY | WEEK | MONTH | YEAR | 초 | 분 | 시간 | 일 | 년]
> INTERVAL 'A:B' MINUTE_SECOND : A분 B초
> INTERVAL 'A:B:C' HOUR_SECOND : A시 B분 C초
> INTERVAL 'A B:C' DAY_MINUTE : A일 B시 C분
> INTERVAL 'A B:C:D' DAY_SECOND : A일 B시 C분 D초

- 형변환
> CONVERT(x, 타입) : x의 타입을 변환한다.
*타입의 종류
binary, char, date, datetime, decimal, integer, time

[저장프로그램]
- SQL은 조건문, 반복문을 활용한 응용프로그램을 구현할 수 는 없다.
- 절차적인 처리를 위해서 기능을 제공하기 위해 저장프로그램을 제공한다.
- 저장프로그램을 미리 캐시메모리에 올려두고 하나의 명령만으로 사용하게 되며 네트워크 트래픽 발생을 저감시켜줄 수 있다.
- 저장프로시저, 함수, 트리거(이벤트), 커서 등이 있다.

- 저장프로시저의작성방법 ( 정의부분, 본문부분 )
> 구분자 설정 : DELIMITER $$ ~ DELIMITER ; 를 먼저 사용하고 그 사이에 작성한다. ;를 $$로 변경해주고 작성완료 후 다시 ;로 변경해주는 구분자

> 정의부분 작성
CREATE DEFINER PROCEDURE 프록시저명 (매개변수, 매개변수 ...)

* DEFINER = 사용자 | 현재사용자 (생략 가능)
* 매개변수 설정시 IN(입력) INOUT(입출력) OUT(출력) 셋중 하나를 선택하며 변수명 뒤에 데이터타입을 입력해야한다.
* out은 return과 비슷하다. return값을 받기 위해선 실행 시 인수에 변수값을 담아준다.

> 본문부분 작성
BEGIN
변수선언 ;
변수값을 설정 ;
조건문 ;
반복문 ;
명령문 ;
END &&

- 실행방법
CALL 프로시저명(인수, 인수)
* 매개변수가 없다면 괄호는 생략이 가능하다.

- 삭제방법
DROP PROCEDURE 프로시저명;

- 변수
> 지역변수
프로시저안에서 선언된 변수
* 선언 예시) DECLARE 변수명 데이터타입 DEFAULT X ;
* 세팅 예시) SET 변수명 = X ;
*  DEFAULT값이 없으면 NULL값이 된다.

> 사용자변수
@~로 시작, 안/밖 어디서든 상관없다.
* 선언 예시) DECLARE @변수명 데이터타입 DEFAULT X ;
* 세팅 예시) SET @변수명 = X ;
* 데이터타입 선언이 불필요하다.
* SQL문, 내장프로시저 안에서도 사용 가능하다.

- 변수에 값 저장하기
1. SET 변수명 = X;
2. SELECT 값 INTO 변수명;

- 변수 값 읽기
SELECT 변수명

[조건문]
- if문
if boolean값 then 실행문 ;
elseif boolean then 실행문 ;
else 실행문 ;
end if ;

- case문
case 읽을변수명
when boolean값 then 실행문 ;
else 실행문 ;
end case ;

[반복문]
- while-do문
while boolean값 do
실행문 ;
end while ;

[인덱스]
사용자가 원하는 데이터가 극히 일부분적이다.
순차적인 탐색의 경우 오랜 시간이 걸린다.
응답시간을 줄이기 위해서 인덱스를 제공한다.
인덱스를 제공하는 것 : 기본키, 외래키, unique

- SHOW INDEX FROM 테이블명 {FROM 데이터베이스명} : 테이블 내에서 인덱스 항목 확인 (데이터베이스명은 생략가능)
- CREATE INDEX 인덱스명 ON 테이블명(COLUMN명) : 인덱스 생성
- DROP INDEX 인덱스명 ON 학생 : 인덱스 삭제

[함수]
사용자가 직접 작성한 사용자 함수
return문에 특정값을 반환하는 기능을 구현할 수 있다.
매개변수는 항상 'in'이다.
returns 반환타입을 선언
begin~end set 하는 SQL문을 사용할 수 없다.
함수 안에서 재귀함수 호출, 내장프록시저를 호출할 수 없다.

- 함수 작성 권한 획득
1. show global variables like 'log_bin_trust_function_creators';
2. set global log_bin_trust_function_creators = 'on';

- 함수 작성방법
delimiter &&
   create function 함수명(매개변수)
   returns 리턴값의데이터타입정의
      begin
	{실행문}
         return 리턴할내용
      end&&
delimiter ;

- 함수 사용방법
함수명(인자)

- 함수 삭제방법
drop function 함수명;

[트리거 : Trigger]
데이터가 변경될 때 자동으로 실행해야할 동작
해당 테이블의 아래 Trigger에 생성된다.

발생시점 종류 : before, after
발생데이터의 종류 : old, new
이벤트의 종류 : insert, update, delete

delimiter &&
create trigger 트리거명 발생시점(before || after) 이벤트종류(insert, update, delete) on 테이블명 for each row
   begin
      {실행문}
   end &&
delimiter ;

* new.컬럼명 : 해당 컬럼에 입력된 후의 값
* old.컬럼명 : 해당 컬럼의 입력되기 이전 값
*트리거명 작성시 알아보기쉽도록한다.
ex) before_학생_update

- 트리거 삭제
drop trigger 트리거명;

[트렉젝션]
논리적인 업무의 단위 / 인련의 작업의 묶음 / 중간에 취소되면 전체 취소된다.

delimiter $$
create procedure 함수명(in/out 매개변수 데이터타입)
   begin
      declare exit handler for sqlexception rollback;
      start transaction;
         {1번 실행문}
         {2번 실행문}
       commit;
   end$$
delimiter ;

* 추후 call 함수명 (인자) 로 사용된다.

signal sqlstate '45000' set message_text = '관련내용': 에러메세지를 강제로 출력시키는 메서드

[Tips]
- 방향키 위쪽을 누르면 이전 명령어를 Replay할 수 있다.
- 명령어의 마지막에는 ; 를 붙인다. 만약 없이 엔터를 칠 경우 줄바꿈이 된다.
- 속성명령어의 위치와 순서가 중요하다.
- 데이터테이블을 정리 시 최소 단위로 데이터를 정리 후 연관된 데이터들은 KEY값을 이용해 묶어줄 경우 데이터의 효율 및 유지보수 능력이 높아진다. (변수처럼 활용) / 다만 다양한 표가 생성될 가능성이 높으므로 직관성이 떨어질 수 있으므로 JOIN기능을 활용할 수 있다.
- backup과 관련된 키워드는 mysqldump, binarylog등이 있다.
- 다양한 프로그래밍언어들과 연계하기위한 키워드로는 프로그래밍언어+mysql api가 있다.
- Edit > SQL Editor > Other에서 Safe Updates를 체크하면 수정할 때 WHERE절을 깜빡하여 전체 데이터가 바뀌는 상황을 막을 수 있다.(대신 2개 이상의 데이터 변경이 안된다.)

[escape 문자]
-- , #, /* */ : 주석

[페이징처리 sql 질의문 예시]
select rno, pid, pcategory, pname, price, to_char(pdate, 'yyyy-mm-dd') pdate
    from (select rownum rno, pid, pcategory, pname, price, pdate
        from (select pid, pcategory, pname, price, pdate
            from cgv_product order by pdate desc))
where rno between 1 and 5;